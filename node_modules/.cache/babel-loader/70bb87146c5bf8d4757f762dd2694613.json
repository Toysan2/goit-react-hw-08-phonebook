{"ast":null,"code":"'use client';\n\n// src/use-radio-group.ts\nimport _defineProperty from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"onChange\", \"value\", \"defaultValue\", \"name\", \"isDisabled\", \"isFocusable\", \"isNative\"];\nimport { isObject } from \"@chakra-ui/shared-utils\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { useCallback, useRef, useState, useId } from \"react\";\nfunction isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n}\nfunction useRadioGroup() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var onChangeProp = props.onChange,\n    valueProp = props.value,\n    defaultValue = props.defaultValue,\n    nameProp = props.name,\n    isDisabled = props.isDisabled,\n    isFocusable = props.isFocusable,\n    isNative = props.isNative,\n    htmlProps = _objectWithoutProperties(props, _excluded);\n  var _useState = useState(defaultValue || \"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    valueState = _useState2[0],\n    setValue = _useState2[1];\n  var isControlled = typeof valueProp !== \"undefined\";\n  var value = isControlled ? valueProp : valueState;\n  var ref = useRef(null);\n  var focus = useCallback(function () {\n    var rootNode = ref.current;\n    if (!rootNode) return;\n    var query = \"input:not(:disabled):checked\";\n    var firstEnabledAndCheckedInput = rootNode.querySelector(query);\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus();\n      return;\n    }\n    query = \"input:not(:disabled)\";\n    var firstEnabledInput = rootNode.querySelector(query);\n    firstEnabledInput == null ? void 0 : firstEnabledInput.focus();\n  }, []);\n  var uuid = useId();\n  var fallbackName = \"radio-\".concat(uuid);\n  var name = nameProp || fallbackName;\n  var _onChange = useCallback(function (eventOrValue) {\n    var nextValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n    onChangeProp == null ? void 0 : onChangeProp(String(nextValue));\n  }, [onChangeProp, isControlled]);\n  var getRootProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      ref: mergeRefs(forwardedRef, ref),\n      role: \"radiogroup\"\n    });\n  }, []);\n  var getRadioProps = useCallback(function () {\n    var _objectSpread2;\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return _objectSpread(_objectSpread({}, props2), {}, (_objectSpread2 = {\n      ref: ref2,\n      name: name\n    }, _defineProperty(_objectSpread2, checkedKey, value != null ? props2.value === value : void 0), _defineProperty(_objectSpread2, \"onChange\", function onChange(event) {\n      _onChange(event);\n    }), _defineProperty(_objectSpread2, \"data-radiogroup\", true), _objectSpread2));\n  }, [isNative, name, _onChange, value]);\n  return {\n    getRootProps: getRootProps,\n    getRadioProps: getRadioProps,\n    name: name,\n    ref: ref,\n    focus: focus,\n    setValue: setValue,\n    value: value,\n    onChange: _onChange,\n    isDisabled: isDisabled,\n    isFocusable: isFocusable,\n    htmlProps: htmlProps\n  };\n}\nexport { useRadioGroup };","map":{"version":3,"mappings":";;;;;;;;AAAA,SAASA,gBAAgB;AACzB,SAASC,iBAAiB;AAC1B,SAASC,aAAaC,QAAQC,UAAUC,aAAa;AAKrD,SAASC,aAAaC,OAAmD;EACvE,OAAOA,SAASP,SAASO,KAAK,KAAKP,SAASO,MAAMC,MAAM;AAC1D;AAoDO,SAASC,gBAA8C;EAAA,IAAhCC,4EAA4B,CAAC;EACzD,IACYC,eAQRD,MARFE;IACOC,YAOLH,MAPFH;IACAO,eAMEJ,MANFI;IACMC,WAKJL,MALFM;IACAC,aAIEP,MAJFO;IACAC,cAGER,MAHFQ;IACAC,WAEET,MAFFS;IACGC,qCACDV;EAEJ,gBAA+BN,SAA0BU,gBAAgB,EAAE;IAAAO;IAApEC;IAAYC,QAAQ;EAC3B,IAAMC,eAAe,OAAOX,cAAc;EAC1C,IAAMN,QAAQiB,eAAeX,YAAYS;EAEzC,IAAMG,MAAMtB,OAAY,IAAI;EAE5B,IAAMuB,QAAQxB,YAAY,YAAM;IAC9B,IAAMyB,WAAWF,IAAIG;IACrB,IAAI,CAACD,UAAU;IAEf,IAAIE,sCAAQ;IAEZ,IAAMC,8BAA8BH,SAASI,cAC3CF,KACF;IAEA,IAAIC,6BAA6B;MAC/BA,4BAA4BJ,MAAM;MAClC;IACF;IAEAG,8BAAQ;IAER,IAAMG,oBAAoBL,SAASI,cAAcF,KAAK;IACtDG,uDAAmBN;EACrB,GAAG,EAAE;EAKL,IAAMO,OAAO5B,MAAM;EACnB,IAAM6B,+BAAwBD,IAAI;EAClC,IAAMjB,OAAOD,YAAYmB;EAEzB,IAAMtB,YAAWV,YACf,UAACiC,cAA+B;IAC9B,IAAMC,YAAY9B,aAAa6B,YAAY,IACvCA,aAAa3B,OAAOD,QACpB4B;IAEJ,IAAI,CAACX,cAAc;MACjBD,SAASa,SAAS;IACpB;IAEAzB,6CAAe0B,OAAOD,SAAS;EACjC,GACA,CAACzB,cAAca,YAAY,CAC7B;EAEA,IAAMc,eAA2BpC,YAC/B;IAAA,IAACQ,6EAAQ,CAAC;IAAA,IAAG6B,mFAAe;IAAA,uCACvB7B;MACHe,KAAKxB,UAAUsC,cAAcd,GAAG;MAChCe,MAAM;IAAA;EAAA,CACR,EACA,EACF;EAEA,IAAMC,gBAGFvC,YACF,YAA4B;IAAA;IAAA,IAA3BQ,6EAAQ,CAAC;IAAA,IAAGe,2EAAM;IACjB,IAAMiB,aAAavB,WAAW,YAAY;IAC1C,uCACKT;MACHe;MACAT;IAAA,mCACC0B,UAAU,EAAGnC,SAAS,OAAOG,OAAMH,UAAUA,QAAQ,uEAC7CoC,OAAO;MACd/B,UAAS+B,KAAY;IACvB,oCACA,mBAAmB;EAEvB,GACA,CAACxB,UAAUH,MAAMJ,WAAUL,KAAK,CAClC;EAEA,OAAO;IACL+B;IACAG;IACAzB;IACAS;IACAC;IACAH;IACAhB;IACAK;IACAK;IACAC;IACAE;EACF;AACF","names":["isObject","mergeRefs","useCallback","useRef","useState","useId","isInputEvent","value","target","useRadioGroup","props","onChangeProp","onChange","valueProp","defaultValue","nameProp","name","isDisabled","isFocusable","isNative","htmlProps","_useState2","valueState","setValue","isControlled","ref","focus","rootNode","current","query","firstEnabledAndCheckedInput","querySelector","firstEnabledInput","uuid","fallbackName","eventOrValue","nextValue","String","getRootProps","forwardedRef","role","getRadioProps","checkedKey","event"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\radio\\src\\use-radio-group.ts"],"sourcesContent":["import { isObject } from \"@chakra-ui/shared-utils\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { useCallback, useRef, useState, useId } from \"react\"\nimport { InputDOMAttributes, PropGetter } from \"@chakra-ui/react-types\"\n\ntype EventOrValue = React.ChangeEvent<HTMLInputElement> | string | number\n\nfunction isInputEvent(value: any): value is { target: HTMLInputElement } {\n  return value && isObject(value) && isObject(value.target)\n}\n\nexport interface UseRadioGroupProps {\n  /**\n   * The value of the radio to be `checked`\n   * (in controlled mode)\n   */\n  value?: string\n  /**\n   * The value of the radio to be `checked`\n   * initially (in uncontrolled mode)\n   */\n  defaultValue?: string\n  /**\n   * Function called once a radio is checked\n   * @param nextValue the value of the checked radio\n   */\n  onChange?(nextValue: string): void\n  /**\n   * If `true`, all wrapped radio inputs will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n\n  /**\n   * If `true` and `isDisabled` is true, all wrapped radio inputs will remain\n   * focusable but not interactive.\n   *\n   * @default false\n   */\n  isFocusable?: boolean\n  /**\n   * The `name` attribute forwarded to each `radio` element\n   */\n  name?: string\n  /**\n   * If `true`, input elements will receive\n   * `checked` attribute instead of `isChecked`.\n   *\n   * This assumes, you're using native radio inputs\n   *\n   * @default false\n   */\n  isNative?: boolean\n}\n\n/**\n * `useRadioGroup` is a custom hook that provides all the state management logic for a group of radios.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-radio-group\n */\nexport function useRadioGroup(props: UseRadioGroupProps = {}) {\n  const {\n    onChange: onChangeProp,\n    value: valueProp,\n    defaultValue,\n    name: nameProp,\n    isDisabled,\n    isFocusable,\n    isNative,\n    ...htmlProps\n  } = props\n\n  const [valueState, setValue] = useState<string | number>(defaultValue || \"\")\n  const isControlled = typeof valueProp !== \"undefined\"\n  const value = isControlled ? valueProp : valueState\n\n  const ref = useRef<any>(null)\n\n  const focus = useCallback(() => {\n    const rootNode = ref.current\n    if (!rootNode) return\n\n    let query = `input:not(:disabled):checked`\n\n    const firstEnabledAndCheckedInput = rootNode.querySelector(\n      query,\n    ) as HTMLElement\n\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus()\n      return\n    }\n\n    query = `input:not(:disabled)`\n\n    const firstEnabledInput = rootNode.querySelector(query) as HTMLElement\n    firstEnabledInput?.focus()\n  }, [])\n\n  /**\n   * All radio options must use the same name\n   */\n  const uuid = useId()\n  const fallbackName = `radio-${uuid}`\n  const name = nameProp || fallbackName\n\n  const onChange = useCallback(\n    (eventOrValue: EventOrValue) => {\n      const nextValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      if (!isControlled) {\n        setValue(nextValue)\n      }\n\n      onChangeProp?.(String(nextValue))\n    },\n    [onChangeProp, isControlled],\n  )\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: mergeRefs(forwardedRef, ref),\n      role: \"radiogroup\",\n    }),\n    [],\n  )\n\n  const getRadioProps: PropGetter<\n    InputDOMAttributes & { isChecked?: boolean },\n    InputDOMAttributes\n  > = useCallback(\n    (props = {}, ref = null) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        ref,\n        name,\n        [checkedKey]: value != null ? props.value === value : undefined,\n        onChange(event) {\n          onChange(event as any)\n        },\n        \"data-radiogroup\": true,\n      }\n    },\n    [isNative, name, onChange, value],\n  )\n\n  return {\n    getRootProps,\n    getRadioProps,\n    name,\n    ref,\n    focus,\n    setValue,\n    value,\n    onChange,\n    isDisabled,\n    isFocusable,\n    htmlProps,\n  }\n}\n\nexport type UseRadioGroupReturn = ReturnType<typeof useRadioGroup>\n"]},"metadata":{},"sourceType":"module"}