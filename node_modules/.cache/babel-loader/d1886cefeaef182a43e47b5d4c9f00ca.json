{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useModalContext } from \"./chunk-MSA2NPQT.mjs\";\nimport { useModalManager } from \"./chunk-CYRBRIA2.mjs\";\n\n// src/modal-focus.tsx\nimport { FocusLock } from \"@chakra-ui/focus-lock\";\nimport { usePresence } from \"framer-motion\";\nimport { useEffect } from \"react\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction ModalFocusScope(props) {\n  var _useModalContext = useModalContext(),\n    autoFocus = _useModalContext.autoFocus,\n    trapFocus = _useModalContext.trapFocus,\n    dialogRef = _useModalContext.dialogRef,\n    initialFocusRef = _useModalContext.initialFocusRef,\n    blockScrollOnMount = _useModalContext.blockScrollOnMount,\n    allowPinchZoom = _useModalContext.allowPinchZoom,\n    finalFocusRef = _useModalContext.finalFocusRef,\n    returnFocusOnClose = _useModalContext.returnFocusOnClose,\n    preserveScrollBarGap = _useModalContext.preserveScrollBarGap,\n    lockFocusAcrossFrames = _useModalContext.lockFocusAcrossFrames,\n    isOpen = _useModalContext.isOpen;\n  var _usePresence = usePresence(),\n    _usePresence2 = _slicedToArray(_usePresence, 2),\n    isPresent = _usePresence2[0],\n    safeToRemove = _usePresence2[1];\n  useEffect(function () {\n    if (!isPresent && safeToRemove) {\n      setTimeout(safeToRemove);\n    }\n  }, [isPresent, safeToRemove]);\n  var index = useModalManager(dialogRef, isOpen);\n  return /* @__PURE__ */jsx(FocusLock, {\n    autoFocus: autoFocus,\n    isDisabled: !trapFocus,\n    initialFocusRef: initialFocusRef,\n    finalFocusRef: finalFocusRef,\n    restoreFocus: returnFocusOnClose,\n    contentRef: dialogRef,\n    lockFocusAcrossFrames: lockFocusAcrossFrames,\n    children: /* @__PURE__ */jsx(RemoveScroll, {\n      removeScrollBar: !preserveScrollBarGap,\n      allowPinchZoom: allowPinchZoom,\n      enabled: index === 1 && blockScrollOnMount,\n      forwardProps: true,\n      children: props.children\n    })\n  });\n}\nexport { ModalFocusScope };","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,iBAAiB;AAC1B,SAASC,mBAAmB;AAC5B,SAASC,iBAAiB;AAC1B,SAASC,oBAAoB;AA+CvB;AAnCC,SAASC,gBAAgBC,OAA6B;EAC3D,uBAYIC,gBAAgB;IAXlBC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;EAGF,mBAAkChB,YAAY;IAAAiB;IAAvCC;IAAWC,YAAY;EAE9BlB,UAAU,YAAM;IACd,IAAI,CAACiB,aAAaC,cAAc;MAC9BC,WAAWD,YAAY;IACzB;EACF,GAAG,CAACD,WAAWC,YAAY,CAAC;EAE5B,IAAME,QAAQC,gBAAgBd,WAAWQ,MAAM;EAE/C,OACE,mBAACjB;IACCO;IACAiB,YAAY,CAAChB;IACbE;IACAG;IACAY,cAAcX;IACdY,YAAYjB;IACZO;IAEAW,6BAACxB;MACCyB,iBAAiB,CAACb;MAClBH;MAEAiB,SAASP,UAAU,KAAKX;MACxBmB,cAAY;MAEXH,gBAAMA;IAAA,CACT;EAAA,CACF;AAEJ","names":["FocusLock","usePresence","useEffect","RemoveScroll","ModalFocusScope","props","useModalContext","autoFocus","trapFocus","dialogRef","initialFocusRef","blockScrollOnMount","allowPinchZoom","finalFocusRef","returnFocusOnClose","preserveScrollBarGap","lockFocusAcrossFrames","isOpen","_usePresence2","isPresent","safeToRemove","setTimeout","index","useModalManager","isDisabled","restoreFocus","contentRef","children","removeScrollBar","enabled","forwardProps"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\modal\\src\\modal-focus.tsx"],"sourcesContent":["import { FocusLock } from \"@chakra-ui/focus-lock\"\nimport { usePresence } from \"framer-motion\"\nimport { useEffect } from \"react\"\nimport { RemoveScroll } from \"react-remove-scroll\"\n\nimport { useModalContext } from \"./modal\"\nimport { useModalManager } from \"./modal-manager\"\n\ninterface ModalFocusScopeProps {\n  /**\n   * @type React.ReactElement\n   */\n  children: React.ReactElement\n}\n\nexport function ModalFocusScope(props: ModalFocusScopeProps) {\n  const {\n    autoFocus,\n    trapFocus,\n    dialogRef,\n    initialFocusRef,\n    blockScrollOnMount,\n    allowPinchZoom,\n    finalFocusRef,\n    returnFocusOnClose,\n    preserveScrollBarGap,\n    lockFocusAcrossFrames,\n    isOpen,\n  } = useModalContext()\n\n  const [isPresent, safeToRemove] = usePresence()\n\n  useEffect(() => {\n    if (!isPresent && safeToRemove) {\n      setTimeout(safeToRemove)\n    }\n  }, [isPresent, safeToRemove])\n\n  const index = useModalManager(dialogRef, isOpen)\n\n  return (\n    <FocusLock\n      autoFocus={autoFocus}\n      isDisabled={!trapFocus}\n      initialFocusRef={initialFocusRef}\n      finalFocusRef={finalFocusRef}\n      restoreFocus={returnFocusOnClose}\n      contentRef={dialogRef}\n      lockFocusAcrossFrames={lockFocusAcrossFrames}\n    >\n      <RemoveScroll\n        removeScrollBar={!preserveScrollBarGap}\n        allowPinchZoom={allowPinchZoom}\n        // only block scroll for first dialog\n        enabled={index === 1 && blockScrollOnMount}\n        forwardProps\n      >\n        {props.children}\n      </RemoveScroll>\n    </FocusLock>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}