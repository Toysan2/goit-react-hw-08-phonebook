{"ast":null,"code":"'use client';\n\n// src/textarea.tsx\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _createForOfIteratorHelper from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nvar _excluded = [\"className\", \"rows\"];\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\n\n// ../../utilities/object-utils/src/omit.ts\nfunction omit(object) {\n  var keysToOmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var clone = Object.assign({}, object);\n  var _iterator = _createForOfIteratorHelper(keysToOmit),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      if (key in clone) {\n        delete clone[key];\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return clone;\n}\n\n// src/textarea.tsx\nimport { jsx } from \"react/jsx-runtime\";\nvar omitted = [\"h\", \"minH\", \"height\", \"minHeight\"];\nvar Textarea = forwardRef(function (props, ref) {\n  var styles = useStyleConfig(\"Textarea\", props);\n  var _omitThemingProps = omitThemingProps(props),\n    className = _omitThemingProps.className,\n    rows = _omitThemingProps.rows,\n    rest = _objectWithoutProperties(_omitThemingProps, _excluded);\n  var textareaProps = useFormControl(rest);\n  var textareaStyles = rows ? omit(styles, omitted) : styles;\n  return /* @__PURE__ */jsx(chakra.textarea, _objectSpread(_objectSpread({\n    ref: ref,\n    rows: rows\n  }, textareaProps), {}, {\n    className: cx(\"chakra-textarea\", className),\n    __css: textareaStyles\n  }));\n});\nTextarea.displayName = \"Textarea\";\nexport { Textarea };","map":{"version":3,"mappings":";;;;;;;AAAA,SAA6BA,sBAAsB;AACnD,SACEC,QACAC,YAEAC,kBAEAC,sBACK;AACP,SAASC,UAAU;;;ACTZ,SAASC,KACdC,QAEA;EAAA,IADAC,iFAAkB,EAAC;EAEnB,IAAMC,QAAiCC,OAAOC,OAAO,CAAC,GAAGJ,MAAM;EAAA,2CAC7CC;IAAAI;EAAA;IAAlB,oDAA8B;MAAA,IAAnBC;MACT,IAAIA,OAAOJ,OAAO;QAChB,OAAOA,MAAMI,GAAa;MAC5B;IACF;EAAA;IAAAC;EAAA;IAAAA;EAAA;EACA,OAAOL;AACT;;;ADwCI;AAtBJ,IAAMM,UAAU,CAAC,KAAK,QAAQ,UAAU,WAAW;AAY5C,IAAMC,WAAWd,WAAsC,UAACe,OAAOC,KAAQ;EAC5E,IAAMC,SAASf,eAAe,YAAYa,KAAK;EAC/C,wBAAqCd,iBAAiBc,KAAK;IAAnDG;IAAWC;IAASC;EAE5B,IAAMC,gBAAgBvB,eAAoCsB,IAAI;EAG9D,IAAME,iBAAiBH,OAAOf,KAAKa,QAAQJ,OAAO,IAAII;EAEtD,OACE,mBAAClB,OAAOwB;IACNP;IACAG;EAAA,GACIE;IACJH,WAAWf,GAAG,mBAAmBe,SAAS;IAC1CM,OAAOF;EAAA,EACT;AAEJ,CAAC;AAEDR,SAASW,cAAc","names":["useFormControl","chakra","forwardRef","omitThemingProps","useStyleConfig","cx","omit","object","keysToOmit","clone","Object","assign","_step","key","_iterator","omitted","Textarea","props","ref","styles","className","rows","rest","textareaProps","textareaStyles","textarea","__css","displayName"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\textarea\\src\\textarea.tsx","E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\utilities\\object-utils\\src\\omit.ts"],"sourcesContent":["import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { omit } from \"@chakra-ui/object-utils\"\n\ninterface TextareaOptions {\n  /**\n   * The border color when the textarea is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the textarea is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\"\n\nconst omitted = [\"h\", \"minH\", \"height\", \"minHeight\"]\n\nexport interface TextareaProps\n  extends Omit<HTMLChakraProps<\"textarea\">, Omitted>,\n    TextareaOptions,\n    FormControlOptions,\n    ThemingProps<\"Textarea\"> {}\n\n/**\n * Textarea is used to enter an amount of text that's longer than a single line\n * @see Docs https://chakra-ui.com/textarea\n */\nexport const Textarea = forwardRef<TextareaProps, \"textarea\">((props, ref) => {\n  const styles = useStyleConfig(\"Textarea\", props)\n  const { className, rows, ...rest } = omitThemingProps(props)\n\n  const textareaProps = useFormControl<HTMLTextAreaElement>(rest)\n\n  //@ts-ignore\n  const textareaStyles = rows ? omit(styles, omitted) : styles\n\n  return (\n    <chakra.textarea\n      ref={ref}\n      rows={rows}\n      {...textareaProps}\n      className={cx(\"chakra-textarea\", className)}\n      __css={textareaStyles}\n    />\n  )\n})\n\nTextarea.displayName = \"Textarea\"\n","export function omit<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToOmit: K[] = [],\n) {\n  const clone: Record<string, unknown> = Object.assign({}, object)\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key as string]\n    }\n  }\n  return clone as Omit<T, K>\n}\n"]},"metadata":{},"sourceType":"module"}