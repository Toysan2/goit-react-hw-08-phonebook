{"ast":null,"code":"'use client';\n\n// src/use-media-query.ts\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEnvironment } from \"@chakra-ui/react-env\";\nimport { useEffect, useState } from \"react\";\nfunction useMediaQuery(query) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$ssr = options.ssr,\n    ssr = _options$ssr === void 0 ? true : _options$ssr,\n    fallback = options.fallback;\n  var _useEnvironment = useEnvironment(),\n    getWindow = _useEnvironment.getWindow;\n  var queries = Array.isArray(query) ? query : [query];\n  var fallbackValues = Array.isArray(fallback) ? fallback : [fallback];\n  fallbackValues = fallbackValues.filter(function (v) {\n    return v != null;\n  });\n  var _useState = useState(function () {\n      return queries.map(function (query2, index) {\n        return {\n          media: query2,\n          matches: ssr ? !!fallbackValues[index] : getWindow().matchMedia(query2).matches\n        };\n      });\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    value = _useState2[0],\n    setValue = _useState2[1];\n  useEffect(function () {\n    var win = getWindow();\n    setValue(queries.map(function (query2) {\n      return {\n        media: query2,\n        matches: win.matchMedia(query2).matches\n      };\n    }));\n    var mql = queries.map(function (query2) {\n      return win.matchMedia(query2);\n    });\n    var handler = function handler(evt) {\n      setValue(function (prev) {\n        return prev.slice().map(function (item) {\n          if (item.media === evt.media) return _objectSpread(_objectSpread({}, item), {}, {\n            matches: evt.matches\n          });\n          return item;\n        });\n      });\n    };\n    mql.forEach(function (mql2) {\n      if (typeof mql2.addListener === \"function\") {\n        mql2.addListener(handler);\n      } else {\n        mql2.addEventListener(\"change\", handler);\n      }\n    });\n    return function () {\n      mql.forEach(function (mql2) {\n        if (typeof mql2.removeListener === \"function\") {\n          mql2.removeListener(handler);\n        } else {\n          mql2.removeEventListener(\"change\", handler);\n        }\n      });\n    };\n  }, [getWindow]);\n  return value.map(function (item) {\n    return item.matches;\n  });\n}\nexport { useMediaQuery };","map":{"version":3,"mappings":";;;;;AAAA,SAASA,sBAAsB;AAC/B,SAASC,WAAWC,gBAAgB;AAe7B,SAASC,cACdC,OAEW;EAAA,IADXC,8EAAgC,CAAC;EAEjC,mBAAiCA,QAAzBC;IAAAA,gCAAM;IAAMC,WAAaF,QAAbE;EAEpB,sBAAsBP,eAAe;IAA7BQ;EAER,IAAMC,UAAUC,MAAMC,QAAQP,KAAK,IAAIA,QAAQ,CAACA,KAAK;EAErD,IAAIQ,iBAAiBF,MAAMC,QAAQJ,QAAQ,IAAIA,WAAW,CAACA,QAAQ;EACnEK,iBAAiBA,eAAeC,OAAO,UAACC;IAAA,OAAMA,KAAK,IAAI;EAAA;EAEvD,gBAA0BZ,SAAS,YAAM;MACvC,OAAOO,QAAQM,IAAI,UAACX,QAAOY;QAAA,OAAW;UACpCC,OAAOb;UACPc,SAASZ,MACL,CAAC,CAACM,eAAeI,KAAK,IACtBR,UAAU,EAAEW,WAAWf,MAAK,EAAEc;QACpC;MAAA,CAAE;IACJ,CAAC;IAAAE;IAPMC;IAAOC,QAAQ;EAStBrB,UAAU,YAAM;IACd,IAAMsB,MAAMf,UAAU;IACtBc,SACEb,QAAQM,IAAI,UAACX;MAAAA,OAAW;QACtBa,OAAOb;QACPc,SAASK,IAAIJ,WAAWf,MAAK,EAAEc;MACjC;IAAA,CAAE,CACJ;IAEA,IAAMM,MAAMf,QAAQM,IAAI,UAACX;MAAAA,OAAUmB,IAAIJ,WAAWf,MAAK,CAAC;IAAA;IAExD,IAAMqB,UAAU,SAAVA,QAAWC,KAA6B;MAC5CJ,SAAS,UAACK,MAAS;QACjB,OAAOA,KAAKC,MAAM,EAAEb,IAAI,UAACc,MAAS;UAChC,IAAIA,KAAKZ,UAAUS,IAAIT,OAAO,uCAAYY;YAAMX,SAASQ,IAAIR;UAAA;UAC7D,OAAOW;QACT,CAAC;MACH,CAAC;IACH;IAEAL,IAAIM,QAAQ,UAACN,MAAQ;MACnB,IAAI,OAAOA,KAAIO,gBAAgB,YAAY;QACzCP,KAAIO,YAAYN,OAAO;MACzB,OAAO;QACLD,KAAIQ,iBAAiB,UAAUP,OAAO;MACxC;IACF,CAAC;IAED,OAAO,YAAM;MACXD,IAAIM,QAAQ,UAACN,MAAQ;QACnB,IAAI,OAAOA,KAAIS,mBAAmB,YAAY;UAC5CT,KAAIS,eAAeR,OAAO;QAC5B,OAAO;UACLD,KAAIU,oBAAoB,UAAUT,OAAO;QAC3C;MACF,CAAC;IACH;EAEF,GAAG,CAACjB,SAAS,CAAC;EAEd,OAAOa,MAAMN,IAAI,UAACc;IAAA,OAASA,KAAKX,OAAO;EAAA;AACzC","names":["useEnvironment","useEffect","useState","useMediaQuery","query","options","ssr","fallback","getWindow","queries","Array","isArray","fallbackValues","filter","v","map","index","media","matches","matchMedia","_useState2","value","setValue","win","mql","handler","evt","prev","slice","item","forEach","addListener","addEventListener","removeListener","removeEventListener"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\media-query\\src\\use-media-query.ts"],"sourcesContent":["import { useEnvironment } from \"@chakra-ui/react-env\"\nimport { useEffect, useState } from \"react\"\n\nexport type UseMediaQueryOptions = {\n  fallback?: boolean | boolean[]\n  ssr?: boolean\n}\n\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n * @param options the media query options { fallback, ssr }\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-media-query\n */\nexport function useMediaQuery(\n  query: string | string[],\n  options: UseMediaQueryOptions = {},\n): boolean[] {\n  const { ssr = true, fallback } = options\n\n  const { getWindow } = useEnvironment()\n\n  const queries = Array.isArray(query) ? query : [query]\n\n  let fallbackValues = Array.isArray(fallback) ? fallback : [fallback]\n  fallbackValues = fallbackValues.filter((v) => v != null) as boolean[]\n\n  const [value, setValue] = useState(() => {\n    return queries.map((query, index) => ({\n      media: query,\n      matches: ssr\n        ? !!fallbackValues[index]\n        : getWindow().matchMedia(query).matches,\n    }))\n  })\n\n  useEffect(() => {\n    const win = getWindow()\n    setValue(\n      queries.map((query) => ({\n        media: query,\n        matches: win.matchMedia(query).matches,\n      })),\n    )\n\n    const mql = queries.map((query) => win.matchMedia(query))\n\n    const handler = (evt: MediaQueryListEvent) => {\n      setValue((prev) => {\n        return prev.slice().map((item) => {\n          if (item.media === evt.media) return { ...item, matches: evt.matches }\n          return item\n        })\n      })\n    }\n\n    mql.forEach((mql) => {\n      if (typeof mql.addListener === \"function\") {\n        mql.addListener(handler)\n      } else {\n        mql.addEventListener(\"change\", handler)\n      }\n    })\n\n    return () => {\n      mql.forEach((mql) => {\n        if (typeof mql.removeListener === \"function\") {\n          mql.removeListener(handler)\n        } else {\n          mql.removeEventListener(\"change\", handler)\n        }\n      })\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [getWindow])\n\n  return value.map((item) => item.matches)\n}\n"]},"metadata":{},"sourceType":"module"}