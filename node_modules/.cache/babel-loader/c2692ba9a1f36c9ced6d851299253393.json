{"ast":null,"code":"'use client';\n\n// src/index.ts\nimport { createContext as createReactContext, useContext as useReactContext } from \"react\";\nfunction getErrorMessage(hook, provider) {\n  return \"\".concat(hook, \" returned `undefined`. Seems you forgot to wrap component within \").concat(provider);\n}\nfunction createContext() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var name = options.name,\n    _options$strict = options.strict,\n    strict = _options$strict === void 0 ? true : _options$strict,\n    _options$hookName = options.hookName,\n    hookName = _options$hookName === void 0 ? \"useContext\" : _options$hookName,\n    _options$providerName = options.providerName,\n    providerName = _options$providerName === void 0 ? \"Provider\" : _options$providerName,\n    errorMessage = options.errorMessage,\n    defaultValue = options.defaultValue;\n  var Context = createReactContext(defaultValue);\n  Context.displayName = name;\n  function useContext() {\n    var _a;\n    var context = useReactContext(Context);\n    if (!context && strict) {\n      var error = new Error(errorMessage != null ? errorMessage : getErrorMessage(hookName, providerName));\n      error.name = \"ContextError\";\n      (_a = Error.captureStackTrace) == null ? void 0 : _a.call(Error, error, useContext);\n      throw error;\n    }\n    return context;\n  }\n  return [Context.Provider, useContext, Context];\n}\nexport { createContext };","map":{"version":3,"mappings":";;;AAAA,SACEA,iBAAiBC,oBACjBC,cAAcC,uBACT;AAiBP,SAASC,gBAAgBC,MAAcC,UAAkB;EACvD,iBAAUD,kFAA0EC;AACtF;AAEO,SAASN,gBAAwD;EAAA,IAAvCO,8EAAmC,CAAC;EACnE,IACEC,OAMED,QANFC;IAAAC,kBAMEF,QALFG;IAAAA,sCAAS;IAAAC,oBAKPJ,QAJFK;IAAAA,0CAAW;IAAAC,wBAITN,QAHFO;IAAAA,kDAAe;IACfC,eAEER,QAFFQ;IACAC,eACET,QADFS;EAGF,IAAMC,UAAUhB,mBAAkCe,YAAY;EAE9DC,QAAQC,cAAcV;EAEtB,SAASN,aAAa;IAtCxB;IAuCI,IAAMiB,UAAUhB,gBAAgBc,OAAO;IAEvC,IAAI,CAACE,WAAWT,QAAQ;MACtB,IAAMU,QAAQ,IAAIC,MAChBN,sCAAgBX,gBAAgBQ,UAAUE,YAAY,CACxD;MACAM,MAAMZ,OAAO;MACb,YAAMc,sBAAN,+BAA0BF,OAAOlB;MACjC,MAAMkB;IACR;IAEA,OAAOD;EACT;EAEA,OAAO,CAACF,QAAQM,UAAUrB,YAAYe,OAAO;AAC/C","names":["createContext","createReactContext","useContext","useReactContext","getErrorMessage","hook","provider","options","name","_options$strict","strict","_options$hookName","hookName","_options$providerName","providerName","errorMessage","defaultValue","Context","displayName","context","error","Error","captureStackTrace","Provider"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\react-context\\src\\index.ts"],"sourcesContent":["import {\n  createContext as createReactContext,\n  useContext as useReactContext,\n} from \"react\"\n\nexport interface CreateContextOptions<T> {\n  strict?: boolean\n  hookName?: string\n  providerName?: string\n  errorMessage?: string\n  name?: string\n  defaultValue?: T\n}\n\nexport type CreateContextReturn<T> = [\n  React.Provider<T>,\n  () => T,\n  React.Context<T>,\n]\n\nfunction getErrorMessage(hook: string, provider: string) {\n  return `${hook} returned \\`undefined\\`. Seems you forgot to wrap component within ${provider}`\n}\n\nexport function createContext<T>(options: CreateContextOptions<T> = {}) {\n  const {\n    name,\n    strict = true,\n    hookName = \"useContext\",\n    providerName = \"Provider\",\n    errorMessage,\n    defaultValue,\n  } = options\n\n  const Context = createReactContext<T | undefined>(defaultValue)\n\n  Context.displayName = name\n\n  function useContext() {\n    const context = useReactContext(Context)\n\n    if (!context && strict) {\n      const error = new Error(\n        errorMessage ?? getErrorMessage(hookName, providerName),\n      )\n      error.name = \"ContextError\"\n      Error.captureStackTrace?.(error, useContext)\n      throw error\n    }\n\n    return context\n  }\n\n  return [Context.Provider, useContext, Context] as CreateContextReturn<T>\n}\n"]},"metadata":{},"sourceType":"module"}