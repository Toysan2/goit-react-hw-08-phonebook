{"ast":null,"code":"'use client';\n\n// src/toast.utils.ts\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar findById = function findById(arr, id) {\n  return arr.find(function (toast) {\n    return toast.id === id;\n  });\n};\nfunction findToast(toasts, id) {\n  var position = getToastPosition(toasts, id);\n  var index = position ? toasts[position].findIndex(function (toast) {\n    return toast.id === id;\n  }) : -1;\n  return {\n    position: position,\n    index: index\n  };\n}\nfunction getToastPosition(toasts, id) {\n  for (var _i = 0, _Object$entries = Object.entries(toasts); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n      position = _Object$entries$_i[0],\n      values = _Object$entries$_i[1];\n    if (findById(values, id)) {\n      return position;\n    }\n  }\n}\nvar isVisible = function isVisible(toasts, id) {\n  return !!getToastPosition(toasts, id);\n};\nfunction getToastStyle(position) {\n  var isRighty = position.includes(\"right\");\n  var isLefty = position.includes(\"left\");\n  var alignItems = \"center\";\n  if (isRighty) alignItems = \"flex-end\";\n  if (isLefty) alignItems = \"flex-start\";\n  return {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: alignItems\n  };\n}\nfunction getToastListStyle(position) {\n  var isTopOrBottom = position === \"top\" || position === \"bottom\";\n  var margin = isTopOrBottom ? \"0 auto\" : void 0;\n  var top = position.includes(\"top\") ? \"env(safe-area-inset-top, 0px)\" : void 0;\n  var bottom = position.includes(\"bottom\") ? \"env(safe-area-inset-bottom, 0px)\" : void 0;\n  var right = !position.includes(\"left\") ? \"env(safe-area-inset-right, 0px)\" : void 0;\n  var left = !position.includes(\"right\") ? \"env(safe-area-inset-left, 0px)\" : void 0;\n  return {\n    position: \"fixed\",\n    zIndex: \"var(--toast-z-index, 5500)\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    margin: margin,\n    top: top,\n    bottom: bottom,\n    right: right,\n    left: left\n  };\n}\nexport { findById, findToast, getToastPosition, isVisible, getToastStyle, getToastListStyle };","map":{"version":3,"mappings":";;;;AAOO,IAAMA,WAAW,SAAXA,SAAYC,KAAqBC;EAAA,OAC5CD,IAAIE,KAAK,UAACC;IAAA,OAAUA,MAAMF,OAAOA,EAAE;EAAA;AAAA;AAM9B,SAASG,UAAUC,QAAoBJ,IAAa;EACzD,IAAMK,WAAWC,iBAAiBF,QAAQJ,EAAE;EAE5C,IAAMO,QAAQF,WACVD,OAAOC,QAAQ,EAAEG,UAAU,UAACN;IAAA,OAAUA,MAAMF,OAAOA,EAAE;EAAA,KACrD;EAEJ,OAAO;IACLK;IACAE;EACF;AACF;AAMO,SAASD,iBAAiBF,QAAoBJ,IAAa;EAChE,mCAAiCS,OAAOC,QAAQN,MAAM,sCAAG;IAAzD;MAAYC;MAAUM,MAAM;IAC1B,IAAIb,SAASa,QAAQX,EAAE,GAAG;MACxB,OAAOK;IACT;EACF;AACF;AAMO,IAAMO,YAAY,SAAZA,UAAaR,QAAoBJ;EAAA,OAC5C,CAAC,CAACM,iBAAiBF,QAAQJ,EAAE;AAAA;AAMxB,SAASa,cAAcR,UAA8C;EAC1E,IAAMS,WAAWT,SAASU,SAAS,OAAO;EAC1C,IAAMC,UAAUX,SAASU,SAAS,MAAM;EAExC,IAAIE,aAAa;EACjB,IAAIH,UAAUG,aAAa;EAC3B,IAAID,SAASC,aAAa;EAE1B,OAAO;IACLC,SAAS;IACTC,eAAe;IACfF;EACF;AACF;AAKO,SAASG,kBACdf,UACqB;EACrB,IAAMgB,gBAAgBhB,aAAa,SAASA,aAAa;EACzD,IAAMiB,SAASD,gBAAgB,WAAW;EAE1C,IAAME,MAAMlB,SAASU,SAAS,KAAK,IAC/B,kCACA;EACJ,IAAMS,SAASnB,SAASU,SAAS,QAAQ,IACrC,qCACA;EACJ,IAAMU,QAAQ,CAACpB,SAASU,SAAS,MAAM,IACnC,oCACA;EACJ,IAAMW,OAAO,CAACrB,SAASU,SAAS,OAAO,IACnC,mCACA;EAEJ,OAAO;IACLV,UAAU;IACVsB,QAAQ;IACRC,eAAe;IACfV,SAAS;IACTC,eAAe;IACfG;IACAC;IACAC;IACAC;IACAC;EACF;AACF","names":["findById","arr","id","find","toast","findToast","toasts","position","getToastPosition","index","findIndex","Object","entries","values","isVisible","getToastStyle","isRighty","includes","isLefty","alignItems","display","flexDirection","getToastListStyle","isTopOrBottom","margin","top","bottom","right","left","zIndex","pointerEvents"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\toast\\src\\toast.utils.ts"],"sourcesContent":["import type { ToastPosition } from \"./toast.placement\"\nimport type { ToastId, ToastOptions, ToastState } from \"./toast.types\"\n\n/**\n * Given an array of toasts for a specific position.\n * It returns the toast that matches the `id` passed\n */\nexport const findById = (arr: ToastOptions[], id: ToastId) =>\n  arr.find((toast) => toast.id === id)\n\n/**\n * Given the toast manager state, finds the toast that matches\n * the id and return its position and index\n */\nexport function findToast(toasts: ToastState, id: ToastId) {\n  const position = getToastPosition(toasts, id)\n\n  const index = position\n    ? toasts[position].findIndex((toast) => toast.id === id)\n    : -1\n\n  return {\n    position,\n    index,\n  }\n}\n\n/**\n * Given the toast manager state, finds the position of the toast that\n * matches the `id`\n */\nexport function getToastPosition(toasts: ToastState, id: ToastId) {\n  for (const [position, values] of Object.entries(toasts)) {\n    if (findById(values, id)) {\n      return position as ToastPosition\n    }\n  }\n}\n\n/**\n * Given the toast manager state, checks if a specific toast is\n * still in the state, which means it is still visible on screen.\n */\nexport const isVisible = (toasts: ToastState, id: ToastId) =>\n  !!getToastPosition(toasts, id)\n\n/**\n * Gets the styles to be applied to a toast's container\n * based on its position in the manager\n */\nexport function getToastStyle(position: ToastPosition): React.CSSProperties {\n  const isRighty = position.includes(\"right\")\n  const isLefty = position.includes(\"left\")\n\n  let alignItems = \"center\"\n  if (isRighty) alignItems = \"flex-end\"\n  if (isLefty) alignItems = \"flex-start\"\n\n  return {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems,\n  }\n}\n\n/**\n * Compute the style of a toast based on its position\n */\nexport function getToastListStyle(\n  position: ToastPosition,\n): React.CSSProperties {\n  const isTopOrBottom = position === \"top\" || position === \"bottom\"\n  const margin = isTopOrBottom ? \"0 auto\" : undefined\n\n  const top = position.includes(\"top\")\n    ? \"env(safe-area-inset-top, 0px)\"\n    : undefined\n  const bottom = position.includes(\"bottom\")\n    ? \"env(safe-area-inset-bottom, 0px)\"\n    : undefined\n  const right = !position.includes(\"left\")\n    ? \"env(safe-area-inset-right, 0px)\"\n    : undefined\n  const left = !position.includes(\"right\")\n    ? \"env(safe-area-inset-left, 0px)\"\n    : undefined\n\n  return {\n    position: \"fixed\",\n    zIndex: \"var(--toast-z-index, 5500)\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    margin,\n    top,\n    bottom,\n    right,\n    left,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}