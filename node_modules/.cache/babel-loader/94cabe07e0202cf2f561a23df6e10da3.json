{"ast":null,"code":"'use client';\n\n// src/chakra-provider.tsx\nimport { CSSReset, CSSPolyfill } from \"@chakra-ui/css-reset\";\nimport { PortalManager } from \"@chakra-ui/portal\";\nimport { ColorModeProvider, GlobalStyle, ThemeProvider } from \"@chakra-ui/system\";\nimport { EnvironmentProvider } from \"@chakra-ui/react-env\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar ChakraProvider = function ChakraProvider(props) {\n  var children = props.children,\n    colorModeManager = props.colorModeManager,\n    portalZIndex = props.portalZIndex,\n    resetScope = props.resetScope,\n    _props$resetCSS = props.resetCSS,\n    resetCSS = _props$resetCSS === void 0 ? true : _props$resetCSS,\n    _props$theme = props.theme,\n    theme = _props$theme === void 0 ? {} : _props$theme,\n    environment = props.environment,\n    cssVarsRoot = props.cssVarsRoot,\n    disableEnvironment = props.disableEnvironment,\n    disableGlobalStyle = props.disableGlobalStyle;\n  var _children = /* @__PURE__ */jsx(EnvironmentProvider, {\n    environment: environment,\n    disabled: disableEnvironment,\n    children: children\n  });\n  return /* @__PURE__ */jsx(ThemeProvider, {\n    theme: theme,\n    cssVarsRoot: cssVarsRoot,\n    children: /* @__PURE__ */jsxs(ColorModeProvider, {\n      colorModeManager: colorModeManager,\n      options: theme.config,\n      children: [resetCSS ? /* @__PURE__ */jsx(CSSReset, {\n        scope: resetScope\n      }) : /* @__PURE__ */jsx(CSSPolyfill, {}), !disableGlobalStyle && /* @__PURE__ */jsx(GlobalStyle, {}), portalZIndex ? /* @__PURE__ */jsx(PortalManager, {\n        zIndex: portalZIndex,\n        children: _children\n      }) : _children]\n    })\n  });\n};\nexport { ChakraProvider };","map":{"version":3,"mappings":";;;AAAA,SAASA,UAAUC,mBAAmB;AACtC,SAASC,qBAAqB;AAC9B,SACEC,mBAEAC,aACAC,qBAEK;AAEP,SACEC,2BAEK;AA4EH,cAUEC,YAVF;AAfG,IAAMC,iBAAgD,SAAhDA,eAAiDC,OAAU;EACtE,IACEC,WAUED,MAVFC;IACAC,mBASEF,MATFE;IACAC,eAQEH,MARFG;IACAC,aAOEJ,MAPFI;IAAAC,kBAOEL,MANFM;IAAAA,wCAAW;IAAAC,eAMTP,MALFQ;IAAAA,kCAAQ,CAAC;IACTC,cAIET,MAJFS;IACAC,cAGEV,MAHFU;IACAC,qBAEEX,MAFFW;IACAC,qBACEZ,MADFY;EAGF,IAAMC,YACJ,mBAAChB;IACCY;IACAK,UAAUH;IAETV;EAAA,CACH;EAGF,OACE,mBAACL;IAAcY;IAAsBE;IACnCT,8BAACP;MACCQ;MACAa,SAASP,MAAMQ;MAEdf,sBAAW,mBAACV;QAAS0B,OAAOb;MAAA,CAAY,IAAK,mBAACZ,eAAY,GAC1D,CAACoB,sBAAsB,mBAACjB,eAAY,GACpCQ,eACC,mBAACV;QAAcyB,QAAQf;QAAeF;MAAA,CAAU,IAEhDY;IAAA,CAEJ;EAAA,CACF;AAEJ","names":["CSSReset","CSSPolyfill","PortalManager","ColorModeProvider","GlobalStyle","ThemeProvider","EnvironmentProvider","jsxs","ChakraProvider","props","children","colorModeManager","portalZIndex","resetScope","_props$resetCSS","resetCSS","_props$theme","theme","environment","cssVarsRoot","disableEnvironment","disableGlobalStyle","_children","disabled","options","config","scope","zIndex"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\provider\\src\\chakra-provider.tsx"],"sourcesContent":["import { CSSReset, CSSPolyfill } from \"@chakra-ui/css-reset\"\nimport { PortalManager } from \"@chakra-ui/portal\"\nimport {\n  ColorModeProvider,\n  ColorModeProviderProps,\n  GlobalStyle,\n  ThemeProvider,\n  ThemeProviderProps,\n} from \"@chakra-ui/system\"\nimport { Dict } from \"@chakra-ui/utils\"\nimport {\n  EnvironmentProvider,\n  EnvironmentProviderProps,\n} from \"@chakra-ui/react-env\"\n\nexport interface ChakraProviderProps\n  extends Pick<ThemeProviderProps, \"cssVarsRoot\"> {\n  /**\n   * a theme. if omitted, uses the default theme provided by chakra\n   */\n  theme?: Dict\n  /**\n   * Common z-index to use for `Portal`\n   *\n   * @default undefined\n   */\n  portalZIndex?: number\n  /**\n   * If `true`, `CSSReset` component will be mounted to help\n   * you reset browser styles\n   *\n   * @default true\n   */\n  resetCSS?: boolean\n  /**\n   * The selector to scope the css reset styles to.\n   */\n  resetScope?: string\n  /**\n   * manager to persist a users color mode preference in\n   *\n   * omit if you don't render server-side\n   * for SSR: choose `cookieStorageManager`\n   *\n   * @default localStorageManager\n   */\n  colorModeManager?: ColorModeProviderProps[\"colorModeManager\"]\n  /**\n   * Your application content\n   */\n  children?: React.ReactNode\n  /**\n   * The environment (`window` and `document`) to be used by\n   * all components and hooks.\n   *\n   * By default, we smartly determine the ownerDocument and defaultView\n   * based on where `ChakraProvider` is rendered.\n   */\n  environment?: EnvironmentProviderProps[\"environment\"]\n  /**\n   * Disabled the use of automatic window and document detection.\n   * This removed the injected `<span/>` element\n   */\n  disableEnvironment?: boolean\n  /**\n   * If `true`, Chakra will not mount the global styles defined in the theme.\n   */\n  disableGlobalStyle?: boolean\n}\n\n/**\n * The global provider that must be added to make all Chakra components\n * work correctly\n */\nexport const ChakraProvider: React.FC<ChakraProviderProps> = (props) => {\n  const {\n    children,\n    colorModeManager,\n    portalZIndex,\n    resetScope,\n    resetCSS = true,\n    theme = {},\n    environment,\n    cssVarsRoot,\n    disableEnvironment,\n    disableGlobalStyle,\n  } = props\n\n  const _children = (\n    <EnvironmentProvider\n      environment={environment}\n      disabled={disableEnvironment}\n    >\n      {children}\n    </EnvironmentProvider>\n  )\n\n  return (\n    <ThemeProvider theme={theme as Dict} cssVarsRoot={cssVarsRoot}>\n      <ColorModeProvider\n        colorModeManager={colorModeManager}\n        options={theme.config}\n      >\n        {resetCSS ? <CSSReset scope={resetScope} /> : <CSSPolyfill />}\n        {!disableGlobalStyle && <GlobalStyle />}\n        {portalZIndex ? (\n          <PortalManager zIndex={portalZIndex}>{_children}</PortalManager>\n        ) : (\n          _children\n        )}\n      </ColorModeProvider>\n    </ThemeProvider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}