{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"isDisabled\", \"isInvalid\", \"isReadOnly\", \"isRequired\"],\n  _excluded2 = [\"id\", \"disabled\", \"readOnly\", \"required\", \"isRequired\", \"isInvalid\", \"isReadOnly\", \"isDisabled\", \"onFocus\", \"onBlur\"];\nimport { useFormControlContext } from \"./chunk-DFWC5MHP.mjs\";\n\n// src/use-form-control.ts\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\";\nfunction useFormControl(props) {\n  var _useFormControlProps = useFormControlProps(props),\n    isDisabled = _useFormControlProps.isDisabled,\n    isInvalid = _useFormControlProps.isInvalid,\n    isReadOnly = _useFormControlProps.isReadOnly,\n    isRequired = _useFormControlProps.isRequired,\n    rest = _objectWithoutProperties(_useFormControlProps, _excluded);\n  return _objectSpread(_objectSpread({}, rest), {}, {\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly)\n  });\n}\nfunction useFormControlProps(props) {\n  var _a, _b, _c;\n  var field = useFormControlContext();\n  var id = props.id,\n    disabled = props.disabled,\n    readOnly = props.readOnly,\n    required = props.required,\n    isRequired = props.isRequired,\n    isInvalid = props.isInvalid,\n    isReadOnly = props.isReadOnly,\n    isDisabled = props.isDisabled,\n    onFocus = props.onFocus,\n    onBlur = props.onBlur,\n    rest = _objectWithoutProperties(props, _excluded2);\n  var labelIds = props[\"aria-describedby\"] ? [props[\"aria-describedby\"]] : [];\n  if ((field == null ? void 0 : field.hasFeedbackText) && (field == null ? void 0 : field.isInvalid)) {\n    labelIds.push(field.feedbackId);\n  }\n  if (field == null ? void 0 : field.hasHelpText) {\n    labelIds.push(field.helpTextId);\n  }\n  return _objectSpread(_objectSpread({}, rest), {}, {\n    \"aria-describedby\": labelIds.join(\" \") || void 0,\n    id: id != null ? id : field == null ? void 0 : field.id,\n    isDisabled: (_a = disabled != null ? disabled : isDisabled) != null ? _a : field == null ? void 0 : field.isDisabled,\n    isReadOnly: (_b = readOnly != null ? readOnly : isReadOnly) != null ? _b : field == null ? void 0 : field.isReadOnly,\n    isRequired: (_c = required != null ? required : isRequired) != null ? _c : field == null ? void 0 : field.isRequired,\n    isInvalid: isInvalid != null ? isInvalid : field == null ? void 0 : field.isInvalid,\n    onFocus: callAllHandlers(field == null ? void 0 : field.onFocus, onFocus),\n    onBlur: callAllHandlers(field == null ? void 0 : field.onBlur, onBlur)\n  });\n}\nexport { useFormControl, useFormControlProps };","map":{"version":3,"mappings":";;;;;;;;;AAAA,SAASA,UAAUC,uBAAuB;AAuBnC,SAASC,eACdC,OACA;EACA,2BACEC,oBAAoBD,KAAK;IADnBE;IAAYC;IAAWC;IAAYC;IAAeC;EAG1D,uCACKA;IACHC,UAAUL;IACVM,UAAUJ;IACVK,UAAUJ;IACV,gBAAgBR,SAASM,SAAS;IAClC,iBAAiBN,SAASQ,UAAU;IACpC,iBAAiBR,SAASO,UAAU;EAAA;AAExC;AAKO,SAASH,oBACdD,OACA;EA7CF;EA8CE,IAAMU,QAAQC,sBAAsB;EAEpC,IACEC,KAWEZ,MAXFY;IACAL,WAUEP,MAVFO;IACAC,WASER,MATFQ;IACAC,WAQET,MARFS;IACAJ,aAOEL,MAPFK;IACAF,YAMEH,MANFG;IACAC,aAKEJ,MALFI;IACAF,aAIEF,MAJFE;IACAW,UAGEb,MAHFa;IACAC,SAEEd,MAFFc;IACGR,gCACDN;EAEJ,IAAMe,WAAqBf,MAAM,kBAAkB,IAC/C,CAACA,MAAM,kBAAkB,CAAC,IAC1B,EAAC;EAGL,KAAIU,+BAAOM,qBAAmBN,+BAAOP,YAAW;IAC9CY,SAASE,KAAKP,MAAMQ,UAAU;EAChC;EAEA,IAAIR,+BAAOS,aAAa;IACtBJ,SAASE,KAAKP,MAAMU,UAAU;EAChC;EAEA,uCACKd;IACH,oBAAoBS,SAASM,KAAK,GAAG,KAAK;IAC1CT,IAAIA,kBAAMF,+BAAOE;IACjBV,aAAYoB,mCAAYpB,eAAZ,YAA0BQ,+BAAOR;IAC7CE,aAAYmB,mCAAYnB,eAAZ,YAA0BM,+BAAON;IAC7CC,aAAYmB,mCAAYnB,eAAZ,YAA0BK,+BAAOL;IAC7CF,WAAWA,gCAAaO,+BAAOP;IAC/BU,SAASf,gBAAgBY,+BAAOG,SAASA,OAAO;IAChDC,QAAQhB,gBAAgBY,+BAAOI,QAAQA,MAAM;EAAA;AAEjD","names":["ariaAttr","callAllHandlers","useFormControl","props","useFormControlProps","isDisabled","isInvalid","isReadOnly","isRequired","rest","disabled","readOnly","required","field","useFormControlContext","id","onFocus","onBlur","labelIds","hasFeedbackText","push","feedbackId","hasHelpText","helpTextId","join","_a","_b","_c"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\form-control\\src\\use-form-control.ts"],"sourcesContent":["import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}