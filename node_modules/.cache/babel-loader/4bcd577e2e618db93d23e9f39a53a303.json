{"ast":null,"code":"'use client';\n\n// src/input-group.tsx\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _excluded = [\"children\", \"className\"];\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { compact } from \"@chakra-ui/object-utils\";\nimport { cloneElement } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar _createContext = createContext({\n    name: \"InputGroupStylesContext\",\n    errorMessage: \"useInputGroupStyles returned is 'undefined'. Seems you forgot to wrap the components in \\\"<InputGroup />\\\" \"\n  }),\n  _createContext2 = _slicedToArray(_createContext, 2),\n  InputGroupStylesProvider = _createContext2[0],\n  useInputGroupStyles = _createContext2[1];\nvar InputGroup = forwardRef(function InputGroup2(props, ref) {\n  var styles = useMultiStyleConfig(\"Input\", props);\n  var _omitThemingProps = omitThemingProps(props),\n    children = _omitThemingProps.children,\n    className = _omitThemingProps.className,\n    rest = _objectWithoutProperties(_omitThemingProps, _excluded);\n  var _className = cx(\"chakra-input__group\", className);\n  var groupStyles = {};\n  var validChildren = getValidChildren(children);\n  var input = styles.field;\n  validChildren.forEach(function (child) {\n    var _a, _b;\n    if (!styles) return;\n    if (input && child.type.id === \"InputLeftElement\") {\n      groupStyles.paddingStart = (_a = input.height) != null ? _a : input.h;\n    }\n    if (input && child.type.id === \"InputRightElement\") {\n      groupStyles.paddingEnd = (_b = input.height) != null ? _b : input.h;\n    }\n    if (child.type.id === \"InputRightAddon\") {\n      groupStyles.borderEndRadius = 0;\n    }\n    if (child.type.id === \"InputLeftAddon\") {\n      groupStyles.borderStartRadius = 0;\n    }\n  });\n  var clones = validChildren.map(function (child) {\n    var _a, _b;\n    var theming = compact({\n      size: ((_a = child.props) == null ? void 0 : _a.size) || props.size,\n      variant: ((_b = child.props) == null ? void 0 : _b.variant) || props.variant\n    });\n    return child.type.id !== \"Input\" ? cloneElement(child, theming) : cloneElement(child, Object.assign(theming, groupStyles, child.props));\n  });\n  return /* @__PURE__ */jsx(chakra.div, _objectSpread(_objectSpread({\n    className: _className,\n    ref: ref,\n    __css: _objectSpread({\n      width: \"100%\",\n      display: \"flex\",\n      position: \"relative\",\n      // Parts of inputs override z-index to ensure that they stack correctly on each other\n      // Create a new stacking context so that these overrides don't leak out and conflict with other z-indexes\n      isolation: \"isolate\"\n    }, styles.group),\n    \"data-group\": true\n  }, rest), {}, {\n    children: /* @__PURE__ */jsx(InputGroupStylesProvider, {\n      value: styles,\n      children: clones\n    })\n  }));\n});\nInputGroup.displayName = \"InputGroup\";\nexport { useInputGroupStyles, InputGroup };","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,qBAAqB;AAC9B,SAASC,wBAAwB;AACjC,SACEC,QACAC,YAEAC,kBAGAC,2BACK;AACP,SAASC,UAAU;AACnB,SAASC,eAAe;AACxB,SAASC,oBAAoB;AA8ErB;AA5ER,qBAAwDR,cAEtD;IACAS,+BAAM;IACNC;EACF,CAAC;EAAAC;EALMC;EAA0BC,mBAAmB;AAa7C,IAAMC,aAAaX,WACxB,SAASW,YAAWC,OAAOC,KAAK;EAC9B,IAAMC,SAASZ,oBAAoB,SAASU,KAAK;EACjD,wBAAyCX,iBAAiBW,KAAK;IAAvDG;IAAUC;IAAcC;EAEhC,IAAMC,aAAaf,GAAG,uBAAuBa,SAAS;EACtD,IAAMG,cAA+B,CAAC;EAEtC,IAAMC,gBAAgBtB,iBAAiBiB,QAAQ;EAE/C,IAAMM,QAAaP,OAAOQ;EAE1BF,cAAcG,QAAQ,UAACC,OAAe;IAxC1C;IAyCM,IAAI,CAACV,QAAQ;IAEb,IAAIO,SAASG,MAAMC,KAAKC,OAAO,oBAAoB;MACjDP,YAAYQ,gBAAeC,WAAMC,WAAN,YAAgBR,MAAMS;IACnD;IAEA,IAAIT,SAASG,MAAMC,KAAKC,OAAO,qBAAqB;MAClDP,YAAYY,cAAaC,WAAMH,WAAN,YAAgBR,MAAMS;IACjD;IAEA,IAAIN,MAAMC,KAAKC,OAAO,mBAAmB;MACvCP,YAAYc,kBAAkB;IAChC;IAEA,IAAIT,MAAMC,KAAKC,OAAO,kBAAkB;MACtCP,YAAYe,oBAAoB;IAClC;EACF,CAAC;EAED,IAAMC,SAASf,cAAcgB,IAAI,UAACZ,OAAe;IA5DrD;IAiEM,IAAMa,UAAUjC,QAAQ;MACtBkC,QAAMV,WAAMhB,UAAN,mBAAa0B,SAAQ1B,MAAM0B;MACjCC,WAASP,WAAMpB,UAAN,mBAAa2B,YAAW3B,MAAM2B;IACzC,CAAC;IAED,OAAOf,MAAMC,KAAKC,OAAO,UACrBrB,aAAamB,OAAOa,OAAO,IAC3BhC,aAAamB,OAAOgB,OAAOC,OAAOJ,SAASlB,aAAaK,MAAMZ,KAAK,CAAC;EAC1E,CAAC;EAED,OACE,mBAACb,OAAO2C;IACN1B,WAAWE;IACXL;IACA8B;MACEC,OAAO;MACPC,SAAS;MACTC,UAAU;MAAA;MAAA;MAGVC,WAAW;IAAA,GACRjC,OAAOkC,MACZ;IACA,cAAU;EAAA,GACN/B;IAEJF,6BAACN;MAAyBwC,OAAOnC;MAC9BC;IAAA,CACH;EAAA,EACF;AAEJ,CACF;AAEAJ,WAAWuC,cAAc","names":["createContext","getValidChildren","chakra","forwardRef","omitThemingProps","useMultiStyleConfig","cx","compact","cloneElement","name","errorMessage","_createContext2","InputGroupStylesProvider","useInputGroupStyles","InputGroup","props","ref","styles","children","className","rest","_className","groupStyles","validChildren","input","field","forEach","child","type","id","paddingStart","_a","height","h","paddingEnd","_b","borderEndRadius","borderStartRadius","clones","map","theming","size","variant","Object","assign","div","__css","width","display","position","isolation","group","value","displayName"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\input\\src\\input-group.tsx"],"sourcesContent":["import { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\nimport { cloneElement } from \"react\"\n\nconst [InputGroupStylesProvider, useInputGroupStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `InputGroupStylesContext`,\n  errorMessage: `useInputGroupStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<InputGroup />\" `,\n})\n\nexport { useInputGroupStyles }\n\nexport interface InputGroupProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Input\"> {}\n\nexport const InputGroup = forwardRef<InputGroupProps, \"div\">(\n  function InputGroup(props, ref) {\n    const styles = useMultiStyleConfig(\"Input\", props)\n    const { children, className, ...rest } = omitThemingProps(props)\n\n    const _className = cx(\"chakra-input__group\", className)\n    const groupStyles: InputGroupProps = {}\n\n    const validChildren = getValidChildren(children)\n\n    const input: any = styles.field\n\n    validChildren.forEach((child: any) => {\n      if (!styles) return\n\n      if (input && child.type.id === \"InputLeftElement\") {\n        groupStyles.paddingStart = input.height ?? input.h\n      }\n\n      if (input && child.type.id === \"InputRightElement\") {\n        groupStyles.paddingEnd = input.height ?? input.h\n      }\n\n      if (child.type.id === \"InputRightAddon\") {\n        groupStyles.borderEndRadius = 0\n      }\n\n      if (child.type.id === \"InputLeftAddon\") {\n        groupStyles.borderStartRadius = 0\n      }\n    })\n\n    const clones = validChildren.map((child: any) => {\n      /**\n       * Make it possible to override the size and variant from `Input`\n       */\n\n      const theming = compact({\n        size: child.props?.size || props.size,\n        variant: child.props?.variant || props.variant,\n      })\n\n      return child.type.id !== \"Input\"\n        ? cloneElement(child, theming)\n        : cloneElement(child, Object.assign(theming, groupStyles, child.props))\n    })\n\n    return (\n      <chakra.div\n        className={_className}\n        ref={ref}\n        __css={{\n          width: \"100%\",\n          display: \"flex\",\n          position: \"relative\",\n          // Parts of inputs override z-index to ensure that they stack correctly on each other\n          // Create a new stacking context so that these overrides don't leak out and conflict with other z-indexes\n          isolation: \"isolate\",\n          ...styles.group,\n        }}\n        data-group\n        {...rest}\n      >\n        <InputGroupStylesProvider value={styles}>\n          {clones}\n        </InputGroupStylesProvider>\n      </chakra.div>\n    )\n  },\n)\n\nInputGroup.displayName = \"InputGroup\"\n"]},"metadata":{},"sourceType":"module"}