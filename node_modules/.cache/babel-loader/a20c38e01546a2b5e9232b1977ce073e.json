{"ast":null,"code":"'use client';\n\n// src/use-checkbox-group.ts\nimport _defineProperty from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { isObject } from \"@chakra-ui/shared-utils\";\nimport { useCallback } from \"react\";\nfunction isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n}\nfunction useCheckboxGroup() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var defaultValue = props.defaultValue,\n    valueProp = props.value,\n    onChange = props.onChange,\n    isDisabled = props.isDisabled,\n    isNative = props.isNative;\n  var onChangeProp = useCallbackRef(onChange);\n  var _useControllableState = useControllableState({\n      value: valueProp,\n      defaultValue: defaultValue || [],\n      onChange: onChangeProp\n    }),\n    _useControllableState2 = _slicedToArray(_useControllableState, 2),\n    value = _useControllableState2[0],\n    setValue = _useControllableState2[1];\n  var handleChange = useCallback(function (eventOrValue) {\n    if (!value) return;\n    var isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);\n    var selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    var nextValue = isChecked ? [].concat(_toConsumableArray(value), [selectedValue]) : value.filter(function (v) {\n      return String(v) !== String(selectedValue);\n    });\n    setValue(nextValue);\n  }, [setValue, value]);\n  var getCheckboxProps = useCallback(function () {\n    var _objectSpread2;\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return _objectSpread(_objectSpread({}, props2), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, checkedKey, value.some(function (val) {\n      return String(props2.value) === String(val);\n    })), _defineProperty(_objectSpread2, \"onChange\", handleChange), _objectSpread2));\n  }, [handleChange, isNative, value]);\n  return {\n    value: value,\n    isDisabled: isDisabled,\n    onChange: handleChange,\n    setValue: setValue,\n    getCheckboxProps: getCheckboxProps\n  };\n}\nexport { useCheckboxGroup };","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,sBAAsB;AAC/B,SAASC,4BAA4B;AACrC,SAASC,gBAAgB;AACzB,SAASC,mBAAmB;AAG5B,SAASC,aAAaC,OAAmD;EACvE,OAAOA,SAASH,SAASG,KAAK,KAAKH,SAASG,MAAMC,MAAM;AAC1D;AAWO,SAASC,mBAAoD;EAAA,IAAnCC,4EAA+B,CAAC;EAC/D,IACEC,eAKED,MALFC;IACOC,YAILF,MAJFH;IACAM,WAGEH,MAHFG;IACAC,aAEEJ,MAFFI;IACAC,WACEL,MADFK;EAGF,IAAMC,eAAed,eAAeW,QAAQ;EAE5C,4BAA0BV,qBAAqB;MAC7CI,OAAOK;MACPD,cAAcA,gBAAgB,EAAC;MAC/BE,UAAUG;IACZ,CAAC;IAAAC;IAJMV;IAAOW,QAAQ;EAMtB,IAAMC,eAAed,YACnB,UAACe,cAA+B;IAC9B,IAAI,CAACb,OAAO;IAEZ,IAAMc,YAAYf,aAAac,YAAY,IACvCA,aAAaZ,OAAOc,UACpB,CAACf,MAAMgB,SAASH,YAAY;IAEhC,IAAMI,gBAAgBlB,aAAac,YAAY,IAC3CA,aAAaZ,OAAOD,QACpBa;IAEJ,IAAMK,YAAYJ,yCACVd,SAAOiB,aAAa,KACxBjB,MAAMmB,OAAO,UAACC;MAAA,OAAMC,OAAOD,CAAC,MAAMC,OAAOJ,aAAa,CAAC;IAAA;IAE3DN,SAASO,SAAS;EACpB,GACA,CAACP,UAAUX,KAAK,CAClB;EAEA,IAAMsB,mBAAmBxB,YACvB,YAAqC;IAAA;IAAA,IAApCK,6EAA6B,CAAC;IAC7B,IAAMoB,aAAaf,WAAW,YAAY;IAC1C,uCACKL,mEACFoB,UAAU,EAAGvB,MAAMwB,KAAK,UAACC;MAAA,OAAQJ,OAAOlB,OAAMH,KAAK,MAAMqB,OAAOI,GAAG,CAAC;IAAA,iDAC3Db;EAEd,GACA,CAACA,cAAcJ,UAAUR,KAAK,CAChC;EAEA,OAAO;IACLA;IACAO;IACAD,UAAUM;IACVD;IACAW;EACF;AACF","names":["useCallbackRef","useControllableState","isObject","useCallback","isInputEvent","value","target","useCheckboxGroup","props","defaultValue","valueProp","onChange","isDisabled","isNative","onChangeProp","_useControllableState2","setValue","handleChange","eventOrValue","isChecked","checked","includes","selectedValue","nextValue","filter","v","String","getCheckboxProps","checkedKey","some","val"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\checkbox\\src\\use-checkbox-group.ts"],"sourcesContent":["import { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { isObject } from \"@chakra-ui/shared-utils\"\nimport { useCallback } from \"react\"\nimport { EventOrValue, UseCheckboxGroupProps } from \"./checkbox-types\"\n\nfunction isInputEvent(value: any): value is { target: HTMLInputElement } {\n  return value && isObject(value) && isObject(value.target)\n}\n\n/**\n * React hook that provides all the state management logic\n * for a group of checkboxes.\n *\n * It is consumed by the `CheckboxGroup` component\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-checkbox-group\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/\n */\nexport function useCheckboxGroup(props: UseCheckboxGroupProps = {}) {\n  const {\n    defaultValue,\n    value: valueProp,\n    onChange,\n    isDisabled,\n    isNative,\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp,\n  })\n\n  const handleChange = useCallback(\n    (eventOrValue: EventOrValue) => {\n      if (!value) return\n\n      const isChecked = isInputEvent(eventOrValue)\n        ? eventOrValue.target.checked\n        : !value.includes(eventOrValue)\n\n      const selectedValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      const nextValue = isChecked\n        ? [...value, selectedValue]\n        : value.filter((v) => String(v) !== String(selectedValue))\n\n      setValue(nextValue)\n    },\n    [setValue, value],\n  )\n\n  const getCheckboxProps = useCallback(\n    (props: Record<string, any> = {}) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        [checkedKey]: value.some((val) => String(props.value) === String(val)),\n        onChange: handleChange,\n      }\n    },\n    [handleChange, isNative, value],\n  )\n\n  return {\n    value,\n    isDisabled,\n    onChange: handleChange,\n    setValue,\n    getCheckboxProps,\n  }\n}\n\nexport type UseCheckboxGroupReturn = ReturnType<typeof useCheckboxGroup>\n"]},"metadata":{},"sourceType":"module"}