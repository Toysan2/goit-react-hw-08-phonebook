{"ast":null,"code":"'use client';\n\n// src/use-clipboard.ts\nimport _objectWithoutProperties from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _excluded = [\"timeout\"];\nimport { useState, useCallback, useEffect } from \"react\";\nimport copy from \"copy-to-clipboard\";\nfunction useClipboard(value) {\n  var optionsOrTimeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    hasCopied = _useState2[0],\n    setHasCopied = _useState2[1];\n  var _useState3 = useState(value),\n    _useState4 = _slicedToArray(_useState3, 2),\n    valueState = _useState4[0],\n    setValueState = _useState4[1];\n  useEffect(function () {\n    return setValueState(value);\n  }, [value]);\n  var _ref = typeof optionsOrTimeout === \"number\" ? {\n      timeout: optionsOrTimeout\n    } : optionsOrTimeout,\n    _ref$timeout = _ref.timeout,\n    timeout = _ref$timeout === void 0 ? 1500 : _ref$timeout,\n    copyOptions = _objectWithoutProperties(_ref, _excluded);\n  var onCopy = useCallback(function () {\n    var didCopy = copy(valueState, copyOptions);\n    setHasCopied(didCopy);\n  }, [valueState, copyOptions]);\n  useEffect(function () {\n    var timeoutId = null;\n    if (hasCopied) {\n      timeoutId = window.setTimeout(function () {\n        setHasCopied(false);\n      }, timeout);\n    }\n    return function () {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId);\n      }\n    };\n  }, [timeout, hasCopied]);\n  return {\n    value: valueState,\n    setValue: setValueState,\n    onCopy: onCopy,\n    hasCopied: hasCopied\n  };\n}\nexport { useClipboard };","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,UAAUC,aAAaC,iBAAiB;AACjD,OAAOC,UAAU;AAwBV,SAASC,aACdC,OAEA;EAAA,IADAC,uFAAiD,CAAC;EAElD,gBAAkCN,SAAS,KAAK;IAAAO;IAAzCC;IAAWC,YAAY;EAE9B,iBAAoCT,SAASK,KAAK;IAAAK;IAA3CC;IAAYC,aAAa;EAChCV,UAAU;IAAA,OAAMU,cAAcP,KAAK;EAAA,GAAG,CAACA,KAAK,CAAC;EAE7C,WACE,OAAOC,qBAAqB,WACxB;MAAEO,SAASP;IAAiB,IAC5BA;IAAAQ,oBAHED;IAAAA,oCAAU;IAASE;EAK3B,IAAMC,SAASf,YAAY,YAAM;IAC/B,IAAMgB,UAAUd,KAAKQ,YAAYI,WAAW;IAC5CN,aAAaQ,OAAO;EACtB,GAAG,CAACN,YAAYI,WAAW,CAAC;EAE5Bb,UAAU,YAAM;IACd,IAAIgB,YAA2B;IAE/B,IAAIV,WAAW;MACbU,YAAYC,OAAOC,WAAW,YAAM;QAClCX,aAAa,KAAK;MACpB,GAAGI,OAAO;IACZ;IAEA,OAAO,YAAM;MACX,IAAIK,WAAW;QACbC,OAAOE,aAAaH,SAAS;MAC/B;IACF;EACF,GAAG,CAACL,SAASL,SAAS,CAAC;EAEvB,OAAO;IACLH,OAAOM;IACPW,UAAUV;IACVI;IACAR;EACF;AACF","names":["useState","useCallback","useEffect","copy","useClipboard","value","optionsOrTimeout","_useState2","hasCopied","setHasCopied","_useState4","valueState","setValueState","timeout","_ref$timeout","copyOptions","onCopy","didCopy","timeoutId","window","setTimeout","clearTimeout","setValue"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\hooks\\src\\use-clipboard.ts"],"sourcesContent":["import { useState, useCallback, useEffect } from \"react\"\nimport copy from \"copy-to-clipboard\"\n\nexport interface UseClipboardOptions {\n  /**\n   * timeout delay (in ms) to switch back to initial state once copied.\n   */\n  timeout?: number\n  /**\n   * Set the desired MIME type\n   */\n  format?: string\n}\n\n/**\n * React hook to copy content to clipboard\n *\n * @param value the text or value to copy\n * @param {Number} [optionsOrTimeout=1500] optionsOrTimeout - delay (in ms) to switch back to initial state once copied.\n * @param {Object} optionsOrTimeout\n * @param {string} optionsOrTimeout.format - set the desired MIME type\n * @param {number} optionsOrTimeout.timeout - delay (in ms) to switch back to initial state once copied.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-clipboard\n */\nexport function useClipboard(\n  value: string,\n  optionsOrTimeout: number | UseClipboardOptions = {},\n) {\n  const [hasCopied, setHasCopied] = useState(false)\n\n  const [valueState, setValueState] = useState(value)\n  useEffect(() => setValueState(value), [value])\n\n  const { timeout = 1500, ...copyOptions } =\n    typeof optionsOrTimeout === \"number\"\n      ? { timeout: optionsOrTimeout }\n      : optionsOrTimeout\n\n  const onCopy = useCallback(() => {\n    const didCopy = copy(valueState, copyOptions)\n    setHasCopied(didCopy)\n  }, [valueState, copyOptions])\n\n  useEffect(() => {\n    let timeoutId: number | null = null\n\n    if (hasCopied) {\n      timeoutId = window.setTimeout(() => {\n        setHasCopied(false)\n      }, timeout)\n    }\n\n    return () => {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId)\n      }\n    }\n  }, [timeout, hasCopied])\n\n  return {\n    value: valueState,\n    setValue: setValueState,\n    onCopy,\n    hasCopied,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}