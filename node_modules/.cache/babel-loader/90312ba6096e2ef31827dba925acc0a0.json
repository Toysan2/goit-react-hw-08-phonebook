{"ast":null,"code":"import _defineProperty from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _defineStyle, _defineStyle2;\nimport { sizes_default } from \"./chunk-NJCYBKFH.mjs\";\nimport { runIfFn } from \"./chunk-UV3F75RF.mjs\";\n\n// src/components/avatar.ts\nimport { avatarAnatomy as parts } from \"@chakra-ui/anatomy\";\nimport { createMultiStyleConfigHelpers, cssVar, defineStyle } from \"@chakra-ui/styled-system\";\nimport { isDark, randomColor } from \"@chakra-ui/theme-tools\";\nvar _createMultiStyleConf = createMultiStyleConfigHelpers(parts.keys),\n  definePartsStyle = _createMultiStyleConf.definePartsStyle,\n  defineMultiStyleConfig = _createMultiStyleConf.defineMultiStyleConfig;\nvar $border = cssVar(\"avatar-border-color\");\nvar $bg = cssVar(\"avatar-bg\");\nvar $fs = cssVar(\"avatar-font-size\");\nvar $size = cssVar(\"avatar-size\");\nvar baseStyleBadge = defineStyle((_defineStyle = {\n  borderRadius: \"full\",\n  border: \"0.2em solid\",\n  borderColor: $border.reference\n}, _defineProperty(_defineStyle, $border.variable, \"white\"), _defineProperty(_defineStyle, \"_dark\", _defineProperty({}, $border.variable, \"colors.gray.800\")), _defineStyle));\nvar baseStyleExcessLabel = defineStyle((_defineStyle2 = {\n  bg: $bg.reference,\n  fontSize: $fs.reference,\n  width: $size.reference,\n  height: $size.reference,\n  lineHeight: \"1\"\n}, _defineProperty(_defineStyle2, $bg.variable, \"colors.gray.200\"), _defineProperty(_defineStyle2, \"_dark\", _defineProperty({}, $bg.variable, \"colors.whiteAlpha.400\")), _defineStyle2));\nvar baseStyleContainer = defineStyle(function (props) {\n  var _ref;\n  var name = props.name,\n    theme = props.theme;\n  var bg = name ? randomColor({\n    string: name\n  }) : \"colors.gray.400\";\n  var isBgDark = isDark(bg)(theme);\n  var color = \"white\";\n  if (!isBgDark) color = \"gray.800\";\n  return _ref = {\n    bg: $bg.reference,\n    fontSize: $fs.reference,\n    color: color,\n    borderColor: $border.reference,\n    verticalAlign: \"top\",\n    width: $size.reference,\n    height: $size.reference,\n    \"&:not([data-loaded])\": _defineProperty({}, $bg.variable, bg)\n  }, _defineProperty(_ref, $border.variable, \"colors.white\"), _defineProperty(_ref, \"_dark\", _defineProperty({}, $border.variable, \"colors.gray.800\")), _ref;\n});\nvar baseStyleLabel = defineStyle({\n  fontSize: $fs.reference,\n  lineHeight: \"1\"\n});\nvar baseStyle = definePartsStyle(function (props) {\n  return {\n    badge: runIfFn(baseStyleBadge, props),\n    excessLabel: runIfFn(baseStyleExcessLabel, props),\n    container: runIfFn(baseStyleContainer, props),\n    label: baseStyleLabel\n  };\n});\nfunction getSize(size) {\n  var _container, _excessLabel;\n  var themeSize = size !== \"100%\" ? sizes_default[size] : void 0;\n  return definePartsStyle({\n    container: (_container = {}, _defineProperty(_container, $size.variable, themeSize != null ? themeSize : size), _defineProperty(_container, $fs.variable, \"calc(\".concat(themeSize != null ? themeSize : size, \" / 2.5)\")), _container),\n    excessLabel: (_excessLabel = {}, _defineProperty(_excessLabel, $size.variable, themeSize != null ? themeSize : size), _defineProperty(_excessLabel, $fs.variable, \"calc(\".concat(themeSize != null ? themeSize : size, \" / 2.5)\")), _excessLabel)\n  });\n}\nvar sizes = {\n  \"2xs\": getSize(4),\n  xs: getSize(6),\n  sm: getSize(8),\n  md: getSize(12),\n  lg: getSize(16),\n  xl: getSize(24),\n  \"2xl\": getSize(32),\n  full: getSize(\"100%\")\n};\nvar avatarTheme = defineMultiStyleConfig({\n  baseStyle: baseStyle,\n  sizes: sizes,\n  defaultProps: {\n    size: \"md\"\n  }\n});\nexport { avatarTheme };","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,iBAAiBC,aAAa;AACvC,SACEC,+BACAC,QACAC,mBACK;AACP,SAASC,QAAQC,mBAAmB;AAIpC,4BACEJ,8BAA8BD,MAAMM,IAAI;EADlCC;EAAkBC;AAG1B,IAAMC,UAAUP,OAAO,qBAAqB;AAC5C,IAAMQ,MAAMR,OAAO,WAAW;AAC9B,IAAMS,MAAMT,OAAO,kBAAkB;AACrC,IAAMU,QAAQV,OAAO,aAAa;AAElC,IAAMW,iBAAiBV;EACrBW,cAAc;EACdC,QAAQ;EACRC,aAAaP,QAAQQ;AAAA,iCACpBR,QAAQS,QAAQ,EAAG,qEAEjBT,QAAQS,QAAQ,EAAG,kCAEvB;AAED,IAAMC,uBAAuBhB;EAC3BiB,IAAIV,IAAIO;EACRI,UAAUV,IAAIM;EACdK,OAAOV,MAAMK;EACbM,QAAQX,MAAMK;EACdO,YAAY;AAAA,kCACXd,IAAIQ,QAAQ,EAAG,gFAEbR,IAAIQ,QAAQ,EAAG,yCAEnB;AAED,IAAMO,qBAAqBtB,YAAY,UAACuB,OAAU;EAAA;EAChD,IAAQC,OAAgBD,MAAhBC;IAAMC,QAAUF,MAAVE;EACd,IAAMR,KAAKO,OAAOtB,YAAY;IAAEwB,QAAQF;EAAK,CAAC,IAAI;EAClD,IAAMG,WAAW1B,OAAOgB,EAAE,EAAEQ,KAAK;EAEjC,IAAIG,QAAQ;EACZ,IAAI,CAACD,UAAUC,QAAQ;EAEvB;IACEX,IAAIV,IAAIO;IACRI,UAAUV,IAAIM;IACdc;IACAf,aAAaP,QAAQQ;IACrBe,eAAe;IACfV,OAAOV,MAAMK;IACbM,QAAQX,MAAMK;IACd,4CACGP,IAAIQ,QAAQ,EAAGE;EAClB,yBACCX,QAAQS,QAAQ,EAAG,oEAEjBT,QAAQS,QAAQ,EAAG;AAG1B,CAAC;AAED,IAAMe,iBAAiB9B,YAAY;EACjCkB,UAAUV,IAAIM;EACdO,YAAY;AACd,CAAC;AAED,IAAMU,YAAY3B,iBAAiB,UAACmB;EAAA,OAAW;IAC7CS,OAAOC,QAAQvB,gBAAgBa,KAAK;IACpCW,aAAaD,QAAQjB,sBAAsBO,KAAK;IAChDY,WAAWF,QAAQX,oBAAoBC,KAAK;IAC5Ca,OAAON;EACT;AAAA,CAAE;AAEF,SAASO,QAAQC,MAAwC;EAAA;EACvD,IAAMC,YAAYD,SAAS,SAASE,cAAWF,IAAI,IAAI;EACvD,OAAOlC,iBAAiB;IACtB+B,yDACG1B,MAAMM,QAAQ,EAAGwB,gCAAaD,mCAC9B9B,IAAIO,QAAQ,iBAAWwB,gCAAaD,IAAI,0BAC3C;IACAJ,+DACGzB,MAAMM,QAAQ,EAAGwB,gCAAaD,qCAC9B9B,IAAIO,QAAQ,iBAAWwB,gCAAaD,IAAI;EAE7C,CAAC;AACH;AAEA,IAAMG,QAAQ;EACZ,OAAOJ,QAAQ,CAAC;EAChBK,IAAIL,QAAQ,CAAC;EACbM,IAAIN,QAAQ,CAAC;EACbO,IAAIP,QAAQ,EAAE;EACdQ,IAAIR,QAAQ,EAAE;EACdS,IAAIT,QAAQ,EAAE;EACd,OAAOA,QAAQ,EAAE;EACjBU,MAAMV,QAAQ,MAAM;AACtB;AAEO,IAAMW,cAAc3C,uBAAuB;EAChD0B;EACAU;EACAQ,cAAc;IACZX,MAAM;EACR;AACF,CAAC","names":["avatarAnatomy","parts","createMultiStyleConfigHelpers","cssVar","defineStyle","isDark","randomColor","keys","definePartsStyle","defineMultiStyleConfig","$border","$bg","$fs","$size","baseStyleBadge","borderRadius","border","borderColor","reference","variable","baseStyleExcessLabel","bg","fontSize","width","height","lineHeight","baseStyleContainer","props","name","theme","string","isBgDark","color","verticalAlign","baseStyleLabel","baseStyle","badge","runIfFn","excessLabel","container","label","getSize","size","themeSize","sizes_default","sizes","xs","sm","md","lg","xl","full","avatarTheme","defaultProps"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\theme\\src\\components\\avatar.ts"],"sourcesContent":["import { avatarAnatomy as parts } from \"@chakra-ui/anatomy\"\nimport {\n  createMultiStyleConfigHelpers,\n  cssVar,\n  defineStyle,\n} from \"@chakra-ui/styled-system\"\nimport { isDark, randomColor } from \"@chakra-ui/theme-tools\"\nimport themeSizes from \"../foundations/sizes\"\nimport { runIfFn } from \"../utils/run-if-fn\"\n\nconst { definePartsStyle, defineMultiStyleConfig } =\n  createMultiStyleConfigHelpers(parts.keys)\n\nconst $border = cssVar(\"avatar-border-color\")\nconst $bg = cssVar(\"avatar-bg\")\nconst $fs = cssVar(\"avatar-font-size\")\nconst $size = cssVar(\"avatar-size\")\n\nconst baseStyleBadge = defineStyle({\n  borderRadius: \"full\",\n  border: \"0.2em solid\",\n  borderColor: $border.reference,\n  [$border.variable]: \"white\",\n  _dark: {\n    [$border.variable]: \"colors.gray.800\",\n  },\n})\n\nconst baseStyleExcessLabel = defineStyle({\n  bg: $bg.reference,\n  fontSize: $fs.reference,\n  width: $size.reference,\n  height: $size.reference,\n  lineHeight: \"1\",\n  [$bg.variable]: \"colors.gray.200\",\n  _dark: {\n    [$bg.variable]: \"colors.whiteAlpha.400\",\n  },\n})\n\nconst baseStyleContainer = defineStyle((props) => {\n  const { name, theme } = props\n  const bg = name ? randomColor({ string: name }) : \"colors.gray.400\"\n  const isBgDark = isDark(bg)(theme)\n\n  let color = \"white\"\n  if (!isBgDark) color = \"gray.800\"\n\n  return {\n    bg: $bg.reference,\n    fontSize: $fs.reference,\n    color,\n    borderColor: $border.reference,\n    verticalAlign: \"top\",\n    width: $size.reference,\n    height: $size.reference,\n    \"&:not([data-loaded])\": {\n      [$bg.variable]: bg,\n    },\n    [$border.variable]: \"colors.white\",\n    _dark: {\n      [$border.variable]: \"colors.gray.800\",\n    },\n  }\n})\n\nconst baseStyleLabel = defineStyle({\n  fontSize: $fs.reference,\n  lineHeight: \"1\",\n})\n\nconst baseStyle = definePartsStyle((props) => ({\n  badge: runIfFn(baseStyleBadge, props),\n  excessLabel: runIfFn(baseStyleExcessLabel, props),\n  container: runIfFn(baseStyleContainer, props),\n  label: baseStyleLabel,\n}))\n\nfunction getSize(size: keyof typeof themeSizes | \"100%\") {\n  const themeSize = size !== \"100%\" ? themeSizes[size] : undefined\n  return definePartsStyle({\n    container: {\n      [$size.variable]: themeSize ?? size,\n      [$fs.variable]: `calc(${themeSize ?? size} / 2.5)`,\n    },\n    excessLabel: {\n      [$size.variable]: themeSize ?? size,\n      [$fs.variable]: `calc(${themeSize ?? size} / 2.5)`,\n    },\n  })\n}\n\nconst sizes = {\n  \"2xs\": getSize(4),\n  xs: getSize(6),\n  sm: getSize(8),\n  md: getSize(12),\n  lg: getSize(16),\n  xl: getSize(24),\n  \"2xl\": getSize(32),\n  full: getSize(\"100%\"),\n}\n\nexport const avatarTheme = defineMultiStyleConfig({\n  baseStyle,\n  sizes,\n  defaultProps: {\n    size: \"md\",\n  },\n})\n"]},"metadata":{},"sourceType":"module"}