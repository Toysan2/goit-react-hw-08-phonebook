{"ast":null,"code":"'use client';\n\nimport _defineProperty from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"placement\"],\n  _excluded2 = [\"className\"],\n  _excluded3 = [\"className\"];\nimport { useInputGroupStyles } from \"./chunk-FKYN3ZGE.mjs\";\n\n// src/input-element.tsx\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar StyledInputElement = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: \"0\",\n    zIndex: 2\n  }\n});\nvar InputElement = forwardRef(function InputElement2(props, ref) {\n  var _objectSpread2;\n  var _a, _b;\n  var _props$placement = props.placement,\n    placement = _props$placement === void 0 ? \"left\" : _props$placement,\n    rest = _objectWithoutProperties(props, _excluded);\n  var styles = useInputGroupStyles();\n  var input = styles.field;\n  var attr = placement === \"left\" ? \"insetStart\" : \"insetEnd\";\n  var elementStyles = _objectSpread((_objectSpread2 = {}, _defineProperty(_objectSpread2, attr, \"0\"), _defineProperty(_objectSpread2, \"width\", (_a = input == null ? void 0 : input.height) != null ? _a : input == null ? void 0 : input.h), _defineProperty(_objectSpread2, \"height\", (_b = input == null ? void 0 : input.height) != null ? _b : input == null ? void 0 : input.h), _defineProperty(_objectSpread2, \"fontSize\", input == null ? void 0 : input.fontSize), _objectSpread2), styles.element);\n  return /* @__PURE__ */jsx(StyledInputElement, _objectSpread({\n    ref: ref,\n    __css: elementStyles\n  }, rest));\n});\nInputElement.id = \"InputElement\";\nInputElement.displayName = \"InputElement\";\nvar InputLeftElement = forwardRef(function InputLeftElement2(props, ref) {\n  var className = props.className,\n    rest = _objectWithoutProperties(props, _excluded2);\n  var _className = cx(\"chakra-input__left-element\", className);\n  return /* @__PURE__ */jsx(InputElement, _objectSpread({\n    ref: ref,\n    placement: \"left\",\n    className: _className\n  }, rest));\n});\nInputLeftElement.id = \"InputLeftElement\";\nInputLeftElement.displayName = \"InputLeftElement\";\nvar InputRightElement = forwardRef(function InputRightElement2(props, ref) {\n  var className = props.className,\n    rest = _objectWithoutProperties(props, _excluded3);\n  var _className = cx(\"chakra-input__right-element\", className);\n  return /* @__PURE__ */jsx(InputElement, _objectSpread({\n    ref: ref,\n    placement: \"right\",\n    className: _className\n  }, rest));\n});\nInputRightElement.id = \"InputRightElement\";\nInputRightElement.displayName = \"InputRightElement\";\nexport { InputLeftElement, InputRightElement };","map":{"version":3,"mappings":";;;;;;;;;;;AAAA,SACEA,QACAC,kBAGK;AACP,SAASC,UAAU;AAqCV;AA9BT,IAAMC,qBAAqBH,OAAO,OAAO;EACvCI,WAAW;IACTC,SAAS;IACTC,YAAY;IACZC,gBAAgB;IAChBC,UAAU;IACVC,KAAK;IACLC,QAAQ;EACV;AACF,CAAC;AAED,IAAMC,eAAeV,WAAqC,SAASU,cACjEC,OACAC,KACA;EAAA;EA3BF;EA4BE,uBAAwCD,MAAhCE;IAAAA,0CAAY;IAAWC,gCAASH;EAExC,IAAMI,SAASC,oBAAoB;EACnC,IAAMC,QAAaF,OAAOG;EAE1B,IAAMC,OAAON,cAAc,SAAS,eAAe;EAEnD,IAAMO,oFACHD,IAAI,EAAG,+CACR,CAAOE,oCAAOC,WAAP,YAAiBL,+BAAOM,8CAC/B,CAAQC,oCAAOF,WAAP,YAAiBL,+BAAOM,gDACtBN,+BAAOQ,4BACdV,OAAOW,QACZ;EAEA,OAAO,mBAACxB;IAAmBU;IAAUe,OAAOP;EAAA,GAAmBN,KAAM;AACvE,CAAC;AAGDJ,aAAakB,KAAK;AAElBlB,aAAamB,cAAc;AAIpB,IAAMC,mBAAmB9B,WAC9B,SAAS8B,kBAAiBnB,OAAOC,KAAK;EACpC,IAAQmB,YAAuBpB,MAAvBoB;IAAcjB,gCAASH;EAC/B,IAAMqB,aAAa/B,GAAG,8BAA8B8B,SAAS;EAE7D,OACE,mBAACrB;IACCE;IACAC,WAAU;IACVkB,WAAWC;EAAA,GACPlB,KACN;AAEJ,CACF;AAGAgB,iBAAiBF,KAAK;AAEtBE,iBAAiBD,cAAc;AAIxB,IAAMI,oBAAoBjC,WAC/B,SAASiC,mBAAkBtB,OAAOC,KAAK;EACrC,IAAQmB,YAAuBpB,MAAvBoB;IAAcjB,gCAASH;EAC/B,IAAMqB,aAAa/B,GAAG,+BAA+B8B,SAAS;EAE9D,OACE,mBAACrB;IACCE;IACAC,WAAU;IACVkB,WAAWC;EAAA,GACPlB,KACN;AAEJ,CACF;AAGAmB,kBAAkBL,KAAK;AAEvBK,kBAAkBJ,cAAc","names":["chakra","forwardRef","cx","StyledInputElement","baseStyle","display","alignItems","justifyContent","position","top","zIndex","InputElement","props","ref","placement","rest","styles","useInputGroupStyles","input","field","attr","elementStyles","_a","height","h","_b","fontSize","element","__css","id","displayName","InputLeftElement","className","_className","InputRightElement"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\input\\src\\input-element.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useInputGroupStyles } from \"./input-group\"\n\nexport interface InputElementProps extends HTMLChakraProps<\"div\"> {\n  placement?: \"left\" | \"right\"\n}\n\nconst StyledInputElement = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: \"0\",\n    zIndex: 2,\n  },\n})\n\nconst InputElement = forwardRef<InputElementProps, \"div\">(function InputElement(\n  props,\n  ref,\n) {\n  const { placement = \"left\", ...rest } = props\n\n  const styles = useInputGroupStyles()\n  const input: any = styles.field\n\n  const attr = placement === \"left\" ? \"insetStart\" : \"insetEnd\"\n\n  const elementStyles: SystemStyleObject = {\n    [attr]: \"0\",\n    width: input?.height ?? input?.h,\n    height: input?.height ?? input?.h,\n    fontSize: input?.fontSize,\n    ...styles.element,\n  }\n\n  return <StyledInputElement ref={ref} __css={elementStyles} {...rest} />\n})\n\n// This is used in `input-group.tsx`\nInputElement.id = \"InputElement\"\n\nInputElement.displayName = \"InputElement\"\n\nexport type InputLeftElementProps = Omit<InputElementProps, \"placement\">\n\nexport const InputLeftElement = forwardRef<InputLeftElementProps, \"div\">(\n  function InputLeftElement(props, ref) {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__left-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"left\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputLeftElement.id = \"InputLeftElement\"\n\nInputLeftElement.displayName = \"InputLeftElement\"\n\nexport type InputRightElementProps = Omit<InputElementProps, \"placement\">\n\nexport const InputRightElement = forwardRef<InputRightElementProps, \"div\">(\n  function InputRightElement(props, ref) {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__right-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"right\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputRightElement.id = \"InputRightElement\"\n\nInputRightElement.displayName = \"InputRightElement\"\n"]},"metadata":{},"sourceType":"module"}