{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"focusInputOnChange\", \"clampValueOnBlur\", \"keepWithinRange\", \"min\", \"max\", \"step\", \"isReadOnly\", \"isDisabled\", \"isRequired\", \"isInvalid\", \"pattern\", \"inputMode\", \"allowMouseWheel\", \"id\", \"onChange\", \"precision\", \"name\", \"aria-describedby\", \"aria-label\", \"aria-labelledby\", \"onFocus\", \"onBlur\", \"onInvalid\", \"getAriaValueText\", \"isValidCharacter\", \"format\", \"parse\"];\nimport { useAttributeObserver } from \"./chunk-2PMVP26D.mjs\";\nimport { useSpinner } from \"./chunk-366L2ZDN.mjs\";\n\n// src/use-number-input.ts\nimport { useCounter } from \"@chakra-ui/counter\";\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { useCallback, useMemo, useRef, useState } from \"react\";\nvar FLOATING_POINT_REGEX = /^[Ee0-9+\\-.]$/;\nfunction isFloatingPointNumericCharacter(character) {\n  return FLOATING_POINT_REGEX.test(character);\n}\nfunction isValidNumericKeyboardEvent(event, isValid) {\n  if (event.key == null) return true;\n  var isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n  var isSingleCharacterKey = event.key.length === 1;\n  if (!isSingleCharacterKey || isModifierKey) return true;\n  return isValid(event.key);\n}\nfunction useNumberInput() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _props$focusInputOnCh = props.focusInputOnChange,\n    focusInputOnChange = _props$focusInputOnCh === void 0 ? true : _props$focusInputOnCh,\n    _props$clampValueOnBl = props.clampValueOnBlur,\n    clampValueOnBlur = _props$clampValueOnBl === void 0 ? true : _props$clampValueOnBl,\n    _props$keepWithinRang = props.keepWithinRange,\n    keepWithinRange = _props$keepWithinRang === void 0 ? true : _props$keepWithinRang,\n    _props$min = props.min,\n    min = _props$min === void 0 ? Number.MIN_SAFE_INTEGER : _props$min,\n    _props$max = props.max,\n    max = _props$max === void 0 ? Number.MAX_SAFE_INTEGER : _props$max,\n    _props$step = props.step,\n    stepProp = _props$step === void 0 ? 1 : _props$step,\n    isReadOnly = props.isReadOnly,\n    isDisabled = props.isDisabled,\n    isRequired = props.isRequired,\n    isInvalid = props.isInvalid,\n    _props$pattern = props.pattern,\n    pattern = _props$pattern === void 0 ? \"[0-9]*(.[0-9]+)?\" : _props$pattern,\n    _props$inputMode = props.inputMode,\n    inputMode = _props$inputMode === void 0 ? \"decimal\" : _props$inputMode,\n    allowMouseWheel = props.allowMouseWheel,\n    id = props.id,\n    _ = props.onChange,\n    precision = props.precision,\n    name = props.name,\n    ariaDescBy = props[\"aria-describedby\"],\n    ariaLabel = props[\"aria-label\"],\n    ariaLabelledBy = props[\"aria-labelledby\"],\n    onFocusProp = props.onFocus,\n    onBlurProp = props.onBlur,\n    onInvalidProp = props.onInvalid,\n    getAriaValueTextProp = props.getAriaValueText,\n    isValidCharacterProp = props.isValidCharacter,\n    formatValue = props.format,\n    parseValue = props.parse,\n    htmlProps = _objectWithoutProperties(props, _excluded);\n  var onFocus = useCallbackRef(onFocusProp);\n  var onBlur = useCallbackRef(onBlurProp);\n  var onInvalid = useCallbackRef(onInvalidProp);\n  var isValidCharacter = useCallbackRef(isValidCharacterProp != null ? isValidCharacterProp : isFloatingPointNumericCharacter);\n  var getAriaValueText = useCallbackRef(getAriaValueTextProp);\n  var counter = useCounter(props);\n  var updateFn = counter.update,\n    incrementFn = counter.increment,\n    decrementFn = counter.decrement;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isFocused = _useState2[0],\n    setFocused = _useState2[1];\n  var isInteractive = !(isReadOnly || isDisabled);\n  var inputRef = useRef(null);\n  var inputSelectionRef = useRef(null);\n  var incrementButtonRef = useRef(null);\n  var decrementButtonRef = useRef(null);\n  var sanitize = useCallback(function (value) {\n    return value.split(\"\").filter(isValidCharacter).join(\"\");\n  }, [isValidCharacter]);\n  var parse = useCallback(function (value) {\n    var _a;\n    return (_a = parseValue == null ? void 0 : parseValue(value)) != null ? _a : value;\n  }, [parseValue]);\n  var format = useCallback(function (value) {\n    var _a;\n    return ((_a = formatValue == null ? void 0 : formatValue(value)) != null ? _a : value).toString();\n  }, [formatValue]);\n  useUpdateEffect(function () {\n    if (counter.valueAsNumber > max) {\n      onInvalid == null ? void 0 : onInvalid(\"rangeOverflow\", format(counter.value), counter.valueAsNumber);\n    } else if (counter.valueAsNumber < min) {\n      onInvalid == null ? void 0 : onInvalid(\"rangeOverflow\", format(counter.value), counter.valueAsNumber);\n    }\n  }, [counter.valueAsNumber, counter.value, format, onInvalid]);\n  useSafeLayoutEffect(function () {\n    if (!inputRef.current) return;\n    var notInSync = inputRef.current.value != counter.value;\n    if (notInSync) {\n      var parsedInput = parse(inputRef.current.value);\n      counter.setValue(sanitize(parsedInput));\n    }\n  }, [parse, sanitize]);\n  var increment = useCallback(function () {\n    var step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : stepProp;\n    if (isInteractive) {\n      incrementFn(step);\n    }\n  }, [incrementFn, isInteractive, stepProp]);\n  var decrement = useCallback(function () {\n    var step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : stepProp;\n    if (isInteractive) {\n      decrementFn(step);\n    }\n  }, [decrementFn, isInteractive, stepProp]);\n  var spinner = useSpinner(increment, decrement);\n  useAttributeObserver(incrementButtonRef, \"disabled\", spinner.stop, spinner.isSpinning);\n  useAttributeObserver(decrementButtonRef, \"disabled\", spinner.stop, spinner.isSpinning);\n  var onChange = useCallback(function (event) {\n    var evt = event.nativeEvent;\n    if (evt.isComposing) return;\n    var parsedInput = parse(event.currentTarget.value);\n    updateFn(sanitize(parsedInput));\n    inputSelectionRef.current = {\n      start: event.currentTarget.selectionStart,\n      end: event.currentTarget.selectionEnd\n    };\n  }, [updateFn, sanitize, parse]);\n  var _onFocus = useCallback(function (event) {\n    var _a, _b, _c;\n    onFocus == null ? void 0 : onFocus(event);\n    if (!inputSelectionRef.current) return;\n    event.target.selectionStart = (_b = inputSelectionRef.current.start) != null ? _b : (_a = event.currentTarget.value) == null ? void 0 : _a.length;\n    event.currentTarget.selectionEnd = (_c = inputSelectionRef.current.end) != null ? _c : event.currentTarget.selectionStart;\n  }, [onFocus]);\n  var onKeyDown = useCallback(function (event) {\n    if (event.nativeEvent.isComposing) return;\n    if (!isValidNumericKeyboardEvent(event, isValidCharacter)) {\n      event.preventDefault();\n    }\n    var stepFactor = getStepFactor(event) * stepProp;\n    var eventKey = event.key;\n    var keyMap = {\n      ArrowUp: function ArrowUp() {\n        return increment(stepFactor);\n      },\n      ArrowDown: function ArrowDown() {\n        return decrement(stepFactor);\n      },\n      Home: function Home() {\n        return updateFn(min);\n      },\n      End: function End() {\n        return updateFn(max);\n      }\n    };\n    var action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [isValidCharacter, stepProp, increment, decrement, updateFn, min, max]);\n  var getStepFactor = function getStepFactor(event) {\n    var ratio = 1;\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1;\n    }\n    if (event.shiftKey) {\n      ratio = 10;\n    }\n    return ratio;\n  };\n  var ariaValueText = useMemo(function () {\n    var text = getAriaValueText == null ? void 0 : getAriaValueText(counter.value);\n    if (text != null) return text;\n    var defaultText = counter.value.toString();\n    return !defaultText ? void 0 : defaultText;\n  }, [counter.value, getAriaValueText]);\n  var validateAndClamp = useCallback(function () {\n    var next = counter.value;\n    if (counter.value === \"\") return;\n    var valueStartsWithE = /^[eE]/.test(counter.value.toString());\n    if (valueStartsWithE) {\n      counter.setValue(\"\");\n    } else {\n      if (counter.valueAsNumber < min) {\n        next = min;\n      }\n      if (counter.valueAsNumber > max) {\n        next = max;\n      }\n      counter.cast(next);\n    }\n  }, [counter, max, min]);\n  var onInputBlur = useCallback(function () {\n    setFocused(false);\n    if (clampValueOnBlur) {\n      validateAndClamp();\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp]);\n  var focusInput = useCallback(function () {\n    if (focusInputOnChange) {\n      requestAnimationFrame(function () {\n        var _a;\n        (_a = inputRef.current) == null ? void 0 : _a.focus();\n      });\n    }\n  }, [focusInputOnChange]);\n  var spinUp = useCallback(function (event) {\n    event.preventDefault();\n    spinner.up();\n    focusInput();\n  }, [focusInput, spinner]);\n  var spinDown = useCallback(function (event) {\n    event.preventDefault();\n    spinner.down();\n    focusInput();\n  }, [focusInput, spinner]);\n  useEventListener(function () {\n    return inputRef.current;\n  }, \"wheel\", function (event) {\n    var _a, _b;\n    var doc = (_b = (_a = inputRef.current) == null ? void 0 : _a.ownerDocument) != null ? _b : document;\n    var isInputFocused = doc.activeElement === inputRef.current;\n    if (!allowMouseWheel || !isInputFocused) return;\n    event.preventDefault();\n    var stepFactor = getStepFactor(event) * stepProp;\n    var direction = Math.sign(event.deltaY);\n    if (direction === -1) {\n      increment(stepFactor);\n    } else if (direction === 1) {\n      decrement(stepFactor);\n    }\n  }, {\n    passive: false\n  });\n  var getIncrementButtonProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var disabled = isDisabled || keepWithinRange && counter.isAtMax;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      ref: mergeRefs(ref, incrementButtonRef),\n      role: \"button\",\n      tabIndex: -1,\n      onPointerDown: callAllHandlers(props2.onPointerDown, function (event) {\n        if (event.button !== 0 || disabled) return;\n        spinUp(event);\n      }),\n      onPointerLeave: callAllHandlers(props2.onPointerLeave, spinner.stop),\n      onPointerUp: callAllHandlers(props2.onPointerUp, spinner.stop),\n      disabled: disabled,\n      \"aria-disabled\": ariaAttr(disabled)\n    });\n  }, [counter.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled]);\n  var getDecrementButtonProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var disabled = isDisabled || keepWithinRange && counter.isAtMin;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      ref: mergeRefs(ref, decrementButtonRef),\n      role: \"button\",\n      tabIndex: -1,\n      onPointerDown: callAllHandlers(props2.onPointerDown, function (event) {\n        if (event.button !== 0 || disabled) return;\n        spinDown(event);\n      }),\n      onPointerLeave: callAllHandlers(props2.onPointerLeave, spinner.stop),\n      onPointerUp: callAllHandlers(props2.onPointerUp, spinner.stop),\n      disabled: disabled,\n      \"aria-disabled\": ariaAttr(disabled)\n    });\n  }, [counter.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled]);\n  var getInputProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var _a, _b, _c, _d;\n    return _objectSpread(_objectSpread({\n      name: name,\n      inputMode: inputMode,\n      type: \"text\",\n      pattern: pattern,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescBy,\n      id: id,\n      disabled: isDisabled\n    }, props2), {}, {\n      readOnly: (_a = props2.readOnly) != null ? _a : isReadOnly,\n      \"aria-readonly\": (_b = props2.readOnly) != null ? _b : isReadOnly,\n      \"aria-required\": (_c = props2.required) != null ? _c : isRequired,\n      required: (_d = props2.required) != null ? _d : isRequired,\n      ref: mergeRefs(inputRef, ref),\n      value: format(counter.value),\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber) ? void 0 : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(isInvalid != null ? isInvalid : counter.isOutOfRange),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props2.onChange, onChange),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props2.onFocus, _onFocus, function () {\n        return setFocused(true);\n      }),\n      onBlur: callAllHandlers(props2.onBlur, onBlur, onInputBlur)\n    });\n  }, [name, inputMode, pattern, ariaLabelledBy, ariaLabel, format, ariaDescBy, id, isDisabled, isRequired, isReadOnly, isInvalid, counter.value, counter.valueAsNumber, counter.isOutOfRange, min, max, ariaValueText, onChange, onKeyDown, _onFocus, onBlur, onInputBlur]);\n  return {\n    value: format(counter.value),\n    valueAsNumber: counter.valueAsNumber,\n    isFocused: isFocused,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    getIncrementButtonProps: getIncrementButtonProps,\n    getDecrementButtonProps: getDecrementButtonProps,\n    getInputProps: getInputProps,\n    htmlProps: htmlProps\n  };\n}\nexport { useNumberInput };","map":{"version":3,"mappings":"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","names":["useCounter","useEventListener","useUpdateEffect","useSafeLayoutEffect","useCallbackRef","mergeRefs","ariaAttr","callAllHandlers","useCallback","useMemo","useRef","useState","FLOATING_POINT_REGEX","isFloatingPointNumericCharacter","character","test","isValidNumericKeyboardEvent","event","isValid","key","isModifierKey","ctrlKey","altKey","metaKey","isSingleCharacterKey","length","useNumberInput","props","focusInputOnChange","_props$clampValueOnBl","clampValueOnBlur","_props$keepWithinRang","keepWithinRange","_props$min","min","Number","MIN_SAFE_INTEGER","_props$max","max","MAX_SAFE_INTEGER","_props$step","step","stepProp","isReadOnly","isDisabled","isRequired","isInvalid","_props$pattern","pattern","_props$inputMode","inputMode","allowMouseWheel","id","_","onChange","precision","name","ariaDescBy","ariaLabel","ariaLabelledBy","onFocusProp","onFocus","onBlurProp","onBlur","onInvalidProp","onInvalid","getAriaValueTextProp","getAriaValueText","isValidCharacterProp","isValidCharacter","formatValue","format","parseValue","parse","htmlProps","counter","updateFn","update","incrementFn","increment","decrementFn","decrement","_useState2","isFocused","setFocused","isInteractive","inputRef","inputSelectionRef","incrementButtonRef","decrementButtonRef","sanitize","value","split","filter","join","toString","valueAsNumber","current","notInSync","parsedInput","setValue","spinner","useSpinner","useAttributeObserver","stop","isSpinning","evt","nativeEvent","isComposing","currentTarget","start","selectionStart","end","selectionEnd","_onFocus","target","_b","_a","_c","onKeyDown","preventDefault","stepFactor","getStepFactor","eventKey","keyMap","ArrowUp","ArrowDown","Home","End","action","ratio","shiftKey","ariaValueText","text","defaultText","validateAndClamp","next","valueStartsWithE","cast","onInputBlur","focusInput","requestAnimationFrame","focus","spinUp","up","spinDown","down","doc","ownerDocument","document","isInputFocused","activeElement","direction","Math","sign","deltaY","passive","getIncrementButtonProps","ref","disabled","isAtMax","role","tabIndex","onPointerDown","button","onPointerLeave","onPointerUp","getDecrementButtonProps","isAtMin","getInputProps","type","readOnly","required","_d","isNaN","isOutOfRange","autoComplete","autoCorrect"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\number-input\\src\\use-number-input.ts"],"sourcesContent":["import { useCounter, UseCounterProps } from \"@chakra-ui/counter\"\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { InputDOMAttributes, PropGetter } from \"@chakra-ui/react-types\"\nimport { useCallback, useMemo, useRef, useState } from \"react\"\nimport { useAttributeObserver } from \"./use-attr-observer\"\nimport { useSpinner } from \"./use-spinner\"\n\nconst FLOATING_POINT_REGEX = /^[Ee0-9+\\-.]$/\n\n/**\n * Determine if a character is a DOM floating point character\n * @see https://www.w3.org/TR/2012/WD-html-markup-20120329/datatypes.html#common.data.float\n */\nfunction isFloatingPointNumericCharacter(character: string) {\n  return FLOATING_POINT_REGEX.test(character)\n}\n\nfunction isValidNumericKeyboardEvent(\n  event: React.KeyboardEvent,\n  isValid: (key: string) => boolean,\n) {\n  if (event.key == null) return true\n  const isModifierKey = event.ctrlKey || event.altKey || event.metaKey\n  const isSingleCharacterKey = event.key.length === 1\n  if (!isSingleCharacterKey || isModifierKey) return true\n  return isValid(event.key)\n}\n\nexport interface UseNumberInputProps extends UseCounterProps {\n  /**\n   * If `true`, the input will be focused as you increment\n   * or decrement the value with the stepper\n   *\n   * @default true\n   */\n  focusInputOnChange?: boolean\n  /**\n   * This controls the value update when you blur out of the input.\n   * - If `true` and the value is greater than `max`, the value will be reset to `max`\n   * - Else, the value remains the same.\n   *\n   * @default true\n   */\n  clampValueOnBlur?: boolean\n  /**\n   * This is used to format the value so that screen readers\n   * can speak out a more human-friendly value.\n   *\n   * It is used to set the `aria-valuetext` property of the input\n   */\n  getAriaValueText?(value: string | number): string\n  /**\n   * If `true`, the input will be in readonly mode\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the input will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * Whether the input should be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * Whether the input is required\n   */\n  isRequired?: boolean\n  /**\n   * The `id` to use for the number input field.\n   */\n  id?: string\n  /**\n   * The pattern used to check the <input> element's value against on form submission.\n   *\n   * @default\n   * \"[0-9]*(.[0-9]+)?\"\n   */\n  pattern?: React.InputHTMLAttributes<any>[\"pattern\"]\n  /**\n   * Hints at the type of data that might be entered by the user. It also determines\n   * the type of keyboard shown to the user on mobile devices\n   *\n   * @default\n   * \"decimal\"\n   */\n  inputMode?: React.InputHTMLAttributes<any>[\"inputMode\"]\n  /**\n   * If `true`, the input's value will change based on mouse wheel\n   */\n  allowMouseWheel?: boolean\n  /**\n   * The HTML `name` attribute used for forms\n   */\n  name?: string\n  \"aria-describedby\"?: string\n  \"aria-label\"?: string\n  \"aria-labelledby\"?: string\n  onFocus?: React.FocusEventHandler<HTMLInputElement>\n  onBlur?: React.FocusEventHandler<HTMLInputElement>\n  onInvalid?: (\n    message: ValidityState,\n    value: string,\n    valueAsNumber: number,\n  ) => void\n  /**\n   * Whether the pressed key should be allowed in the input.\n   * The default behavior is to allow DOM floating point characters defined by /^[Ee0-9+\\-.]$/\n   */\n  isValidCharacter?: (value: string) => boolean\n  /**\n   * If using a custom display format, this converts the custom format to a format `parseFloat` understands.\n   */\n  parse?: (value: string) => string\n  /**\n   * If using a custom display format, this converts the default format to the custom format.\n   */\n  format?: (value: string | number) => string | number\n}\n\ntype ValidityState = \"rangeUnderflow\" | \"rangeOverflow\"\ntype InputSelection = { start: number | null; end: number | null }\n\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/spinbutton/\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\nexport function useNumberInput(props: UseNumberInputProps = {}) {\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    isRequired,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    onChange: _,\n    precision,\n    name,\n    \"aria-describedby\": ariaDescBy,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onInvalid: onInvalidProp,\n    getAriaValueText: getAriaValueTextProp,\n    isValidCharacter: isValidCharacterProp,\n    format: formatValue,\n    parse: parseValue,\n    ...htmlProps\n  } = props\n\n  const onFocus = useCallbackRef(onFocusProp)\n  const onBlur = useCallbackRef(onBlurProp)\n  const onInvalid = useCallbackRef(onInvalidProp)\n  const isValidCharacter = useCallbackRef(\n    isValidCharacterProp ?? isFloatingPointNumericCharacter,\n  )\n  const getAriaValueText = useCallbackRef(getAriaValueTextProp)\n\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n  const counter = useCounter(props)\n\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn,\n  } = counter\n\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n  const [isFocused, setFocused] = useState(false)\n  const isInteractive = !(isReadOnly || isDisabled)\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const inputSelectionRef = useRef<InputSelection | null>(null)\n  const incrementButtonRef = useRef<HTMLButtonElement>(null)\n  const decrementButtonRef = useRef<HTMLButtonElement>(null)\n\n  const sanitize = useCallback(\n    (value: string) => value.split(\"\").filter(isValidCharacter).join(\"\"),\n    [isValidCharacter],\n  )\n\n  const parse = useCallback(\n    (value: string) => parseValue?.(value) ?? value,\n    [parseValue],\n  )\n\n  const format = useCallback(\n    (value: string | number) => (formatValue?.(value) ?? value).toString(),\n    [formatValue],\n  )\n\n  useUpdateEffect(() => {\n    if (counter.valueAsNumber > max) {\n      onInvalid?.(\"rangeOverflow\", format(counter.value), counter.valueAsNumber)\n    } else if (counter.valueAsNumber < min) {\n      onInvalid?.(\"rangeOverflow\", format(counter.value), counter.valueAsNumber)\n    }\n  }, [counter.valueAsNumber, counter.value, format, onInvalid])\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.value != counter.value\n    if (notInSync) {\n      const parsedInput = parse(inputRef.current.value)\n      counter.setValue(sanitize(parsedInput))\n    }\n  }, [parse, sanitize])\n\n  const increment = useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        incrementFn(step)\n      }\n    },\n    [incrementFn, isInteractive, stepProp],\n  )\n\n  const decrement = useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        decrementFn(step)\n      }\n    },\n    [decrementFn, isInteractive, stepProp],\n  )\n\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n  const spinner = useSpinner(increment, decrement)\n\n  useAttributeObserver(\n    incrementButtonRef,\n    \"disabled\",\n    spinner.stop,\n    spinner.isSpinning,\n  )\n  useAttributeObserver(\n    decrementButtonRef,\n    \"disabled\",\n    spinner.stop,\n    spinner.isSpinning,\n  )\n\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n  const onChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const evt = event.nativeEvent as InputEvent\n      if (evt.isComposing) return\n      const parsedInput = parse(event.currentTarget.value)\n      updateFn(sanitize(parsedInput))\n      inputSelectionRef.current = {\n        start: event.currentTarget.selectionStart,\n        end: event.currentTarget.selectionEnd,\n      }\n    },\n    [updateFn, sanitize, parse],\n  )\n\n  const _onFocus = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) => {\n      onFocus?.(event)\n      if (!inputSelectionRef.current) return\n      /**\n       * restore selection if custom format string replacement moved it to the end\n       */\n      event.target.selectionStart =\n        inputSelectionRef.current.start ?? event.currentTarget.value?.length\n      event.currentTarget.selectionEnd =\n        inputSelectionRef.current.end ?? event.currentTarget.selectionStart\n    },\n    [onFocus],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.nativeEvent.isComposing) return\n\n      if (!isValidNumericKeyboardEvent(event, isValidCharacter)) {\n        event.preventDefault()\n      }\n\n      /**\n       * Keyboard Accessibility\n       *\n       * We want to increase or decrease the input's value\n       * based on if the user the arrow keys.\n       *\n       * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n       */\n      const stepFactor = getStepFactor(event) * stepProp\n\n      const eventKey = event.key\n\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        ArrowUp: () => increment(stepFactor),\n        ArrowDown: () => decrement(stepFactor),\n        Home: () => updateFn(min),\n        End: () => updateFn(max),\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [isValidCharacter, stepProp, increment, decrement, updateFn, min, max],\n  )\n\n  const getStepFactor = <\n    Event extends React.KeyboardEvent | React.WheelEvent | WheelEvent,\n  >(\n    event: Event,\n  ) => {\n    let ratio = 1\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1\n    }\n    if (event.shiftKey) {\n      ratio = 10\n    }\n    return ratio\n  }\n\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n  const ariaValueText = useMemo(() => {\n    const text = getAriaValueText?.(counter.value)\n    if (text != null) return text\n\n    const defaultText = counter.value.toString()\n    // empty string is an invalid ARIA attribute value\n    return !defaultText ? undefined : defaultText\n  }, [counter.value, getAriaValueText])\n\n  /**\n   * Function that clamps the input's value on blur\n   */\n  const validateAndClamp = useCallback(() => {\n    let next = counter.value as string | number\n    if (counter.value === \"\") return\n\n    const valueStartsWithE = /^[eE]/.test(counter.value.toString())\n\n    if (valueStartsWithE) {\n      counter.setValue(\"\")\n    } else {\n      if (counter.valueAsNumber < min) {\n        next = min\n      }\n      if (counter.valueAsNumber > max) {\n        next = max\n      }\n\n      counter.cast(next)\n    }\n  }, [counter, max, min])\n\n  const onInputBlur = useCallback(() => {\n    setFocused(false)\n\n    if (clampValueOnBlur) {\n      validateAndClamp()\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp])\n\n  const focusInput = useCallback(() => {\n    if (focusInputOnChange) {\n      requestAnimationFrame(() => {\n        inputRef.current?.focus()\n      })\n    }\n  }, [focusInputOnChange])\n\n  const spinUp = useCallback(\n    (event: React.PointerEvent) => {\n      event.preventDefault()\n      spinner.up()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const spinDown = useCallback(\n    (event: React.PointerEvent) => {\n      event.preventDefault()\n      spinner.down()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  useEventListener(\n    () => inputRef.current,\n    \"wheel\",\n    (event: WheelEvent) => {\n      const doc = inputRef.current?.ownerDocument ?? document\n      const isInputFocused = doc.activeElement === inputRef.current\n      if (!allowMouseWheel || !isInputFocused) return\n\n      event.preventDefault()\n\n      const stepFactor = getStepFactor(event) * stepProp\n      const direction = Math.sign(event.deltaY)\n\n      if (direction === -1) {\n        increment(stepFactor)\n      } else if (direction === 1) {\n        decrement(stepFactor)\n      }\n    },\n    { passive: false },\n  )\n\n  const getIncrementButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMax)\n      return {\n        ...props,\n        ref: mergeRefs(ref, incrementButtonRef),\n        role: \"button\",\n        tabIndex: -1,\n        onPointerDown: callAllHandlers(props.onPointerDown, (event) => {\n          if (event.button !== 0 || disabled) return\n          spinUp(event)\n        }),\n        onPointerLeave: callAllHandlers(props.onPointerLeave, spinner.stop),\n        onPointerUp: callAllHandlers(props.onPointerUp, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [counter.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled],\n  )\n\n  const getDecrementButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMin)\n      return {\n        ...props,\n        ref: mergeRefs(ref, decrementButtonRef),\n        role: \"button\",\n        tabIndex: -1,\n        onPointerDown: callAllHandlers(props.onPointerDown, (event) => {\n          if (event.button !== 0 || disabled) return\n          spinDown(event)\n        }),\n        onPointerLeave: callAllHandlers(props.onPointerLeave, spinner.stop),\n        onPointerUp: callAllHandlers(props.onPointerUp, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [counter.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled],\n  )\n\n  const getInputProps: PropGetter<InputDOMAttributes, InputDOMAttributes> =\n    useCallback(\n      (props = {}, ref = null) => ({\n        name,\n        inputMode,\n        type: \"text\",\n        pattern,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-label\": ariaLabel,\n        \"aria-describedby\": ariaDescBy,\n        id,\n        disabled: isDisabled,\n        ...props,\n        readOnly: props.readOnly ?? isReadOnly,\n        \"aria-readonly\": props.readOnly ?? isReadOnly,\n        \"aria-required\": props.required ?? isRequired,\n        required: props.required ?? isRequired,\n        ref: mergeRefs(inputRef, ref),\n        value: format(counter.value),\n        role: \"spinbutton\",\n        \"aria-valuemin\": min,\n        \"aria-valuemax\": max,\n        \"aria-valuenow\": Number.isNaN(counter.valueAsNumber)\n          ? undefined\n          : counter.valueAsNumber,\n        \"aria-invalid\": ariaAttr(isInvalid ?? counter.isOutOfRange),\n        \"aria-valuetext\": ariaValueText,\n        autoComplete: \"off\",\n        autoCorrect: \"off\",\n        onChange: callAllHandlers(props.onChange, onChange),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(props.onFocus, _onFocus, () =>\n          setFocused(true),\n        ),\n        onBlur: callAllHandlers(props.onBlur, onBlur, onInputBlur),\n      }),\n      [\n        name,\n        inputMode,\n        pattern,\n        ariaLabelledBy,\n        ariaLabel,\n        format,\n        ariaDescBy,\n        id,\n        isDisabled,\n        isRequired,\n        isReadOnly,\n        isInvalid,\n        counter.value,\n        counter.valueAsNumber,\n        counter.isOutOfRange,\n        min,\n        max,\n        ariaValueText,\n        onChange,\n        onKeyDown,\n        _onFocus,\n        onBlur,\n        onInputBlur,\n      ],\n    )\n\n  return {\n    value: format(counter.value),\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps,\n  }\n}\n\nexport type UseNumberInputReturn = ReturnType<typeof useNumberInput>\n"]},"metadata":{},"sourceType":"module"}