{"ast":null,"code":"'use client';\n\n// src/index.ts\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useState } from \"react\";\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\";\nimport { getOwnerWindow } from \"@chakra-ui/dom-utils\";\nfunction useAnimationState(props) {\n  var isOpen = props.isOpen,\n    ref = props.ref;\n  var _useState = useState(isOpen),\n    _useState2 = _slicedToArray(_useState, 2),\n    mounted = _useState2[0],\n    setMounted = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    once = _useState4[0],\n    setOnce = _useState4[1];\n  useEffect(function () {\n    if (!once) {\n      setMounted(isOpen);\n      setOnce(true);\n    }\n  }, [isOpen, once, mounted]);\n  useEventListener(function () {\n    return ref.current;\n  }, \"animationend\", function () {\n    setMounted(isOpen);\n  });\n  var hidden = isOpen ? false : !mounted;\n  return {\n    present: !hidden,\n    onComplete: function onComplete() {\n      var _a;\n      var win = getOwnerWindow(ref.current);\n      var evt = new win.CustomEvent(\"animationend\", {\n        bubbles: true\n      });\n      (_a = ref.current) == null ? void 0 : _a.dispatchEvent(evt);\n    }\n  };\n}\nexport { useAnimationState };","map":{"version":3,"mappings":";;;;AAAA,SAASA,WAAWC,gBAAgB;AACpC,SAASC,wBAAwB;AACjC,SAASC,sBAAsB;AAMxB,SAASC,kBAAkBC,OAA+B;EAC/D,IAAQC,SAAgBD,MAAhBC;IAAQC,MAAQF,MAARE;EAEhB,gBAA8BN,SAASK,MAAM;IAAAE;IAAtCC;IAASC,UAAU;EAC1B,iBAAwBT,SAAS,KAAK;IAAAU;IAA/BC;IAAMC,OAAO;EAEpBb,UAAU,YAAM;IACd,IAAI,CAACY,MAAM;MACTF,WAAWJ,MAAM;MACjBO,QAAQ,IAAI;IACd;EACF,GAAG,CAACP,QAAQM,MAAMH,OAAO,CAAC;EAE1BP,iBACE;IAAA,OAAMK,IAAIO;EAAA,GACV,gBACA,YAAM;IACJJ,WAAWJ,MAAM;EACnB,CACF;EAEA,IAAMS,SAAST,SAAS,QAAQ,CAACG;EAEjC,OAAO;IACLO,SAAS,CAACD;IACVE,kCAAa;MAjCjB;MAkCM,IAAMC,MAAMf,eAAeI,IAAIO,OAAO;MACtC,IAAMK,MAAM,IAAID,IAAIE,YAAY,gBAAgB;QAAEC,SAAS;MAAK,CAAC;MACjE,UAAIP,YAAJ,mBAAaQ,cAAcH;IAC7B;EACF;AACF","names":["useEffect","useState","useEventListener","getOwnerWindow","useAnimationState","props","isOpen","ref","_useState2","mounted","setMounted","_useState4","once","setOnce","current","hidden","present","onComplete","win","evt","CustomEvent","bubbles","dispatchEvent"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\react-use-animation-state\\src\\index.ts"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\"\nimport { getOwnerWindow } from \"@chakra-ui/dom-utils\"\nexport type UseAnimationStateProps = {\n  isOpen: boolean\n  ref: React.RefObject<HTMLElement>\n}\n\nexport function useAnimationState(props: UseAnimationStateProps) {\n  const { isOpen, ref } = props\n\n  const [mounted, setMounted] = useState(isOpen)\n  const [once, setOnce] = useState(false)\n\n  useEffect(() => {\n    if (!once) {\n      setMounted(isOpen)\n      setOnce(true)\n    }\n  }, [isOpen, once, mounted])\n\n  useEventListener(\n    () => ref.current,\n    \"animationend\",\n    () => {\n      setMounted(isOpen)\n    },\n  )\n\n  const hidden = isOpen ? false : !mounted\n\n  return {\n    present: !hidden,\n    onComplete() {\n      const win = getOwnerWindow(ref.current)\n      const evt = new win.CustomEvent(\"animationend\", { bubbles: true })\n      ref.current?.dispatchEvent(evt)\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}