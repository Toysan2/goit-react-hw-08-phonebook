{"ast":null,"code":"'use client';\n\n// src/use-image.ts\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nfunction useImage(props) {\n  var loading = props.loading,\n    src = props.src,\n    srcSet = props.srcSet,\n    onLoad = props.onLoad,\n    onError = props.onError,\n    crossOrigin = props.crossOrigin,\n    sizes = props.sizes,\n    ignoreFallback = props.ignoreFallback;\n  var _useState = useState(\"pending\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    status = _useState2[0],\n    setStatus = _useState2[1];\n  useEffect(function () {\n    setStatus(src ? \"loading\" : \"pending\");\n  }, [src]);\n  var imageRef = useRef();\n  var load = useCallback(function () {\n    if (!src) return;\n    flush();\n    var img = new Image();\n    img.src = src;\n    if (crossOrigin) img.crossOrigin = crossOrigin;\n    if (srcSet) img.srcset = srcSet;\n    if (sizes) img.sizes = sizes;\n    if (loading) img.loading = loading;\n    img.onload = function (event) {\n      flush();\n      setStatus(\"loaded\");\n      onLoad == null ? void 0 : onLoad(event);\n    };\n    img.onerror = function (error) {\n      flush();\n      setStatus(\"failed\");\n      onError == null ? void 0 : onError(error);\n    };\n    imageRef.current = img;\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading]);\n  var flush = function flush() {\n    if (imageRef.current) {\n      imageRef.current.onload = null;\n      imageRef.current.onerror = null;\n      imageRef.current = null;\n    }\n  };\n  useSafeLayoutEffect(function () {\n    if (ignoreFallback) return void 0;\n    if (status === \"loading\") {\n      load();\n    }\n    return function () {\n      flush();\n    };\n  }, [status, load, ignoreFallback]);\n  return ignoreFallback ? \"loaded\" : status;\n}\nvar shouldShowFallbackImage = function shouldShowFallbackImage(status, fallbackStrategy) {\n  return status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\" || status === \"failed\" && fallbackStrategy === \"onError\";\n};\nexport { useImage, shouldShowFallbackImage };","map":{"version":3,"mappings":";;;;AAAA,SAASA,2BAA2B;AACpC,SAASC,aAAaC,WAAWC,QAAQC,gBAAgB;AA6DlD,SAASC,SAASC,OAAsB;EAC7C,IACEC,UAQED,MARFC;IACAC,MAOEF,MAPFE;IACAC,SAMEH,MANFG;IACAC,SAKEJ,MALFI;IACAC,UAIEL,MAJFK;IACAC,cAGEN,MAHFM;IACAC,QAEEP,MAFFO;IACAC,iBACER,MADFQ;EAGF,gBAA4BV,SAAiB,SAAS;IAAAW;IAA/CC;IAAQC,SAAS;EAExBf,UAAU,YAAM;IACde,UAAUT,MAAM,YAAY,SAAS;EACvC,GAAG,CAACA,GAAG,CAAC;EAER,IAAMU,WAAWf,OAAgC;EAEjD,IAAMgB,OAAOlB,YAAY,YAAM;IAC7B,IAAI,CAACO,KAAK;IAEVY,MAAM;IAEN,IAAMC,MAAM,IAAIC,MAAM;IACtBD,IAAIb,MAAMA;IACV,IAAII,aAAaS,IAAIT,cAAcA;IACnC,IAAIH,QAAQY,IAAIE,SAASd;IACzB,IAAII,OAAOQ,IAAIR,QAAQA;IACvB,IAAIN,SAASc,IAAId,UAAUA;IAE3Bc,IAAIG,SAAS,UAACC,OAAU;MACtBL,MAAM;MACNH,UAAU,QAAQ;MAClBP,iCAASe;IACX;IACAJ,IAAIK,UAAU,UAACC,OAAU;MACvBP,MAAM;MACNH,UAAU,QAAQ;MAClBN,mCAAUgB;IACZ;IAEAT,SAASU,UAAUP;EACrB,GAAG,CAACb,KAAKI,aAAaH,QAAQI,OAAOH,QAAQC,SAASJ,OAAO,CAAC;EAE9D,IAAMa,QAAQ,SAARA,QAAc;IAClB,IAAIF,SAASU,SAAS;MACpBV,SAASU,QAAQJ,SAAS;MAC1BN,SAASU,QAAQF,UAAU;MAC3BR,SAASU,UAAU;IACrB;EACF;EAEA5B,oBAAoB,YAAM;IAKxB,IAAIc,gBAAgB,OAAO;IAE3B,IAAIE,WAAW,WAAW;MACxBG,KAAK;IACP;IACA,OAAO,YAAM;MACXC,MAAM;IACR;EACF,GAAG,CAACJ,QAAQG,MAAML,cAAc,CAAC;EAMjC,OAAOA,iBAAiB,WAAWE;AACrC;AAEO,IAAMa,0BAA0B,SAA1BA,wBACXb,QACAc;EAAA,OAECd,WAAW,YAAYc,qBAAqB,uBAC5Cd,WAAW,YAAYc,qBAAqB;AAAA","names":["useSafeLayoutEffect","useCallback","useEffect","useRef","useState","useImage","props","loading","src","srcSet","onLoad","onError","crossOrigin","sizes","ignoreFallback","_useState2","status","setStatus","imageRef","load","flush","img","Image","srcset","onload","event","onerror","error","current","shouldShowFallbackImage","fallbackStrategy"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\image\\src\\use-image.ts"],"sourcesContent":["import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\ntype NativeImageProps = React.ImgHTMLAttributes<HTMLImageElement>\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?: NativeImageProps[\"onLoad\"]\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?: NativeImageProps[\"onError\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: NativeImageProps[\"crossOrigin\"]\n  loading?: NativeImageProps[\"loading\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\nexport type FallbackStrategy = \"onError\" | \"beforeLoadOrError\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and lets us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n    img.src = src\n    if (crossOrigin) img.crossOrigin = crossOrigin\n    if (srcSet) img.srcset = srcSet\n    if (sizes) img.sizes = sizes\n    if (loading) img.loading = loading\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.(event as unknown as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport const shouldShowFallbackImage = (\n  status: Status,\n  fallbackStrategy: FallbackStrategy,\n) =>\n  (status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\") ||\n  (status === \"failed\" && fallbackStrategy === \"onError\")\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n"]},"metadata":{},"sourceType":"module"}