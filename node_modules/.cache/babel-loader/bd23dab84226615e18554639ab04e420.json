{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _createForOfIteratorHelper from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nvar _excluded = [\"fallbackSrc\", \"fallback\", \"src\", \"srcSet\", \"align\", \"fit\", \"loading\", \"ignoreFallback\", \"crossOrigin\", \"fallbackStrategy\", \"referrerPolicy\"];\nimport { NativeImage } from \"./chunk-X3PS6RUF.mjs\";\nimport { shouldShowFallbackImage, useImage } from \"./chunk-SPIKMR6I.mjs\";\n\n// src/image.tsx\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\n\n// ../../utilities/object-utils/src/omit.ts\nfunction omit(object) {\n  var keysToOmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var clone = Object.assign({}, object);\n  var _iterator = _createForOfIteratorHelper(keysToOmit),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      if (key in clone) {\n        delete clone[key];\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return clone;\n}\n\n// src/image.tsx\nimport { jsx } from \"react/jsx-runtime\";\nvar Image = forwardRef(function Image2(props, ref) {\n  var fallbackSrc = props.fallbackSrc,\n    fallback = props.fallback,\n    src = props.src,\n    srcSet = props.srcSet,\n    align = props.align,\n    fit = props.fit,\n    loading = props.loading,\n    ignoreFallback = props.ignoreFallback,\n    crossOrigin = props.crossOrigin,\n    _props$fallbackStrate = props.fallbackStrategy,\n    fallbackStrategy = _props$fallbackStrate === void 0 ? \"beforeLoadOrError\" : _props$fallbackStrate,\n    referrerPolicy = props.referrerPolicy,\n    rest = _objectWithoutProperties(props, _excluded);\n  var providedFallback = fallbackSrc !== void 0 || fallback !== void 0;\n  var shouldIgnoreFallbackImage = loading != null ||\n  // use can opt out of fallback image\n  ignoreFallback ||\n  // if the user doesn't provide any kind of fallback we should ignore it\n  !providedFallback;\n  var status = useImage(_objectSpread(_objectSpread({}, props), {}, {\n    crossOrigin: crossOrigin,\n    ignoreFallback: shouldIgnoreFallbackImage\n  }));\n  var showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy);\n  var shared = _objectSpread({\n    ref: ref,\n    objectFit: fit,\n    objectPosition: align\n  }, shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"]));\n  if (showFallbackImage) {\n    if (fallback) return fallback;\n    return /* @__PURE__ */jsx(chakra.img, _objectSpread({\n      as: NativeImage,\n      className: \"chakra-image__placeholder\",\n      src: fallbackSrc\n    }, shared));\n  }\n  return /* @__PURE__ */jsx(chakra.img, _objectSpread({\n    as: NativeImage,\n    src: src,\n    srcSet: srcSet,\n    crossOrigin: crossOrigin,\n    loading: loading,\n    referrerPolicy: referrerPolicy,\n    className: \"chakra-image\"\n  }, shared));\n});\nImage.displayName = \"Image\";\nexport { Image };","map":{"version":3,"mappings":";;;;;;;;;;AAAA,SACEA,QAEAC,kBAEK;;;ACLA,SAASC,KACdC,QAEA;EAAA,IADAC,iFAAkB,EAAC;EAEnB,IAAMC,QAAiCC,OAAOC,OAAO,CAAC,GAAGJ,MAAM;EAAA,2CAC7CC;IAAAI;EAAA;IAAlB,oDAA8B;MAAA,IAAnBC;MACT,IAAIA,OAAOJ,OAAO;QAChB,OAAOA,MAAMI,GAAa;MAC5B;IACF;EAAA;IAAAC;EAAA;IAAAA;EAAA;EACA,OAAOL;AACT;;;ADyHM;AAxDC,IAAMM,QAAQV,WAA8B,SAASU,OAAMC,OAAOC,KAAK;EAC5E,IACEC,cAYEF,MAZFE;IACAC,WAWEH,MAXFG;IACAC,MAUEJ,MAVFI;IACAC,SASEL,MATFK;IACAC,QAQEN,MARFM;IACAC,MAOEP,MAPFO;IACAC,UAMER,MANFQ;IACAC,iBAKET,MALFS;IACAC,cAIEV,MAJFU;IAAAC,wBAIEX,MAHFY;IAAAA,sDAAmB;IACnBC,iBAEEb,MAFFa;IACGC,gCACDd;EAEJ,IAAMe,mBAAmBb,gBAAgB,UAAaC,aAAa;EAOnE,IAAMa,4BACJR,WAAW;EAAA;EAEXC;EAAA;EAEA,CAACM;EAKH,IAAME,SAASC,yCACVlB;IACHU;IACAD,gBAAgBO;EAAA,EACjB;EAED,IAAMG,oBAAoBC,wBAAwBH,QAAQL,gBAAgB;EAE1E,IAAMS;IACJpB;IACAqB,WAAWf;IACXgB,gBAAgBjB;EAAA,GACZU,4BAA4BF,OAAOxB,KAAKwB,MAAM,CAAC,WAAW,QAAQ,CAAC,EACzE;EAEA,IAAIK,mBAAmB;IAKrB,IAAIhB,UAAU,OAAOA;IAErB,OACE,mBAACf,OAAOoC;MACNC,IAAIC;MACJC,WAAU;MACVvB,KAAKF;IAAA,GACDmB,OACN;EAEJ;EAEA,OACE,mBAACjC,OAAOoC;IACNC,IAAIC;IACJtB;IACAC;IACAK;IACAF;IACAK;IACAc,WAAU;EAAA,GACNN,OACN;AAEJ,CAAC;AAEDtB,MAAM6B,cAAc","names":["chakra","forwardRef","omit","object","keysToOmit","clone","Object","assign","_step","key","_iterator","Image","props","ref","fallbackSrc","fallback","src","srcSet","align","fit","loading","ignoreFallback","crossOrigin","_props$fallbackStrate","fallbackStrategy","referrerPolicy","rest","providedFallback","shouldIgnoreFallbackImage","status","useImage","showFallbackImage","shouldShowFallbackImage","shared","objectFit","objectPosition","img","as","NativeImage","className","displayName"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\image\\src\\image.tsx","E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\utilities\\object-utils\\src\\omit.ts"],"sourcesContent":["import {\n  chakra,\n  SystemProps,\n  forwardRef,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { omit } from \"@chakra-ui/object-utils\"\nimport {\n  FallbackStrategy,\n  shouldShowFallbackImage,\n  useImage,\n  UseImageProps,\n} from \"./use-image\"\nimport { NativeImage, NativeImageOptions } from \"./native-image\"\n\ninterface ImageOptions extends NativeImageOptions {\n  /**\n   * Fallback image `src` to show if image is loading or image fails.\n   *\n   * Note ðŸš¨: We recommend you use a local image\n   */\n  fallbackSrc?: string\n  /**\n   * Fallback element to show if image is loading or image fails.\n   * @type React.ReactElement\n   */\n  fallback?: React.ReactElement\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * How the image to fit within its bounds.\n   * It maps to css `object-fit` property.\n   * @type SystemProps[\"objectFit\"]\n   */\n  fit?: SystemProps[\"objectFit\"]\n  /**\n   * How to align the image within its bounds.\n   * It maps to css `object-position` property.\n   * @type SystemProps[\"objectPosition\"]\n   */\n  align?: SystemProps[\"objectPosition\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n\n  /**\n   * - beforeLoadOrError(default): loads the fallbackImage while loading the src\n   * - onError: loads the fallbackImage only if there is an error fetching the src\n   *\n   * @default \"beforeLoadOrError\"\n   * @see Issue https://github.com/chakra-ui/chakra-ui/issues/5581\n   */\n  fallbackStrategy?: FallbackStrategy\n  /**\n   * Defining which referrer is sent when fetching the resource.\n   * @type React.HTMLAttributeReferrerPolicy\n   */\n  referrerPolicy?: React.HTMLAttributeReferrerPolicy\n}\n\nexport interface ImageProps\n  extends UseImageProps,\n    Omit<HTMLChakraProps<\"img\">, keyof UseImageProps>,\n    ImageOptions {}\n\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/image\n */\nexport const Image = forwardRef<ImageProps, \"img\">(function Image(props, ref) {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    fallbackStrategy = \"beforeLoadOrError\",\n    referrerPolicy,\n    ...rest\n  } = props\n\n  const providedFallback = fallbackSrc !== undefined || fallback !== undefined\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   *\n   * shouldIgnoreFallbackImage determines if we have the possibility to render a fallback image\n   */\n  const shouldIgnoreFallbackImage =\n    loading != null ||\n    // use can opt out of fallback image\n    ignoreFallback ||\n    // if the user doesn't provide any kind of fallback we should ignore it\n    !providedFallback\n\n  /**\n   * returns `loaded` if fallback is ignored\n   */\n  const status = useImage({\n    ...props,\n    crossOrigin,\n    ignoreFallback: shouldIgnoreFallbackImage,\n  })\n\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy)\n\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"])),\n  }\n\n  if (showFallbackImage) {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback\n\n    return (\n      <chakra.img\n        as={NativeImage}\n        className=\"chakra-image__placeholder\"\n        src={fallbackSrc}\n        {...shared}\n      />\n    )\n  }\n\n  return (\n    <chakra.img\n      as={NativeImage}\n      src={src}\n      srcSet={srcSet}\n      crossOrigin={crossOrigin}\n      loading={loading}\n      referrerPolicy={referrerPolicy}\n      className=\"chakra-image\"\n      {...shared}\n    />\n  )\n})\n\nImage.displayName = \"Image\"\n","export function omit<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToOmit: K[] = [],\n) {\n  const clone: Record<string, unknown> = Object.assign({}, object)\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key as string]\n    }\n  }\n  return clone as Omit<T, K>\n}\n"]},"metadata":{},"sourceType":"module"}