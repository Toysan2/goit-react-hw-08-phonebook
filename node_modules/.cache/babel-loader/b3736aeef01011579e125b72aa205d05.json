{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"noOfLines\", \"spacing\", \"skeletonHeight\", \"className\", \"startColor\", \"endColor\", \"isLoaded\", \"fadeDuration\", \"speed\", \"variant\", \"size\", \"colorScheme\", \"children\"];\nimport { Skeleton } from \"./chunk-GOJLRND4.mjs\";\n\n// src/skeleton-text.tsx\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\nimport { chakra } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction range(count) {\n  return Array(count).fill(1).map(function (_, index) {\n    return index + 1;\n  });\n}\nvar defaultNoOfLines = 3;\nvar SkeletonText = function SkeletonText(props) {\n  var _props$noOfLines = props.noOfLines,\n    noOfLines = _props$noOfLines === void 0 ? defaultNoOfLines : _props$noOfLines,\n    _props$spacing = props.spacing,\n    spacing = _props$spacing === void 0 ? \"0.5rem\" : _props$spacing,\n    _props$skeletonHeight = props.skeletonHeight,\n    skeletonHeight = _props$skeletonHeight === void 0 ? \"0.5rem\" : _props$skeletonHeight,\n    className = props.className,\n    startColor = props.startColor,\n    endColor = props.endColor,\n    isLoaded = props.isLoaded,\n    fadeDuration = props.fadeDuration,\n    speed = props.speed,\n    variant = props.variant,\n    size = props.size,\n    colorScheme = props.colorScheme,\n    children = props.children,\n    rest = _objectWithoutProperties(props, _excluded);\n  var noOfLinesValue = useBreakpointValue(typeof noOfLines === \"number\" ? [noOfLines] : noOfLines) || defaultNoOfLines;\n  var numbers = range(noOfLinesValue);\n  var getWidth = function getWidth(index) {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\";\n    }\n    return \"100%\";\n  };\n  var _className = cx(\"chakra-skeleton__group\", className);\n  return /* @__PURE__ */jsx(chakra.div, _objectSpread(_objectSpread({\n    className: _className\n  }, rest), {}, {\n    children: numbers.map(function (number, index) {\n      if (isLoaded && index > 0) {\n        return null;\n      }\n      var sizeProps = isLoaded ? null : {\n        mb: number === numbers.length ? \"0\" : spacing,\n        width: getWidth(number),\n        height: skeletonHeight\n      };\n      return /* @__PURE__ */jsx(Skeleton, _objectSpread(_objectSpread({\n        startColor: startColor,\n        endColor: endColor,\n        isLoaded: isLoaded,\n        fadeDuration: fadeDuration,\n        speed: speed,\n        variant: variant,\n        size: size,\n        colorScheme: colorScheme\n      }, sizeProps), {}, {\n        // allows animating the children\n        children: index === 0 ? children : void 0\n      }), numbers.length.toString() + number);\n    })\n  }));\n};\nSkeletonText.displayName = \"SkeletonText\";\nexport { SkeletonText };","map":{"version":3,"mappings":";;;;;;;;AAAA,SAASA,0BAA0B;AACnC,SAASC,cAAc;AACvB,SAASC,UAAU;AAyET;AAtEV,SAASC,MAAMC,OAAe;EAC5B,OAAOC,MAAMD,KAAK,EACfE,KAAK,CAAC,EACNC,IAAI,UAACC,GAAGC;IAAA,OAAUA,QAAQ,CAAC;EAAA;AAChC;AASA,IAAMC,mBAAmB;AAOlB,IAAMC,eAA4C,SAA5CA,aAA6CC,OAAU;EAClE,uBAeIA,MAdFC;IAAAA,0CAAYH;IAAAI,iBAcVF,MAbFG;IAAAA,sCAAU;IAAAC,wBAaRJ,MAZFK;IAAAA,oDAAiB;IACjBC,YAWEN,MAXFM;IACAC,aAUEP,MAVFO;IACAC,WASER,MATFQ;IACAC,WAQET,MARFS;IACAC,eAOEV,MAPFU;IACAC,QAMEX,MANFW;IACAC,UAKEZ,MALFY;IACAC,OAIEb,MAJFa;IACAC,cAGEd,MAHFc;IACAC,WAEEf,MAFFe;IACGC,gCACDhB;EAEJ,IAAMiB,iBACJ7B,mBACE,OAAOa,cAAc,WAAW,CAACA,SAAS,IAAIA,SAChD,KAAKH;EACP,IAAMoB,UAAU3B,MAAM0B,cAAc;EAEpC,IAAME,WAAW,SAAXA,SAAYtB,OAAkB;IAClC,IAAIoB,iBAAiB,GAAG;MACtB,OAAOpB,UAAUqB,QAAQE,SAAS,QAAQ;IAC5C;IACA,OAAO;EACT;EAEA,IAAMC,aAAa/B,GAAG,0BAA0BgB,SAAS;EAEzD,OACE,mBAACjB,OAAOiC;IAAIhB,WAAWe;EAAA,GAAgBL;IACpCD,kBAAQpB,IAAI,UAAC4B,QAAQ1B,OAAU;MAC9B,IAAIY,YAAYZ,QAAQ,GAAG;QAEzB,OAAO;MACT;MAEA,IAAM2B,YAAYf,WACd,OACA;QACEgB,IAAIF,WAAWL,QAAQE,SAAS,MAAMjB;QACtCuB,OAAOP,SAASI,MAAM;QACtBI,QAAQtB;MACV;MAEJ,OACE,mBAACuB;QAECrB;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MAAA,GACIU;QAAA;QAIFT,oBAAU,IAAIA,WAAW;MAAA,IAbtBG,QAAQE,OAAOS,SAAS,IAAIN,MAenC;IAEJ,CAAC;EAAA,EACH;AAEJ;AAEAxB,aAAa+B,cAAc","names":["useBreakpointValue","chakra","cx","range","count","Array","fill","map","_","index","defaultNoOfLines","SkeletonText","props","noOfLines","_props$spacing","spacing","_props$skeletonHeight","skeletonHeight","className","startColor","endColor","isLoaded","fadeDuration","speed","variant","size","colorScheme","children","rest","noOfLinesValue","numbers","getWidth","length","_className","div","number","sizeProps","mb","width","height","Skeleton","toString","displayName"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\skeleton\\src\\skeleton-text.tsx"],"sourcesContent":["import { useBreakpointValue } from \"@chakra-ui/media-query\"\nimport { chakra } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { SkeletonProps, Skeleton } from \"./skeleton\"\n\nfunction range(count: number) {\n  return Array(count)\n    .fill(1)\n    .map((_, index) => index + 1)\n}\n\nexport interface SkeletonTextProps extends SkeletonProps {\n  spacing?: SkeletonProps[\"margin\"]\n  skeletonHeight?: SkeletonProps[\"height\"]\n  startColor?: SkeletonProps[\"startColor\"]\n  endColor?: SkeletonProps[\"endColor\"]\n  isLoaded?: SkeletonProps[\"isLoaded\"]\n}\nconst defaultNoOfLines = 3\n/**\n * `SkeletonText` is used to display the loading state in the form of text.\n *\n * @see Docs https://chakra-ui.com/docs/components/skeleton\n */\n\nexport const SkeletonText: React.FC<SkeletonTextProps> = (props) => {\n  const {\n    noOfLines = defaultNoOfLines,\n    spacing = \"0.5rem\",\n    skeletonHeight = \"0.5rem\",\n    className,\n    startColor,\n    endColor,\n    isLoaded,\n    fadeDuration,\n    speed,\n    variant,\n    size,\n    colorScheme,\n    children,\n    ...rest\n  } = props\n\n  const noOfLinesValue =\n    useBreakpointValue(\n      typeof noOfLines === \"number\" ? [noOfLines] : noOfLines,\n    ) || defaultNoOfLines\n  const numbers = range(noOfLinesValue)\n\n  const getWidth = (index: number) => {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\"\n    }\n    return \"100%\"\n  }\n\n  const _className = cx(\"chakra-skeleton__group\", className)\n\n  return (\n    <chakra.div className={_className} {...rest}>\n      {numbers.map((number, index) => {\n        if (isLoaded && index > 0) {\n          // skip other lines\n          return null\n        }\n\n        const sizeProps = isLoaded\n          ? null\n          : {\n              mb: number === numbers.length ? \"0\" : spacing,\n              width: getWidth(number),\n              height: skeletonHeight,\n            }\n\n        return (\n          <Skeleton\n            key={numbers.length.toString() + number}\n            startColor={startColor}\n            endColor={endColor}\n            isLoaded={isLoaded}\n            fadeDuration={fadeDuration}\n            speed={speed}\n            variant={variant}\n            size={size}\n            colorScheme={colorScheme}\n            {...sizeProps}\n          >\n            {\n              // allows animating the children\n              index === 0 ? children : undefined\n            }\n          </Skeleton>\n        )\n      })}\n    </chakra.div>\n  )\n}\n\nSkeletonText.displayName = \"SkeletonText\"\n"]},"metadata":{},"sourceType":"module"}