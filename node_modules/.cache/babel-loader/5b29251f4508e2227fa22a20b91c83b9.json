{"ast":null,"code":"import _toConsumableArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n// src/color.ts\nimport { getCSSVar } from \"@chakra-ui/styled-system\";\nimport { toHex, parseToRgba, transparentize as setTransparency, mix, darken as reduceLightness, lighten as increaseLightness, getContrast, parseToHsla, hsla, getLuminance } from \"color2k\";\n\n// ../../../node_modules/.pnpm/dlv@1.1.3/node_modules/dlv/dist/dlv.es.js\nfunction dlv_es_default(t, e, l, n, r) {\n  for (e = e.split ? e.split(\".\") : e, n = 0; n < e.length; n++) {\n    t = t ? t[e[n]] : r;\n  }\n  return t === r ? l : t;\n}\n\n// src/color.ts\nvar isEmptyObject = function isEmptyObject(obj) {\n  return Object.keys(obj).length === 0;\n};\nvar getColor = function getColor(theme, color, fallback) {\n  var hex = dlv_es_default(theme, \"colors.\".concat(color), color);\n  try {\n    toHex(hex);\n    return hex;\n  } catch (_unused) {\n    return fallback != null ? fallback : \"#000000\";\n  }\n};\nvar getColorVar = function getColorVar(theme, color, fallback) {\n  var _a;\n  return (_a = getCSSVar(theme, \"colors\", color)) != null ? _a : fallback;\n};\nvar getBrightness = function getBrightness(color) {\n  var _parseToRgba = parseToRgba(color),\n    _parseToRgba2 = _slicedToArray(_parseToRgba, 3),\n    r = _parseToRgba2[0],\n    g = _parseToRgba2[1],\n    b = _parseToRgba2[2];\n  return (r * 299 + g * 587 + b * 114) / 1e3;\n};\nvar tone = function tone(color) {\n  return function (theme) {\n    var hex = getColor(theme, color);\n    var brightness = getBrightness(hex);\n    var isDark2 = brightness < 128;\n    return isDark2 ? \"dark\" : \"light\";\n  };\n};\nvar isDark = function isDark(color) {\n  return function (theme) {\n    return tone(color)(theme) === \"dark\";\n  };\n};\nvar isLight = function isLight(color) {\n  return function (theme) {\n    return tone(color)(theme) === \"light\";\n  };\n};\nvar transparentize = function transparentize(color, opacity) {\n  return function (theme) {\n    var raw = getColor(theme, color);\n    return setTransparency(raw, 1 - opacity);\n  };\n};\nvar whiten = function whiten(color, amount) {\n  return function (theme) {\n    var raw = getColor(theme, color);\n    return toHex(mix(raw, \"#fff\", amount));\n  };\n};\nvar blacken = function blacken(color, amount) {\n  return function (theme) {\n    var raw = getColor(theme, color);\n    return toHex(mix(raw, \"#000\", amount / 100));\n  };\n};\nvar darken = function darken(color, amount) {\n  return function (theme) {\n    var raw = getColor(theme, color);\n    return toHex(reduceLightness(raw, amount / 100));\n  };\n};\nvar lighten = function lighten(color, amount) {\n  return function (theme) {\n    var raw = getColor(theme, color);\n    toHex(increaseLightness(raw, amount / 100));\n  };\n};\nvar contrast = function contrast(fg, bg) {\n  return function (theme) {\n    return getContrast(getColor(theme, bg), getColor(theme, fg));\n  };\n};\nvar isAccessible = function isAccessible(textColor, bgColor, options) {\n  return function (theme) {\n    return isReadable(getColor(theme, bgColor), getColor(theme, textColor), options);\n  };\n};\nfunction isReadable(color1, color2) {\n  var wcag2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    level: \"AA\",\n    size: \"small\"\n  };\n  var _a, _b;\n  var readabilityLevel = readability(color1, color2);\n  switch (((_a = wcag2.level) != null ? _a : \"AA\") + ((_b = wcag2.size) != null ? _b : \"small\")) {\n    case \"AAsmall\":\n    case \"AAAlarge\":\n      return readabilityLevel >= 4.5;\n    case \"AAlarge\":\n      return readabilityLevel >= 3;\n    case \"AAAsmall\":\n      return readabilityLevel >= 7;\n    default:\n      return false;\n  }\n}\nfunction readability(color1, color2) {\n  return (Math.max(getLuminance(color1), getLuminance(color2)) + 0.05) / (Math.min(getLuminance(color1), getLuminance(color2)) + 0.05);\n}\nvar complementary = function complementary(color) {\n  return function (theme) {\n    var raw = getColor(theme, color);\n    var hsl = parseToHsla(raw);\n    var complementHsl = Object.assign(hsl, [(hsl[0] + 180) % 360]);\n    return toHex(hsla.apply(void 0, _toConsumableArray(complementHsl)));\n  };\n};\nfunction generateStripe() {\n  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"1rem\";\n  var color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"rgba(255, 255, 255, 0.15)\";\n  return {\n    backgroundImage: \"linear-gradient(\\n    45deg,\\n    \".concat(color, \" 25%,\\n    transparent 25%,\\n    transparent 50%,\\n    \").concat(color, \" 50%,\\n    \").concat(color, \" 75%,\\n    transparent 75%,\\n    transparent\\n  )\"),\n    backgroundSize: \"\".concat(size, \" \").concat(size)\n  };\n}\nvar randomHex = function randomHex() {\n  return \"#\".concat(Math.floor(Math.random() * 16777215).toString(16).padEnd(6, \"0\"));\n};\nfunction randomColor(opts) {\n  var fallback = randomHex();\n  if (!opts || isEmptyObject(opts)) {\n    return fallback;\n  }\n  if (opts.string && opts.colors) {\n    return randomColorFromList(opts.string, opts.colors);\n  }\n  if (opts.string && !opts.colors) {\n    return randomColorFromString(opts.string);\n  }\n  if (opts.colors && !opts.string) {\n    return randomFromList(opts.colors);\n  }\n  return fallback;\n}\nfunction randomColorFromString(str) {\n  var hash = 0;\n  if (str.length === 0) return hash.toString();\n  for (var i = 0; i < str.length; i += 1) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    hash = hash & hash;\n  }\n  var color = \"#\";\n  for (var j = 0; j < 3; j += 1) {\n    var value = hash >> j * 8 & 255;\n    color += \"00\".concat(value.toString(16)).substr(-2);\n  }\n  return color;\n}\nfunction randomColorFromList(str, list) {\n  var index = 0;\n  if (str.length === 0) return list[0];\n  for (var i = 0; i < str.length; i += 1) {\n    index = str.charCodeAt(i) + ((index << 5) - index);\n    index = index & index;\n  }\n  index = (index % list.length + list.length) % list.length;\n  return list[index];\n}\nfunction randomFromList(list) {\n  return list[Math.floor(Math.random() * list.length)];\n}\nexport { getColor, getColorVar, tone, isDark, isLight, transparentize, whiten, blacken, darken, lighten, contrast, isAccessible, isReadable, readability, complementary, generateStripe, randomColor };","map":{"version":3,"mappings":"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","names":["getCSSVar","toHex","parseToRgba","transparentize","setTransparency","mix","darken","reduceLightness","lighten","increaseLightness","getContrast","parseToHsla","hsla","getLuminance","obj","key","def","p","undef","split","length","isEmptyObject","Object","keys","getColor","theme","color","fallback","hex","dlv_es_default","getColorVar","_a","getBrightness","_parseToRgba2","r","g","b","tone","brightness","isDark","isLight","opacity","raw","whiten","amount","blacken","contrast","fg","bg","isAccessible","textColor","bgColor","options","isReadable","color1","color2","wcag2","level","size","readabilityLevel","readability","_b","Math","max","min","complementary","hsl","complementHsl","assign","generateStripe","backgroundImage","backgroundSize","randomHex","floor","random","toString","padEnd","randomColor","opts","string","colors","randomColorFromList","randomColorFromString","randomFromList","str","hash","i","charCodeAt","j","value","substr","list","index"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\theme-tools\\src\\color.ts","E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\.pnpm\\dlv@1.1.3\\node_modules\\dlv\\index.js"],"sourcesContent":["import { getCSSVar } from \"@chakra-ui/styled-system\"\nimport {\n  toHex,\n  parseToRgba,\n  transparentize as setTransparency,\n  mix,\n  darken as reduceLightness,\n  lighten as increaseLightness,\n  getContrast,\n  parseToHsla,\n  hsla,\n  getLuminance,\n} from \"color2k\"\n\nimport get from \"dlv\"\n\ntype Dict = { [key: string]: any }\nconst isEmptyObject = (obj: any) => Object.keys(obj).length === 0\n\n/**\n * Get the color raw value from theme\n * @param theme - the theme object\n * @param color - the color path (\"green.200\")\n * @param fallback - the fallback color\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const getColor = (theme: Dict, color: string, fallback?: string) => {\n  const hex = get(theme, `colors.${color}`, color)\n  try {\n    toHex(hex)\n    return hex\n  } catch {\n    // returning black to stay consistent with TinyColor behaviour so as to prevent breaking change\n    return fallback ?? \"#000000\"\n  }\n}\n\n/**\n * Get the color css variable from theme\n */\nexport const getColorVar = (theme: Dict, color: string, fallback?: string) => {\n  return getCSSVar(theme, \"colors\", color) ?? fallback\n}\n\nconst getBrightness = (color: string) => {\n  const [r, g, b] = parseToRgba(color)\n  // http://www.w3.org/TR/AERT#color-contrast\n  return (r * 299 + g * 587 + b * 114) / 1000\n}\n\n/**\n * Determines if the tone of given color is \"light\" or \"dark\"\n * @param color - the color in hex, rgb, or hsl\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const tone = (color: string) => (theme: Dict) => {\n  const hex = getColor(theme, color)\n  const brightness = getBrightness(hex)\n  const isDark = brightness < 128\n  return isDark ? \"dark\" : \"light\"\n}\n\n/**\n * Determines if a color tone is \"dark\"\n * @param color - the color in hex, rgb, or hsl\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const isDark = (color: string) => (theme: Dict) =>\n  tone(color)(theme) === \"dark\"\n\n/**\n * Determines if a color tone is \"light\"\n * @param color - the color in hex, rgb, or hsl\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const isLight = (color: string) => (theme: Dict) =>\n  tone(color)(theme) === \"light\"\n\n/**\n * Make a color transparent\n * @param color - the color in hex, rgb, or hsl\n * @param opacity - the amount of opacity the color should have (0-1)\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const transparentize =\n  (color: string, opacity: number) => (theme: Dict) => {\n    const raw = getColor(theme, color)\n    return setTransparency(raw, 1 - opacity)\n  }\n\n/**\n * Add white to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount white to add (0-100)\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const whiten = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  return toHex(mix(raw, \"#fff\", amount))\n}\n\n/**\n * Add black to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount black to add (0-100)\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const blacken = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  return toHex(mix(raw, \"#000\", amount / 100))\n}\n\n/**\n * Darken a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to darken (0-100)\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const darken = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  return toHex(reduceLightness(raw, amount / 100))\n}\n\n/**\n * Lighten a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to lighten (0-100)\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const lighten = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  toHex(increaseLightness(raw, amount / 100))\n}\n\n/**\n * Checks the contract ratio of between 2 colors,\n * based on the Web Content Accessibility Guidelines (Version 2.0).\n *\n * @param fg - the foreground or text color\n * @param bg - the background color\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const contrast = (fg: string, bg: string) => (theme: Dict) =>\n  getContrast(getColor(theme, bg), getColor(theme, fg))\n\ninterface WCAG2Params {\n  level?: \"AA\" | \"AAA\"\n  size?: \"large\" | \"small\"\n}\n\n/**\n * Checks if a color meets the Web Content Accessibility\n * Guidelines (Version 2.0) for contrast ratio.\n *\n * @param textColor - the foreground or text color\n * @param bgColor - the background color\n * @param options\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const isAccessible =\n  (textColor: string, bgColor: string, options?: WCAG2Params) =>\n  (theme: Dict) =>\n    isReadable(getColor(theme, bgColor), getColor(theme, textColor), options)\n\nexport function isReadable(\n  color1: string,\n  color2: string,\n  wcag2: WCAG2Params = { level: \"AA\", size: \"small\" },\n): boolean {\n  const readabilityLevel = readability(color1, color2)\n  switch ((wcag2.level ?? \"AA\") + (wcag2.size ?? \"small\")) {\n    case \"AAsmall\":\n    case \"AAAlarge\":\n      return readabilityLevel >= 4.5\n    case \"AAlarge\":\n      return readabilityLevel >= 3\n    case \"AAAsmall\":\n      return readabilityLevel >= 7\n    default:\n      return false\n  }\n}\n\nexport function readability(color1: string, color2: string): number {\n  return (\n    (Math.max(getLuminance(color1), getLuminance(color2)) + 0.05) /\n    (Math.min(getLuminance(color1), getLuminance(color2)) + 0.05)\n  )\n}\n/**\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const complementary = (color: string) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  const hsl = parseToHsla(raw)\n  const complementHsl: [number, number, number, number] = Object.assign(hsl, [\n    (hsl[0] + 180) % 360,\n  ])\n  return toHex(hsla(...complementHsl))\n}\n\nexport function generateStripe(\n  size = \"1rem\",\n  color = \"rgba(255, 255, 255, 0.15)\",\n) {\n  return {\n    backgroundImage: `linear-gradient(\n    45deg,\n    ${color} 25%,\n    transparent 25%,\n    transparent 50%,\n    ${color} 50%,\n    ${color} 75%,\n    transparent 75%,\n    transparent\n  )`,\n    backgroundSize: `${size} ${size}`,\n  }\n}\n\ninterface RandomColorOptions {\n  /**\n   * If passed, string will be used to generate\n   * random color\n   */\n  string?: string\n  /**\n   * List of colors to pick from at random\n   */\n  colors?: string[]\n}\n\nconst randomHex = () =>\n  `#${Math.floor(Math.random() * 0xffffff)\n    .toString(16)\n    .padEnd(6, \"0\")}`\n\nexport function randomColor(opts?: RandomColorOptions) {\n  const fallback = randomHex()\n\n  if (!opts || isEmptyObject(opts)) {\n    return fallback\n  }\n\n  if (opts.string && opts.colors) {\n    return randomColorFromList(opts.string, opts.colors)\n  }\n\n  if (opts.string && !opts.colors) {\n    return randomColorFromString(opts.string)\n  }\n\n  if (opts.colors && !opts.string) {\n    return randomFromList(opts.colors)\n  }\n\n  return fallback\n}\n\nfunction randomColorFromString(str: string) {\n  let hash = 0\n  if (str.length === 0) return hash.toString()\n  for (let i = 0; i < str.length; i += 1) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash)\n    hash = hash & hash\n  }\n  let color = \"#\"\n  for (let j = 0; j < 3; j += 1) {\n    const value = (hash >> (j * 8)) & 255\n    color += `00${value.toString(16)}`.substr(-2)\n  }\n  return color\n}\n\nfunction randomColorFromList(str: string, list: string[]) {\n  let index = 0\n  if (str.length === 0) return list[0]\n  for (let i = 0; i < str.length; i += 1) {\n    index = str.charCodeAt(i) + ((index << 5) - index)\n    index = index & index\n  }\n  index = ((index % list.length) + list.length) % list.length\n  return list[index]\n}\n\nfunction randomFromList(list: string[]) {\n  return list[Math.floor(Math.random() * list.length)]\n}\n","export default function dlv(obj, key, def, p, undef) {\n\tkey = key.split ? key.split('.') : key;\n\tfor (p = 0; p < key.length; p++) {\n\t\tobj = obj ? obj[key[p]] : undef;\n\t}\n\treturn obj === undef ? def : obj;\n}\n"]},"metadata":{},"sourceType":"module"}