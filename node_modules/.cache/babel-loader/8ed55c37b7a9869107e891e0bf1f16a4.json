{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"min\", \"max\", \"onChange\", \"value\", \"defaultValue\", \"isReversed\", \"direction\", \"orientation\", \"id\", \"isDisabled\", \"isReadOnly\", \"onChangeStart\", \"onChangeEnd\", \"step\", \"getAriaValueText\", \"aria-valuetext\", \"aria-label\", \"aria-labelledby\", \"name\", \"focusThumbOnChange\", \"minStepsBetweenThumbs\"],\n  _excluded2 = [\"index\"],\n  _excluded3 = [\"value\"],\n  _excluded4 = [\"index\"];\nimport { ariaAttr, callAllHandlers, dataAttr } from \"./chunk-DX64QB22.mjs\";\nimport { getIds, getIsReversed, getStyles, orient } from \"./chunk-E23N4XEN.mjs\";\n\n// src/use-range-slider.ts\nimport { usePanEvent } from \"@chakra-ui/react-use-pan-event\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { percentToValue, roundValueToStep, valueToPercent, clampValue } from \"@chakra-ui/number-utils\";\nimport { useCallback, useMemo, useRef, useState, useId } from \"react\";\nimport { useSizes } from \"@chakra-ui/react-use-size\";\nfunction useRangeSlider(props) {\n  var _props$min = props.min,\n    min = _props$min === void 0 ? 0 : _props$min,\n    _props$max = props.max,\n    max = _props$max === void 0 ? 100 : _props$max,\n    onChange = props.onChange,\n    valueProp = props.value,\n    defaultValue = props.defaultValue,\n    isReversedProp = props.isReversed,\n    _props$direction = props.direction,\n    direction = _props$direction === void 0 ? \"ltr\" : _props$direction,\n    _props$orientation = props.orientation,\n    orientation = _props$orientation === void 0 ? \"horizontal\" : _props$orientation,\n    idProp = props.id,\n    isDisabled = props.isDisabled,\n    isReadOnly = props.isReadOnly,\n    onChangeStartProp = props.onChangeStart,\n    onChangeEndProp = props.onChangeEnd,\n    _props$step = props.step,\n    step = _props$step === void 0 ? 1 : _props$step,\n    getAriaValueTextProp = props.getAriaValueText,\n    ariaValueText = props[\"aria-valuetext\"],\n    ariaLabel = props[\"aria-label\"],\n    ariaLabelledBy = props[\"aria-labelledby\"],\n    name = props.name,\n    _props$focusThumbOnCh = props.focusThumbOnChange,\n    focusThumbOnChange = _props$focusThumbOnCh === void 0 ? true : _props$focusThumbOnCh,\n    _props$minStepsBetwee = props.minStepsBetweenThumbs,\n    minStepsBetweenThumbs = _props$minStepsBetwee === void 0 ? 0 : _props$minStepsBetwee,\n    htmlProps = _objectWithoutProperties(props, _excluded);\n  var onChangeStart = useCallbackRef(onChangeStartProp);\n  var onChangeEnd = useCallbackRef(onChangeEndProp);\n  var getAriaValueText = useCallbackRef(getAriaValueTextProp);\n  var isReversed = getIsReversed({\n    isReversed: isReversedProp,\n    direction: direction,\n    orientation: orientation\n  });\n  var _useControllableState = useControllableState({\n      value: valueProp,\n      defaultValue: defaultValue != null ? defaultValue : [25, 75],\n      onChange: onChange\n    }),\n    _useControllableState2 = _slicedToArray(_useControllableState, 2),\n    valueState = _useControllableState2[0],\n    setValue = _useControllableState2[1];\n  if (!Array.isArray(valueState)) {\n    throw new TypeError(\"[range-slider] You passed an invalid value for `value` or `defaultValue`, expected `Array` but got `\".concat(typeof valueState, \"`\"));\n  }\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isDragging = _useState2[0],\n    setDragging = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isFocused = _useState4[0],\n    setFocused = _useState4[1];\n  var _useState5 = useState(-1),\n    _useState6 = _slicedToArray(_useState5, 2),\n    activeIndex = _useState6[0],\n    setActiveIndex = _useState6[1];\n  var isInteractive = !(isDisabled || isReadOnly);\n  var initialValue = useRef(valueState);\n  var value = valueState.map(function (val) {\n    return clampValue(val, min, max);\n  });\n  var spacing = minStepsBetweenThumbs * step;\n  var valueBounds = getValueBounds(value, min, max, spacing);\n  var stateRef = useRef({\n    eventSource: null,\n    value: [],\n    valueBounds: []\n  });\n  stateRef.current.value = value;\n  stateRef.current.valueBounds = valueBounds;\n  var reversedValue = value.map(function (val) {\n    return max - val + min;\n  });\n  var thumbValues = isReversed ? reversedValue : value;\n  var thumbPercents = thumbValues.map(function (val) {\n    return valueToPercent(val, min, max);\n  });\n  var isVertical = orientation === \"vertical\";\n  var trackRef = useRef(null);\n  var rootRef = useRef(null);\n  var thumbRects = useSizes({\n    getNodes: function getNodes() {\n      var rootNode = rootRef.current;\n      var thumbNodes = rootNode == null ? void 0 : rootNode.querySelectorAll(\"[role=slider]\");\n      return thumbNodes ? Array.from(thumbNodes) : [];\n    }\n  });\n  var reactId = useId();\n  var uuid = idProp != null ? idProp : reactId;\n  var ids = getIds(uuid);\n  var getValueFromPointer = useCallback(function (event) {\n    var _a, _b;\n    if (!trackRef.current) return;\n    stateRef.current.eventSource = \"pointer\";\n    var rect = trackRef.current.getBoundingClientRect();\n    var _ref = (_b = (_a = event.touches) == null ? void 0 : _a[0]) != null ? _b : event,\n      clientX = _ref.clientX,\n      clientY = _ref.clientY;\n    var diff = isVertical ? rect.bottom - clientY : clientX - rect.left;\n    var length = isVertical ? rect.height : rect.width;\n    var percent = diff / length;\n    if (isReversed) percent = 1 - percent;\n    return percentToValue(percent, min, max);\n  }, [isVertical, isReversed, max, min]);\n  var tenSteps = (max - min) / 10;\n  var oneStep = step || (max - min) / 100;\n  var actions = useMemo(function () {\n    return {\n      setValueAtIndex: function setValueAtIndex(index, val) {\n        if (!isInteractive) return;\n        var bounds = stateRef.current.valueBounds[index];\n        val = parseFloat(roundValueToStep(val, bounds.min, oneStep));\n        val = clampValue(val, bounds.min, bounds.max);\n        var next = _toConsumableArray(stateRef.current.value);\n        next[index] = val;\n        setValue(next);\n      },\n      setActiveIndex: setActiveIndex,\n      stepUp: function stepUp(index) {\n        var step2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : oneStep;\n        var valueAtIndex = stateRef.current.value[index];\n        var next = isReversed ? valueAtIndex - step2 : valueAtIndex + step2;\n        actions.setValueAtIndex(index, next);\n      },\n      stepDown: function stepDown(index) {\n        var step2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : oneStep;\n        var valueAtIndex = stateRef.current.value[index];\n        var next = isReversed ? valueAtIndex + step2 : valueAtIndex - step2;\n        actions.setValueAtIndex(index, next);\n      },\n      reset: function reset() {\n        setValue(initialValue.current);\n      }\n    };\n  }, [oneStep, isReversed, setValue, isInteractive]);\n  var onKeyDown = useCallback(function (event) {\n    var eventKey = event.key;\n    var keyMap = {\n      ArrowRight: function ArrowRight() {\n        return actions.stepUp(activeIndex);\n      },\n      ArrowUp: function ArrowUp() {\n        return actions.stepUp(activeIndex);\n      },\n      ArrowLeft: function ArrowLeft() {\n        return actions.stepDown(activeIndex);\n      },\n      ArrowDown: function ArrowDown() {\n        return actions.stepDown(activeIndex);\n      },\n      PageUp: function PageUp() {\n        return actions.stepUp(activeIndex, tenSteps);\n      },\n      PageDown: function PageDown() {\n        return actions.stepDown(activeIndex, tenSteps);\n      },\n      Home: function Home() {\n        var value2 = valueBounds[activeIndex].min;\n        actions.setValueAtIndex(activeIndex, value2);\n      },\n      End: function End() {\n        var value2 = valueBounds[activeIndex].max;\n        actions.setValueAtIndex(activeIndex, value2);\n      }\n    };\n    var action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      event.stopPropagation();\n      action(event);\n      stateRef.current.eventSource = \"keyboard\";\n    }\n  }, [actions, activeIndex, tenSteps, valueBounds]);\n  var _useMemo = useMemo(function () {\n      return getStyles({\n        isReversed: isReversed,\n        orientation: orientation,\n        thumbRects: thumbRects,\n        thumbPercents: thumbPercents\n      });\n    }, [isReversed, orientation, thumbPercents, thumbRects]),\n    getThumbStyle = _useMemo.getThumbStyle,\n    rootStyle = _useMemo.rootStyle,\n    trackStyle = _useMemo.trackStyle,\n    innerTrackStyle = _useMemo.innerTrackStyle;\n  var focusThumb = useCallback(function (index) {\n    var _a;\n    var idx = index != null ? index : activeIndex;\n    if (idx !== -1 && focusThumbOnChange) {\n      var id = ids.getThumb(idx);\n      var thumb = (_a = rootRef.current) == null ? void 0 : _a.ownerDocument.getElementById(id);\n      if (thumb) {\n        setTimeout(function () {\n          return thumb.focus();\n        });\n      }\n    }\n  }, [focusThumbOnChange, activeIndex, ids]);\n  useUpdateEffect(function () {\n    if (stateRef.current.eventSource === \"keyboard\") {\n      onChangeEnd == null ? void 0 : onChangeEnd(stateRef.current.value);\n    }\n  }, [value, onChangeEnd]);\n  var _onPanSessionStart = function onPanSessionStart(event) {\n    var pointValue = getValueFromPointer(event) || 0;\n    var distances = stateRef.current.value.map(function (val) {\n      return Math.abs(val - pointValue);\n    });\n    var closest = Math.min.apply(Math, _toConsumableArray(distances));\n    var index = distances.indexOf(closest);\n    var thumbsAtPosition = distances.filter(function (distance) {\n      return distance === closest;\n    });\n    var isThumbStacked = thumbsAtPosition.length > 1;\n    if (isThumbStacked && pointValue > stateRef.current.value[index]) {\n      index = index + thumbsAtPosition.length - 1;\n    }\n    setActiveIndex(index);\n    actions.setValueAtIndex(index, pointValue);\n    focusThumb(index);\n  };\n  var _onPan = function onPan(event) {\n    if (activeIndex == -1) return;\n    var pointValue = getValueFromPointer(event) || 0;\n    setActiveIndex(activeIndex);\n    actions.setValueAtIndex(activeIndex, pointValue);\n    focusThumb(activeIndex);\n  };\n  usePanEvent(rootRef, {\n    onPanSessionStart: function onPanSessionStart(event) {\n      if (!isInteractive) return;\n      setDragging(true);\n      _onPanSessionStart(event);\n      onChangeStart == null ? void 0 : onChangeStart(stateRef.current.value);\n    },\n    onPanSessionEnd: function onPanSessionEnd() {\n      if (!isInteractive) return;\n      setDragging(false);\n      onChangeEnd == null ? void 0 : onChangeEnd(stateRef.current.value);\n    },\n    onPan: function onPan(event) {\n      if (!isInteractive) return;\n      _onPan(event);\n    }\n  });\n  var getRootProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread(_objectSpread({}, props2), htmlProps), {}, {\n      id: ids.root,\n      ref: mergeRefs(ref, rootRef),\n      tabIndex: -1,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      \"data-focused\": dataAttr(isFocused),\n      style: _objectSpread(_objectSpread({}, props2.style), rootStyle)\n    });\n  }, [htmlProps, isDisabled, isFocused, rootStyle, ids]);\n  var getTrackProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      ref: mergeRefs(ref, trackRef),\n      id: ids.track,\n      \"data-disabled\": dataAttr(isDisabled),\n      style: _objectSpread(_objectSpread({}, props2.style), trackStyle)\n    });\n  }, [isDisabled, trackStyle, ids]);\n  var getInnerTrackProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      ref: ref,\n      id: ids.innerTrack,\n      style: _objectSpread(_objectSpread({}, props2.style), innerTrackStyle)\n    });\n  }, [innerTrackStyle, ids]);\n  var getThumbProps = useCallback(function (props2) {\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var _a;\n    var index = props2.index,\n      rest = _objectWithoutProperties(props2, _excluded2);\n    var valueAtIndex = value[index];\n    if (valueAtIndex == null) {\n      throw new TypeError(\"[range-slider > thumb] Cannot find value at index `\".concat(index, \"`. The `value` or `defaultValue` length is : \").concat(value.length));\n    }\n    var bounds = valueBounds[index];\n    return _objectSpread(_objectSpread({}, rest), {}, {\n      ref: ref,\n      role: \"slider\",\n      tabIndex: isInteractive ? 0 : void 0,\n      id: ids.getThumb(index),\n      \"data-active\": dataAttr(isDragging && activeIndex === index),\n      \"aria-valuetext\": (_a = getAriaValueText == null ? void 0 : getAriaValueText(valueAtIndex)) != null ? _a : ariaValueText == null ? void 0 : ariaValueText[index],\n      \"aria-valuemin\": bounds.min,\n      \"aria-valuemax\": bounds.max,\n      \"aria-valuenow\": valueAtIndex,\n      \"aria-orientation\": orientation,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      \"aria-readonly\": ariaAttr(isReadOnly),\n      \"aria-label\": ariaLabel == null ? void 0 : ariaLabel[index],\n      \"aria-labelledby\": (ariaLabel == null ? void 0 : ariaLabel[index]) ? void 0 : ariaLabelledBy == null ? void 0 : ariaLabelledBy[index],\n      style: _objectSpread(_objectSpread({}, props2.style), getThumbStyle(index)),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props2.onFocus, function () {\n        setFocused(true);\n        setActiveIndex(index);\n      }),\n      onBlur: callAllHandlers(props2.onBlur, function () {\n        setFocused(false);\n        setActiveIndex(-1);\n      })\n    });\n  }, [ids, value, valueBounds, isInteractive, isDragging, activeIndex, getAriaValueText, ariaValueText, orientation, isDisabled, isReadOnly, ariaLabel, ariaLabelledBy, getThumbStyle, onKeyDown, setFocused]);\n  var getOutputProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      ref: ref,\n      id: ids.output,\n      htmlFor: value.map(function (v, i) {\n        return ids.getThumb(i);\n      }).join(\" \"),\n      \"aria-live\": \"off\"\n    });\n  }, [ids, value]);\n  var getMarkerProps = useCallback(function (props2) {\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var v = props2.value,\n      rest = _objectWithoutProperties(props2, _excluded3);\n    var isInRange = !(v < min || v > max);\n    var isHighlighted = v >= value[0] && v <= value[value.length - 1];\n    var percent = valueToPercent(v, min, max);\n    percent = isReversed ? 100 - percent : percent;\n    var markerStyle = _objectSpread({\n      position: \"absolute\",\n      pointerEvents: \"none\"\n    }, orient({\n      orientation: orientation,\n      vertical: {\n        bottom: \"\".concat(percent, \"%\")\n      },\n      horizontal: {\n        left: \"\".concat(percent, \"%\")\n      }\n    }));\n    return _objectSpread(_objectSpread({}, rest), {}, {\n      ref: ref,\n      id: ids.getMarker(props2.value),\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(!isInRange),\n      \"data-highlighted\": dataAttr(isHighlighted),\n      style: _objectSpread(_objectSpread({}, props2.style), markerStyle)\n    });\n  }, [isDisabled, isReversed, max, min, orientation, value, ids]);\n  var getInputProps = useCallback(function (props2) {\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var index = props2.index,\n      rest = _objectWithoutProperties(props2, _excluded4);\n    return _objectSpread(_objectSpread({}, rest), {}, {\n      ref: ref,\n      id: ids.getInput(index),\n      type: \"hidden\",\n      value: value[index],\n      name: Array.isArray(name) ? name[index] : \"\".concat(name, \"-\").concat(index)\n    });\n  }, [name, value, ids]);\n  var state = {\n    value: value,\n    isFocused: isFocused,\n    isDragging: isDragging,\n    getThumbPercent: function getThumbPercent(index) {\n      return thumbPercents[index];\n    },\n    getThumbMinValue: function getThumbMinValue(index) {\n      return valueBounds[index].min;\n    },\n    getThumbMaxValue: function getThumbMaxValue(index) {\n      return valueBounds[index].max;\n    }\n  };\n  return {\n    state: state,\n    actions: actions,\n    getRootProps: getRootProps,\n    getTrackProps: getTrackProps,\n    getInnerTrackProps: getInnerTrackProps,\n    getThumbProps: getThumbProps,\n    getMarkerProps: getMarkerProps,\n    getInputProps: getInputProps,\n    getOutputProps: getOutputProps\n  };\n}\nfunction getValueBounds(arr, min, max, spacing) {\n  return arr.map(function (v, i) {\n    var _min = i === 0 ? min : arr[i - 1] + spacing;\n    var _max = i === arr.length - 1 ? max : arr[i + 1] - spacing;\n    return {\n      min: _min,\n      max: _max\n    };\n  });\n}\nexport { useRangeSlider };","map":{"version":3,"mappings":"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","names":["usePanEvent","useControllableState","useCallbackRef","useUpdateEffect","mergeRefs","percentToValue","roundValueToStep","valueToPercent","clampValue","useCallback","useMemo","useRef","useState","useId","useSizes","useRangeSlider","props","min","_props$max","max","onChange","valueProp","value","defaultValue","isReversedProp","isReversed","_props$direction","direction","_props$orientation","orientation","idProp","id","isDisabled","isReadOnly","onChangeStartProp","onChangeStart","onChangeEndProp","onChangeEnd","_props$step","step","getAriaValueTextProp","getAriaValueText","ariaValueText","ariaLabel","ariaLabelledBy","name","_props$focusThumbOnCh","focusThumbOnChange","_props$minStepsBetwee","minStepsBetweenThumbs","htmlProps","getIsReversed","_useControllableState2","valueState","setValue","Array","isArray","TypeError","_useState2","isDragging","setDragging","_useState4","isFocused","setFocused","_useState6","activeIndex","setActiveIndex","isInteractive","initialValue","map","val","spacing","valueBounds","getValueBounds","stateRef","eventSource","current","reversedValue","thumbValues","thumbPercents","isVertical","trackRef","rootRef","thumbRects","getNodes","rootNode","thumbNodes","querySelectorAll","from","reactId","uuid","ids","getIds","getValueFromPointer","event","rect","getBoundingClientRect","_b","touches","clientX","clientY","diff","bottom","left","length","height","width","percent","tenSteps","oneStep","actions","setValueAtIndex","index","bounds","parseFloat","next","stepUp","valueAtIndex","stepDown","reset","onKeyDown","eventKey","key","keyMap","ArrowRight","ArrowUp","ArrowLeft","ArrowDown","PageUp","PageDown","Home","End","action","preventDefault","stopPropagation","getStyles","getThumbStyle","rootStyle","trackStyle","innerTrackStyle","focusThumb","idx","getThumb","thumb","_a","ownerDocument","getElementById","setTimeout","focus","onPanSessionStart","pointValue","distances","Math","abs","closest","indexOf","thumbsAtPosition","filter","distance","isThumbStacked","onPan","onPanSessionEnd","getRootProps","ref","root","tabIndex","ariaAttr","dataAttr","style","getTrackProps","track","getInnerTrackProps","innerTrack","getThumbProps","rest","role","callAllHandlers","onFocus","onBlur","getOutputProps","output","htmlFor","v","i","join","getMarkerProps","isInRange","isHighlighted","markerStyle","position","pointerEvents","orient","vertical","horizontal","getMarker","getInputProps","getInput","type","state","getThumbPercent","getThumbMinValue","getThumbMaxValue","arr","_min","_max"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\slider\\src\\use-range-slider.ts"],"sourcesContent":["import { usePanEvent } from \"@chakra-ui/react-use-pan-event\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport type { PropGetter, RequiredPropGetter } from \"@chakra-ui/react-types\"\nimport { ariaAttr, callAllHandlers, dataAttr } from \"@chakra-ui/utils\"\nimport {\n  percentToValue,\n  roundValueToStep,\n  valueToPercent,\n  clampValue,\n} from \"@chakra-ui/number-utils\"\nimport { useCallback, useMemo, useRef, useState, useId } from \"react\"\nimport { getIds, getIsReversed, getStyles, orient } from \"./slider-utils\"\nimport { useSizes } from \"@chakra-ui/react-use-size\"\n\nexport interface UseRangeSliderProps {\n  /**\n   * The minimum allowed value of the slider. Cannot be greater than max.\n   * @default 0\n   */\n  min?: number\n  /**\n   * The maximum allowed value of the slider. Cannot be less than min.\n   * @default 100\n   */\n  max?: number\n  /**\n   * The step in which increments/decrements have to be made\n   * @default 1\n   */\n  step?: number\n  /**\n   * The value of the slider in controlled mode\n   */\n  value?: number[]\n  /**\n   * The initial value of the slider in uncontrolled mode\n   */\n  defaultValue?: number[]\n  /**\n   * Orientation of the slider\n   * @default \"horizontal\"\n   */\n  orientation?: \"horizontal\" | \"vertical\"\n  /**\n   * If `true`, the value will be incremented or decremented in reverse.\n   * @default false\n   */\n  isReversed?: boolean\n\n  /**\n   * Function called when the user starts selecting a new value (by dragging or clicking)\n   */\n  onChangeStart?(value: number[]): void\n\n  /**\n   * Function called when the user is done selecting a new value (by dragging or clicking)\n   */\n  onChangeEnd?(value: number[]): void\n\n  /**\n   * Function called whenever the slider value changes  (by dragging or clicking)\n   */\n  onChange?(value: number[]): void\n\n  /**\n   * The base `id` to use for the slider and its components\n   */\n  id?: string\n  /**\n   * The name attribute of the hidden `input` field.\n   * This is particularly useful in forms\n   */\n  name?: string | string[]\n  /**\n   * If `true`, the slider will be disabled\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the slider will be in `read-only` state\n   * @default false\n   */\n  isReadOnly?: boolean\n\n  /**\n   * Function that returns the `aria-valuetext` for screen readers.\n   * It is mostly used to generate a more human-readable\n   * representation of the value for assistive technologies\n   */\n  getAriaValueText?(value: number): string\n\n  /**\n   * If `false`, the slider handle will not capture focus when value changes.\n   * @default true\n   */\n  focusThumbOnChange?: boolean\n  /**\n   * The static string to use used for `aria-valuetext`\n   */\n  \"aria-valuetext\"?: string[]\n  /**\n   * The static string to use used for `aria-label`\n   * if no visible label is used.\n   */\n  \"aria-label\"?: string[]\n  /**\n   * The static string `aria-labelledby` that points to the\n   * ID of the element that serves as label for the slider\n   */\n  \"aria-labelledby\"?: string[]\n  /**\n   * The writing mode\n   * @default \"ltr\"\n   */\n  direction?: \"ltr\" | \"rtl\"\n  /**\n   * The minimum distance between slider thumbs. Useful for preventing\n   * the thumbs from being too close together.\n   * @default 0\n   */\n  minStepsBetweenThumbs?: number\n}\n\nexport interface RangeSliderState {\n  value: number[]\n  isFocused: boolean\n  isDragging: boolean\n  getThumbPercent: (index: number) => number\n  getThumbMinValue: (index: number) => number\n  getThumbMaxValue: (index: number) => number\n}\n\nexport interface RangeSliderActions {\n  setValueAtIndex(index: number, val: number): void\n  setActiveIndex: React.Dispatch<React.SetStateAction<number>>\n  stepUp(index: number, step?: number): void\n  stepDown(index: number, step?: number): void\n  reset(): void\n}\n\n/**\n * React hook that implements an accessible range slider.\n *\n * It is an alternative to `<input type=\"range\" />`, and returns\n * prop getters for the component parts\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/slidertwothumb/\n */\nexport function useRangeSlider(props: UseRangeSliderProps) {\n  const {\n    min = 0,\n    max = 100,\n    onChange,\n    value: valueProp,\n    defaultValue,\n    isReversed: isReversedProp,\n    direction = \"ltr\",\n    orientation = \"horizontal\",\n    id: idProp,\n    isDisabled,\n    isReadOnly,\n    onChangeStart: onChangeStartProp,\n    onChangeEnd: onChangeEndProp,\n    step = 1,\n    getAriaValueText: getAriaValueTextProp,\n    \"aria-valuetext\": ariaValueText,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    name,\n    focusThumbOnChange = true,\n    minStepsBetweenThumbs = 0,\n    ...htmlProps\n  } = props\n\n  const onChangeStart = useCallbackRef(onChangeStartProp)\n  const onChangeEnd = useCallbackRef(onChangeEndProp)\n  const getAriaValueText = useCallbackRef(getAriaValueTextProp)\n\n  const isReversed = getIsReversed({\n    isReversed: isReversedProp,\n    direction,\n    orientation,\n  })\n\n  const [valueState, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue ?? [25, 75],\n    onChange,\n  })\n\n  if (!Array.isArray(valueState)) {\n    throw new TypeError(\n      `[range-slider] You passed an invalid value for \\`value\\` or \\`defaultValue\\`, expected \\`Array\\` but got \\`${typeof valueState}\\``,\n    )\n  }\n\n  const [isDragging, setDragging] = useState(false)\n  const [isFocused, setFocused] = useState(false)\n  const [activeIndex, setActiveIndex] = useState(-1)\n\n  const isInteractive = !(isDisabled || isReadOnly)\n\n  const initialValue = useRef(valueState)\n  const value = valueState.map((val) => clampValue(val, min, max))\n\n  const spacing = minStepsBetweenThumbs * step\n  const valueBounds = getValueBounds(value, min, max, spacing)\n\n  const stateRef = useRef<{\n    eventSource: \"pointer\" | \"keyboard\" | null\n    value: number[]\n    valueBounds: Array<{ min: number; max: number }>\n  }>({\n    eventSource: null,\n    value: [],\n    valueBounds: [],\n  })\n\n  stateRef.current.value = value\n  stateRef.current.valueBounds = valueBounds\n\n  const reversedValue = value.map((val) => max - val + min)\n  const thumbValues = isReversed ? reversedValue : value\n  const thumbPercents = thumbValues.map((val) => valueToPercent(val, min, max))\n\n  const isVertical = orientation === \"vertical\"\n\n  const trackRef = useRef<HTMLElement>(null)\n  const rootRef = useRef<HTMLElement>(null)\n\n  const thumbRects = useSizes({\n    getNodes() {\n      const rootNode = rootRef.current\n      const thumbNodes =\n        rootNode?.querySelectorAll<HTMLElement>(\"[role=slider]\")\n      return thumbNodes ? Array.from(thumbNodes) : []\n    },\n  })\n\n  const reactId = useId()\n  const uuid = idProp ?? reactId\n  const ids = getIds(uuid)\n\n  const getValueFromPointer = useCallback(\n    (event: any) => {\n      if (!trackRef.current) return\n      stateRef.current.eventSource = \"pointer\"\n      const rect = trackRef.current.getBoundingClientRect()\n      const { clientX, clientY } = event.touches?.[0] ?? event\n\n      const diff = isVertical ? rect.bottom - clientY : clientX - rect.left\n      const length = isVertical ? rect.height : rect.width\n\n      let percent = diff / length\n      if (isReversed) percent = 1 - percent\n\n      return percentToValue(percent, min, max)\n    },\n    [isVertical, isReversed, max, min],\n  )\n\n  const tenSteps = (max - min) / 10\n  const oneStep = step || (max - min) / 100\n\n  const actions: RangeSliderActions = useMemo(\n    () => ({\n      setValueAtIndex(index: number, val: number) {\n        if (!isInteractive) return\n        const bounds = stateRef.current.valueBounds[index]\n        val = parseFloat(roundValueToStep(val, bounds.min, oneStep))\n        val = clampValue(val, bounds.min, bounds.max)\n        const next = [...stateRef.current.value]\n        next[index] = val\n        setValue(next)\n      },\n      setActiveIndex,\n      stepUp(index: number, step = oneStep) {\n        const valueAtIndex = stateRef.current.value[index]\n        const next = isReversed ? valueAtIndex - step : valueAtIndex + step\n        actions.setValueAtIndex(index, next)\n      },\n      stepDown(index: number, step = oneStep) {\n        const valueAtIndex = stateRef.current.value[index]\n        const next = isReversed ? valueAtIndex + step : valueAtIndex - step\n        actions.setValueAtIndex(index, next)\n      },\n      reset() {\n        setValue(initialValue.current)\n      },\n    }),\n    [oneStep, isReversed, setValue, isInteractive],\n  )\n\n  /**\n   * Keyboard interaction to ensure users can operate\n   * the slider using only their keyboard.\n   */\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = event.key\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        ArrowRight: () => actions.stepUp(activeIndex),\n        ArrowUp: () => actions.stepUp(activeIndex),\n        ArrowLeft: () => actions.stepDown(activeIndex),\n        ArrowDown: () => actions.stepDown(activeIndex),\n        PageUp: () => actions.stepUp(activeIndex, tenSteps),\n        PageDown: () => actions.stepDown(activeIndex, tenSteps),\n        Home: () => {\n          const { min: value } = valueBounds[activeIndex]\n          actions.setValueAtIndex(activeIndex, value)\n        },\n        End: () => {\n          const { max: value } = valueBounds[activeIndex]\n          actions.setValueAtIndex(activeIndex, value)\n        },\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        event.stopPropagation()\n        action(event)\n        stateRef.current.eventSource = \"keyboard\"\n      }\n    },\n    [actions, activeIndex, tenSteps, valueBounds],\n  )\n\n  /**\n   * Compute styles for all component parts.\n   */\n  const { getThumbStyle, rootStyle, trackStyle, innerTrackStyle } = useMemo(\n    () =>\n      getStyles({\n        isReversed,\n        orientation,\n        thumbRects,\n        thumbPercents,\n      }),\n    [isReversed, orientation, thumbPercents, thumbRects],\n  )\n\n  const focusThumb = useCallback(\n    (index?: number) => {\n      const idx = index ?? activeIndex\n      if (idx !== -1 && focusThumbOnChange) {\n        const id = ids.getThumb(idx)\n        const thumb = rootRef.current?.ownerDocument.getElementById(id)\n        if (thumb) {\n          setTimeout(() => thumb.focus())\n        }\n      }\n    },\n    [focusThumbOnChange, activeIndex, ids],\n  )\n\n  useUpdateEffect(() => {\n    if (stateRef.current.eventSource === \"keyboard\") {\n      onChangeEnd?.(stateRef.current.value)\n    }\n  }, [value, onChangeEnd])\n\n  const onPanSessionStart = (event: MouseEvent | TouchEvent | PointerEvent) => {\n    const pointValue = getValueFromPointer(event) || 0\n    const distances = stateRef.current.value.map((val) =>\n      Math.abs(val - pointValue),\n    )\n    const closest = Math.min(...distances)\n    let index = distances.indexOf(closest)\n\n    // check if the clicked thumb is stacked by checking if there are multiple\n    // thumbs at the same distance\n    const thumbsAtPosition = distances.filter(\n      (distance) => distance === closest,\n    )\n    const isThumbStacked = thumbsAtPosition.length > 1\n\n    // when two thumbs are stacked and the user clicks at a point larger than\n    // their values, pick the last thumb with the greatest index\n    if (isThumbStacked && pointValue > stateRef.current.value[index]) {\n      index = index + thumbsAtPosition.length - 1\n    }\n\n    setActiveIndex(index)\n    actions.setValueAtIndex(index, pointValue)\n    focusThumb(index)\n  }\n\n  const onPan = (event: MouseEvent | TouchEvent | PointerEvent) => {\n    if (activeIndex == -1) return\n    const pointValue = getValueFromPointer(event) || 0\n    setActiveIndex(activeIndex)\n    actions.setValueAtIndex(activeIndex, pointValue)\n    focusThumb(activeIndex)\n  }\n\n  usePanEvent(rootRef, {\n    onPanSessionStart(event) {\n      if (!isInteractive) return\n      setDragging(true)\n      onPanSessionStart(event)\n      onChangeStart?.(stateRef.current.value)\n    },\n    onPanSessionEnd() {\n      if (!isInteractive) return\n      setDragging(false)\n      onChangeEnd?.(stateRef.current.value)\n    },\n    onPan(event) {\n      if (!isInteractive) return\n      onPan(event)\n    },\n  })\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      return {\n        ...props,\n        ...htmlProps,\n        id: ids.root,\n        ref: mergeRefs(ref, rootRef),\n        tabIndex: -1,\n        \"aria-disabled\": ariaAttr(isDisabled),\n        \"data-focused\": dataAttr(isFocused),\n        style: { ...props.style, ...rootStyle },\n      }\n    },\n    [htmlProps, isDisabled, isFocused, rootStyle, ids],\n  )\n\n  const getTrackProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      return {\n        ...props,\n        ref: mergeRefs(ref, trackRef),\n        id: ids.track,\n        \"data-disabled\": dataAttr(isDisabled),\n        style: { ...props.style, ...trackStyle },\n      }\n    },\n    [isDisabled, trackStyle, ids],\n  )\n\n  const getInnerTrackProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      return {\n        ...props,\n        ref,\n        id: ids.innerTrack,\n        style: {\n          ...props.style,\n          ...innerTrackStyle,\n        },\n      }\n    },\n    [innerTrackStyle, ids],\n  )\n\n  const getThumbProps: RequiredPropGetter<{ index: number }> = useCallback(\n    (props, ref = null) => {\n      const { index, ...rest } = props\n\n      const valueAtIndex = value[index]\n      if (valueAtIndex == null) {\n        throw new TypeError(\n          `[range-slider > thumb] Cannot find value at index \\`${index}\\`. The \\`value\\` or \\`defaultValue\\` length is : ${value.length}`,\n        )\n      }\n\n      const bounds = valueBounds[index]\n\n      return {\n        ...rest,\n        ref,\n        role: \"slider\",\n        tabIndex: isInteractive ? 0 : undefined,\n        id: ids.getThumb(index),\n        \"data-active\": dataAttr(isDragging && activeIndex === index),\n        \"aria-valuetext\":\n          getAriaValueText?.(valueAtIndex) ?? ariaValueText?.[index],\n        \"aria-valuemin\": bounds.min,\n        \"aria-valuemax\": bounds.max,\n        \"aria-valuenow\": valueAtIndex,\n        \"aria-orientation\": orientation,\n        \"aria-disabled\": ariaAttr(isDisabled),\n        \"aria-readonly\": ariaAttr(isReadOnly),\n        \"aria-label\": ariaLabel?.[index],\n        \"aria-labelledby\": ariaLabel?.[index]\n          ? undefined\n          : ariaLabelledBy?.[index],\n        style: { ...props.style, ...getThumbStyle(index) },\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(props.onFocus, () => {\n          setFocused(true)\n          setActiveIndex(index)\n        }),\n        onBlur: callAllHandlers(props.onBlur, () => {\n          setFocused(false)\n          setActiveIndex(-1)\n        }),\n      }\n    },\n    [\n      ids,\n      value,\n      valueBounds,\n      isInteractive,\n      isDragging,\n      activeIndex,\n      getAriaValueText,\n      ariaValueText,\n      orientation,\n      isDisabled,\n      isReadOnly,\n      ariaLabel,\n      ariaLabelledBy,\n      getThumbStyle,\n      onKeyDown,\n      setFocused,\n    ],\n  )\n\n  const getOutputProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      return {\n        ...props,\n        ref,\n        id: ids.output,\n        htmlFor: value.map((v, i) => ids.getThumb(i)).join(\" \"),\n        \"aria-live\": \"off\",\n      }\n    },\n    [ids, value],\n  )\n\n  const getMarkerProps: RequiredPropGetter<{ value: number }> = useCallback(\n    (props, ref = null) => {\n      const { value: v, ...rest } = props\n\n      const isInRange = !(v < min || v > max)\n      const isHighlighted = v >= value[0] && v <= value[value.length - 1]\n\n      let percent = valueToPercent(v, min, max)\n      percent = isReversed ? 100 - percent : percent\n\n      const markerStyle: React.CSSProperties = {\n        position: \"absolute\",\n        pointerEvents: \"none\",\n        ...orient({\n          orientation,\n          vertical: { bottom: `${percent}%` },\n          horizontal: { left: `${percent}%` },\n        }),\n      }\n\n      return {\n        ...rest,\n        ref,\n        id: ids.getMarker(props.value),\n        role: \"presentation\",\n        \"aria-hidden\": true,\n        \"data-disabled\": dataAttr(isDisabled),\n        \"data-invalid\": dataAttr(!isInRange),\n        \"data-highlighted\": dataAttr(isHighlighted),\n        style: {\n          ...props.style,\n          ...markerStyle,\n        },\n      }\n    },\n    [isDisabled, isReversed, max, min, orientation, value, ids],\n  )\n\n  const getInputProps: RequiredPropGetter<{ index: number }> = useCallback(\n    (props, ref = null) => {\n      const { index, ...rest } = props\n      return {\n        ...rest,\n        ref,\n        id: ids.getInput(index),\n        type: \"hidden\",\n        value: value[index],\n        name: Array.isArray(name) ? name[index] : `${name}-${index}`,\n      }\n    },\n    [name, value, ids],\n  )\n\n  const state: RangeSliderState = {\n    value,\n    isFocused,\n    isDragging,\n    getThumbPercent: (index: number) => thumbPercents[index],\n    getThumbMinValue: (index: number) => valueBounds[index].min,\n    getThumbMaxValue: (index: number) => valueBounds[index].max,\n  }\n\n  return {\n    state,\n    actions,\n    getRootProps,\n    getTrackProps,\n    getInnerTrackProps,\n    getThumbProps,\n    getMarkerProps,\n    getInputProps,\n    getOutputProps,\n  }\n}\n\nexport type UseRangeSliderReturn = ReturnType<typeof useRangeSlider>\n\nfunction getValueBounds(\n  arr: number[],\n  min: number,\n  max: number,\n  spacing: number,\n) {\n  return arr.map((v, i) => {\n    const _min = i === 0 ? min : arr[i - 1] + spacing\n    const _max = i === arr.length - 1 ? max : arr[i + 1] - spacing\n    return { min: _min, max: _max }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}