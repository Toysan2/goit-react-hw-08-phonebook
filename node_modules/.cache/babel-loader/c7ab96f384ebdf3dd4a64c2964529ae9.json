{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _excluded = [\"id\", \"closeOnSelect\", \"closeOnBlur\", \"initialFocusRef\", \"autoSelect\", \"isLazy\", \"isOpen\", \"defaultIsOpen\", \"onClose\", \"onOpen\", \"placement\", \"lazyBehavior\", \"direction\", \"computePositionOnMount\"],\n  _excluded2 = [\"onMouseEnter\", \"onMouseMove\", \"onMouseLeave\", \"onClick\", \"onFocus\", \"isDisabled\", \"isFocusable\", \"closeOnSelect\", \"type\"],\n  _excluded3 = [\"type\", \"isChecked\"],\n  _excluded4 = [\"children\", \"type\", \"value\", \"defaultValue\", \"onChange\"];\nimport { useShortcut } from \"./chunk-YSKACL7R.mjs\";\nimport { getNextItemFromSearch } from \"./chunk-BWUXSGSJ.mjs\";\n\n// src/use-menu.ts\nimport { useClickable } from \"@chakra-ui/clickable\";\nimport { createDescendantContext } from \"@chakra-ui/descendant\";\nimport { useFocusOnHide } from \"@chakra-ui/react-use-focus-effect\";\nimport { usePopper } from \"@chakra-ui/popper\";\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\";\nimport { useOutsideClick } from \"@chakra-ui/react-use-outside-click\";\nimport { useAnimationState } from \"@chakra-ui/react-use-animation-state\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { dataAttr, callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { lazyDisclosure } from \"@chakra-ui/lazy-utils\";\nimport { cloneElement, useCallback, useRef, useState, useId, useMemo, useEffect } from \"react\";\nvar _createDescendantCont = createDescendantContext(),\n  _createDescendantCont2 = _slicedToArray(_createDescendantCont, 4),\n  MenuDescendantsProvider = _createDescendantCont2[0],\n  useMenuDescendantsContext = _createDescendantCont2[1],\n  useMenuDescendants = _createDescendantCont2[2],\n  useMenuDescendant = _createDescendantCont2[3];\nvar _createContext = createContext({\n    strict: false,\n    name: \"MenuContext\"\n  }),\n  _createContext2 = _slicedToArray(_createContext, 2),\n  MenuProvider = _createContext2[0],\n  useMenuContext = _createContext2[1];\nfunction useIds(idProp) {\n  for (var _len = arguments.length, prefixes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    prefixes[_key - 1] = arguments[_key];\n  }\n  var reactId = useId();\n  var id = idProp || reactId;\n  return useMemo(function () {\n    return prefixes.map(function (prefix) {\n      return \"\".concat(prefix, \"-\").concat(id);\n    });\n  }, [id, prefixes]);\n}\nfunction getOwnerDocument(node) {\n  var _a;\n  return (_a = node == null ? void 0 : node.ownerDocument) != null ? _a : document;\n}\nfunction isActiveElement(element) {\n  var doc = getOwnerDocument(element);\n  return doc.activeElement === element;\n}\nfunction useMenu() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var id = props.id,\n    _props$closeOnSelect = props.closeOnSelect,\n    closeOnSelect = _props$closeOnSelect === void 0 ? true : _props$closeOnSelect,\n    _props$closeOnBlur = props.closeOnBlur,\n    closeOnBlur = _props$closeOnBlur === void 0 ? true : _props$closeOnBlur,\n    initialFocusRef = props.initialFocusRef,\n    _props$autoSelect = props.autoSelect,\n    autoSelect = _props$autoSelect === void 0 ? true : _props$autoSelect,\n    isLazy = props.isLazy,\n    isOpenProp = props.isOpen,\n    defaultIsOpen = props.defaultIsOpen,\n    onCloseProp = props.onClose,\n    onOpenProp = props.onOpen,\n    _props$placement = props.placement,\n    placement = _props$placement === void 0 ? \"bottom-start\" : _props$placement,\n    _props$lazyBehavior = props.lazyBehavior,\n    lazyBehavior = _props$lazyBehavior === void 0 ? \"unmount\" : _props$lazyBehavior,\n    direction = props.direction,\n    _props$computePositio = props.computePositionOnMount,\n    computePositionOnMount = _props$computePositio === void 0 ? false : _props$computePositio,\n    popperProps = _objectWithoutProperties(props, _excluded);\n  var menuRef = useRef(null);\n  var buttonRef = useRef(null);\n  var descendants = useMenuDescendants();\n  var focusMenu = useCallback(function () {\n    requestAnimationFrame(function () {\n      var _a;\n      (_a = menuRef.current) == null ? void 0 : _a.focus({\n        preventScroll: false\n      });\n    });\n  }, []);\n  var focusFirstItem = useCallback(function () {\n    var id2 = setTimeout(function () {\n      var _a;\n      if (initialFocusRef) {\n        (_a = initialFocusRef.current) == null ? void 0 : _a.focus();\n      } else {\n        var first = descendants.firstEnabled();\n        if (first) setFocusedIndex(first.index);\n      }\n    });\n    timeoutIds.current.add(id2);\n  }, [descendants, initialFocusRef]);\n  var focusLastItem = useCallback(function () {\n    var id2 = setTimeout(function () {\n      var last = descendants.lastEnabled();\n      if (last) setFocusedIndex(last.index);\n    });\n    timeoutIds.current.add(id2);\n  }, [descendants]);\n  var onOpenInternal = useCallback(function () {\n    onOpenProp == null ? void 0 : onOpenProp();\n    if (autoSelect) {\n      focusFirstItem();\n    } else {\n      focusMenu();\n    }\n  }, [autoSelect, focusFirstItem, focusMenu, onOpenProp]);\n  var _useDisclosure = useDisclosure({\n      isOpen: isOpenProp,\n      defaultIsOpen: defaultIsOpen,\n      onClose: onCloseProp,\n      onOpen: onOpenInternal\n    }),\n    isOpen = _useDisclosure.isOpen,\n    onOpen = _useDisclosure.onOpen,\n    onClose = _useDisclosure.onClose,\n    onToggle = _useDisclosure.onToggle;\n  useOutsideClick({\n    enabled: isOpen && closeOnBlur,\n    ref: menuRef,\n    handler: function handler(event) {\n      var _a;\n      if (!((_a = buttonRef.current) == null ? void 0 : _a.contains(event.target))) {\n        onClose();\n      }\n    }\n  });\n  var popper = usePopper(_objectSpread(_objectSpread({}, popperProps), {}, {\n    enabled: isOpen || computePositionOnMount,\n    placement: placement,\n    direction: direction\n  }));\n  var _useState = useState(-1),\n    _useState2 = _slicedToArray(_useState, 2),\n    focusedIndex = _useState2[0],\n    setFocusedIndex = _useState2[1];\n  useUpdateEffect(function () {\n    if (!isOpen) {\n      setFocusedIndex(-1);\n    }\n  }, [isOpen]);\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen,\n    shouldFocus: true\n  });\n  var animationState = useAnimationState({\n    isOpen: isOpen,\n    ref: menuRef\n  });\n  var _useIds = useIds(id, \"menu-button\", \"menu-list\"),\n    _useIds2 = _slicedToArray(_useIds, 2),\n    buttonId = _useIds2[0],\n    menuId = _useIds2[1];\n  var openAndFocusMenu = useCallback(function () {\n    onOpen();\n    focusMenu();\n  }, [onOpen, focusMenu]);\n  var timeoutIds = useRef( /* @__PURE__ */new Set([]));\n  useEffect(function () {\n    var ids = timeoutIds.current;\n    return function () {\n      ids.forEach(function (id2) {\n        return clearTimeout(id2);\n      });\n      ids.clear();\n    };\n  }, []);\n  var openAndFocusFirstItem = useCallback(function () {\n    onOpen();\n    focusFirstItem();\n  }, [focusFirstItem, onOpen]);\n  var openAndFocusLastItem = useCallback(function () {\n    onOpen();\n    focusLastItem();\n  }, [onOpen, focusLastItem]);\n  var refocus = useCallback(function () {\n    var _a, _b;\n    var doc = getOwnerDocument(menuRef.current);\n    var hasFocusWithin = (_a = menuRef.current) == null ? void 0 : _a.contains(doc.activeElement);\n    var shouldRefocus = isOpen && !hasFocusWithin;\n    if (!shouldRefocus) return;\n    var node = (_b = descendants.item(focusedIndex)) == null ? void 0 : _b.node;\n    node == null ? void 0 : node.focus({\n      preventScroll: true\n    });\n  }, [isOpen, focusedIndex, descendants]);\n  var rafId = useRef(null);\n  return {\n    openAndFocusMenu: openAndFocusMenu,\n    openAndFocusFirstItem: openAndFocusFirstItem,\n    openAndFocusLastItem: openAndFocusLastItem,\n    onTransitionEnd: refocus,\n    unstable__animationState: animationState,\n    descendants: descendants,\n    popper: popper,\n    buttonId: buttonId,\n    menuId: menuId,\n    forceUpdate: popper.forceUpdate,\n    orientation: \"vertical\",\n    isOpen: isOpen,\n    onToggle: onToggle,\n    onOpen: onOpen,\n    onClose: onClose,\n    menuRef: menuRef,\n    buttonRef: buttonRef,\n    focusedIndex: focusedIndex,\n    closeOnSelect: closeOnSelect,\n    closeOnBlur: closeOnBlur,\n    autoSelect: autoSelect,\n    setFocusedIndex: setFocusedIndex,\n    isLazy: isLazy,\n    lazyBehavior: lazyBehavior,\n    initialFocusRef: initialFocusRef,\n    rafId: rafId\n  };\n}\nfunction useMenuButton() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var externalRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var menu = useMenuContext();\n  var onToggle = menu.onToggle,\n    popper = menu.popper,\n    openAndFocusFirstItem = menu.openAndFocusFirstItem,\n    openAndFocusLastItem = menu.openAndFocusLastItem;\n  var onKeyDown = useCallback(function (event) {\n    var eventKey = event.key;\n    var keyMap = {\n      Enter: openAndFocusFirstItem,\n      ArrowDown: openAndFocusFirstItem,\n      ArrowUp: openAndFocusLastItem\n    };\n    var action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      event.stopPropagation();\n      action(event);\n    }\n  }, [openAndFocusFirstItem, openAndFocusLastItem]);\n  return _objectSpread(_objectSpread({}, props), {}, {\n    ref: mergeRefs(menu.buttonRef, externalRef, popper.referenceRef),\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\",\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onToggle),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n}\nfunction isTargetMenuItem(target) {\n  var _a;\n  return isHTMLElement(target) && !!((_a = target == null ? void 0 : target.getAttribute(\"role\")) == null ? void 0 : _a.startsWith(\"menuitem\"));\n}\nfunction useMenuList() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var menu = useMenuContext();\n  if (!menu) {\n    throw new Error(\"useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>\");\n  }\n  var focusedIndex = menu.focusedIndex,\n    setFocusedIndex = menu.setFocusedIndex,\n    menuRef = menu.menuRef,\n    isOpen = menu.isOpen,\n    onClose = menu.onClose,\n    menuId = menu.menuId,\n    isLazy = menu.isLazy,\n    lazyBehavior = menu.lazyBehavior,\n    animated = menu.unstable__animationState;\n  var descendants = useMenuDescendantsContext();\n  var createTypeaheadHandler = useShortcut({\n    preventDefault: function preventDefault(event) {\n      return event.key !== \" \" && isTargetMenuItem(event.target);\n    }\n  });\n  var onKeyDown = useCallback(function (event) {\n    if (!event.currentTarget.contains(event.target)) return;\n    var eventKey = event.key;\n    var keyMap = {\n      Tab: function Tab(event2) {\n        return event2.preventDefault();\n      },\n      Escape: onClose,\n      ArrowDown: function ArrowDown() {\n        var next = descendants.nextEnabled(focusedIndex);\n        if (next) setFocusedIndex(next.index);\n      },\n      ArrowUp: function ArrowUp() {\n        var prev = descendants.prevEnabled(focusedIndex);\n        if (prev) setFocusedIndex(prev.index);\n      }\n    };\n    var fn = keyMap[eventKey];\n    if (fn) {\n      event.preventDefault();\n      fn(event);\n      return;\n    }\n    var onTypeahead = createTypeaheadHandler(function (character) {\n      var nextItem = getNextItemFromSearch(descendants.values(), character, function (item) {\n        var _a, _b;\n        return (_b = (_a = item == null ? void 0 : item.node) == null ? void 0 : _a.textContent) != null ? _b : \"\";\n      }, descendants.item(focusedIndex));\n      if (nextItem) {\n        var index = descendants.indexOf(nextItem.node);\n        setFocusedIndex(index);\n      }\n    });\n    if (isTargetMenuItem(event.target)) {\n      onTypeahead(event);\n    }\n  }, [descendants, focusedIndex, createTypeaheadHandler, onClose, setFocusedIndex]);\n  var hasBeenOpened = useRef(false);\n  if (isOpen) {\n    hasBeenOpened.current = true;\n  }\n  var shouldRenderChildren = lazyDisclosure({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present\n  });\n  return _objectSpread(_objectSpread({}, props), {}, {\n    ref: mergeRefs(menuRef, ref),\n    children: shouldRenderChildren ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: _objectSpread(_objectSpread({}, props.style), {}, {\n      transformOrigin: \"var(--popper-transform-origin)\"\n    }),\n    \"aria-orientation\": \"vertical\",\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n}\nfunction useMenuPositioner() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _useMenuContext = useMenuContext(),\n    popper = _useMenuContext.popper,\n    isOpen = _useMenuContext.isOpen;\n  return popper.getPopperProps(_objectSpread(_objectSpread({}, props), {}, {\n    style: _objectSpread({\n      visibility: isOpen ? \"visible\" : \"hidden\"\n    }, props.style)\n  }));\n}\nfunction useMenuItem() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var externalRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var onMouseEnterProp = props.onMouseEnter,\n    onMouseMoveProp = props.onMouseMove,\n    onMouseLeaveProp = props.onMouseLeave,\n    onClickProp = props.onClick,\n    onFocusProp = props.onFocus,\n    isDisabled = props.isDisabled,\n    isFocusable = props.isFocusable,\n    closeOnSelect = props.closeOnSelect,\n    typeProp = props.type,\n    htmlProps = _objectWithoutProperties(props, _excluded2);\n  var menu = useMenuContext();\n  var setFocusedIndex = menu.setFocusedIndex,\n    focusedIndex = menu.focusedIndex,\n    menuCloseOnSelect = menu.closeOnSelect,\n    onClose = menu.onClose,\n    menuRef = menu.menuRef,\n    isOpen = menu.isOpen,\n    menuId = menu.menuId,\n    rafId = menu.rafId;\n  var ref = useRef(null);\n  var id = \"\".concat(menuId, \"-menuitem-\").concat(useId());\n  var _useMenuDescendant = useMenuDescendant({\n      disabled: isDisabled && !isFocusable\n    }),\n    index = _useMenuDescendant.index,\n    register = _useMenuDescendant.register;\n  var onMouseEnter = useCallback(function (event) {\n    onMouseEnterProp == null ? void 0 : onMouseEnterProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(index);\n  }, [setFocusedIndex, index, isDisabled, onMouseEnterProp]);\n  var onMouseMove = useCallback(function (event) {\n    onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);\n    if (ref.current && !isActiveElement(ref.current)) {\n      onMouseEnter(event);\n    }\n  }, [onMouseEnter, onMouseMoveProp]);\n  var onMouseLeave = useCallback(function (event) {\n    onMouseLeaveProp == null ? void 0 : onMouseLeaveProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(-1);\n  }, [setFocusedIndex, isDisabled, onMouseLeaveProp]);\n  var onClick = useCallback(function (event) {\n    onClickProp == null ? void 0 : onClickProp(event);\n    if (!isTargetMenuItem(event.currentTarget)) return;\n    if (closeOnSelect != null ? closeOnSelect : menuCloseOnSelect) {\n      onClose();\n    }\n  }, [onClose, onClickProp, menuCloseOnSelect, closeOnSelect]);\n  var onFocus = useCallback(function (event) {\n    onFocusProp == null ? void 0 : onFocusProp(event);\n    setFocusedIndex(index);\n  }, [setFocusedIndex, onFocusProp, index]);\n  var isFocused = index === focusedIndex;\n  var trulyDisabled = isDisabled && !isFocusable;\n  useUpdateEffect(function () {\n    if (!isOpen) return;\n    if (isFocused && !trulyDisabled && ref.current) {\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current);\n      }\n      rafId.current = requestAnimationFrame(function () {\n        var _a;\n        (_a = ref.current) == null ? void 0 : _a.focus({\n          preventScroll: true\n        });\n        rafId.current = null;\n      });\n    } else if (menuRef.current && !isActiveElement(menuRef.current)) {\n      menuRef.current.focus({\n        preventScroll: true\n      });\n    }\n    return function () {\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current);\n      }\n    };\n  }, [isFocused, trulyDisabled, menuRef, isOpen]);\n  var clickableProps = useClickable({\n    onClick: onClick,\n    onFocus: onFocus,\n    onMouseEnter: onMouseEnter,\n    onMouseMove: onMouseMove,\n    onMouseLeave: onMouseLeave,\n    ref: mergeRefs(register, ref, externalRef),\n    isDisabled: isDisabled,\n    isFocusable: isFocusable\n  });\n  return _objectSpread(_objectSpread(_objectSpread({}, htmlProps), clickableProps), {}, {\n    type: typeProp != null ? typeProp : clickableProps.type,\n    id: id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1\n  });\n}\nfunction useMenuOption() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var _props$type = props.type,\n    type = _props$type === void 0 ? \"radio\" : _props$type,\n    isChecked = props.isChecked,\n    rest = _objectWithoutProperties(props, _excluded3);\n  var ownProps = useMenuItem(rest, ref);\n  return _objectSpread(_objectSpread({}, ownProps), {}, {\n    role: \"menuitem\".concat(type),\n    \"aria-checked\": isChecked\n  });\n}\nfunction useMenuOptionGroup() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var children = props.children,\n    _props$type2 = props.type,\n    type = _props$type2 === void 0 ? \"radio\" : _props$type2,\n    valueProp = props.value,\n    defaultValue = props.defaultValue,\n    onChangeProp = props.onChange,\n    htmlProps = _objectWithoutProperties(props, _excluded4);\n  var isRadio = type === \"radio\";\n  var fallback = isRadio ? \"\" : [];\n  var _useControllableState = useControllableState({\n      defaultValue: defaultValue != null ? defaultValue : fallback,\n      value: valueProp,\n      onChange: onChangeProp\n    }),\n    _useControllableState2 = _slicedToArray(_useControllableState, 2),\n    value = _useControllableState2[0],\n    setValue = _useControllableState2[1];\n  var onChange = useCallback(function (selectedValue) {\n    if (type === \"radio\" && typeof value === \"string\") {\n      setValue(selectedValue);\n    }\n    if (type === \"checkbox\" && Array.isArray(value)) {\n      var nextValue = value.includes(selectedValue) ? value.filter(function (item) {\n        return item !== selectedValue;\n      }) : value.concat(selectedValue);\n      setValue(nextValue);\n    }\n  }, [value, setValue, type]);\n  var validChildren = getValidChildren(children);\n  var clones = validChildren.map(function (child) {\n    if (child.type.id !== \"MenuItemOption\") return child;\n    var onClick = function onClick(event) {\n      var _a, _b;\n      onChange(child.props.value);\n      (_b = (_a = child.props).onClick) == null ? void 0 : _b.call(_a, event);\n    };\n    var isChecked = type === \"radio\" ? child.props.value === value : value.includes(child.props.value);\n    return cloneElement(child, {\n      type: type,\n      onClick: onClick,\n      isChecked: isChecked\n    });\n  });\n  return _objectSpread(_objectSpread({}, htmlProps), {}, {\n    children: clones\n  });\n}\nfunction useMenuState() {\n  var _useMenuContext2 = useMenuContext(),\n    isOpen = _useMenuContext2.isOpen,\n    onClose = _useMenuContext2.onClose;\n  return {\n    isOpen: isOpen,\n    onClose: onClose\n  };\n}\nfunction isHTMLElement(el) {\n  var _a;\n  if (!isElement(el)) return false;\n  var win = (_a = el.ownerDocument.defaultView) != null ? _a : window;\n  return el instanceof win.HTMLElement;\n}\nfunction isElement(el) {\n  return el != null && typeof el == \"object\" && \"nodeType\" in el && el.nodeType === Node.ELEMENT_NODE;\n}\nexport { MenuDescendantsProvider, useMenuDescendantsContext, useMenuDescendants, useMenuDescendant, MenuProvider, useMenuContext, useMenu, useMenuButton, useMenuList, useMenuPositioner, useMenuItem, useMenuOption, useMenuOptionGroup, useMenuState };","map":{"version":3,"mappings":"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","names":["useClickable","createDescendantContext","useFocusOnHide","usePopper","useDisclosure","useOutsideClick","useAnimationState","createContext","getValidChildren","useControllableState","useUpdateEffect","mergeRefs","dataAttr","callAllHandlers","lazyDisclosure","cloneElement","useCallback","useRef","useState","useId","useMemo","useEffect","_createDescendantCont2","MenuDescendantsProvider","useMenuDescendantsContext","useMenuDescendants","useMenuDescendant","strict","name","_createContext2","MenuProvider","useMenuContext","useIds","idProp","prefixes","reactId","id","map","prefix","getOwnerDocument","node","_a","ownerDocument","document","isActiveElement","element","doc","activeElement","useMenu","props","_props$closeOnSelect","closeOnSelect","_props$closeOnBlur","closeOnBlur","initialFocusRef","_props$autoSelect","autoSelect","isLazy","isOpenProp","isOpen","defaultIsOpen","onCloseProp","onClose","onOpenProp","onOpen","_props$placement","placement","_props$lazyBehavior","lazyBehavior","direction","_props$computePositio","computePositionOnMount","popperProps","menuRef","buttonRef","descendants","focusMenu","requestAnimationFrame","current","focus","preventScroll","focusFirstItem","setTimeout","first","firstEnabled","setFocusedIndex","index","timeoutIds","add","focusLastItem","last","lastEnabled","onOpenInternal","onToggle","enabled","ref","handler","event","contains","target","popper","_useState2","focusedIndex","focusRef","visible","shouldFocus","animationState","_useIds2","buttonId","menuId","openAndFocusMenu","Set","ids","forEach","clearTimeout","clear","openAndFocusFirstItem","openAndFocusLastItem","refocus","hasFocusWithin","shouldRefocus","_b","item","rafId","onTransitionEnd","unstable__animationState","forceUpdate","orientation","useMenuButton","externalRef","menu","onKeyDown","eventKey","key","keyMap","Enter","ArrowDown","ArrowUp","action","preventDefault","stopPropagation","referenceRef","onClick","isTargetMenuItem","isHTMLElement","getAttribute","startsWith","useMenuList","Error","animated","createTypeaheadHandler","useShortcut","currentTarget","Tab","Escape","next","nextEnabled","prev","prevEnabled","fn","onTypeahead","character","nextItem","getNextItemFromSearch","values","textContent","indexOf","hasBeenOpened","shouldRenderChildren","wasSelected","mode","isSelected","present","children","tabIndex","role","style","transformOrigin","useMenuPositioner","getPopperProps","visibility","useMenuItem","onMouseEnterProp","onMouseEnter","onMouseMoveProp","onMouseMove","onMouseLeaveProp","onMouseLeave","onClickProp","onFocusProp","onFocus","isDisabled","isFocusable","typeProp","type","htmlProps","menuCloseOnSelect","disabled","register","isFocused","trulyDisabled","cancelAnimationFrame","clickableProps","useMenuOption","isChecked","rest","ownProps","useMenuOptionGroup","_props$type2","valueProp","value","defaultValue","onChangeProp","onChange","isRadio","fallback","_useControllableState2","setValue","selectedValue","Array","isArray","nextValue","includes","filter","concat","validChildren","clones","child","useMenuState","el","isElement","win","defaultView","window","HTMLElement","nodeType","Node","ELEMENT_NODE"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\menu\\src\\use-menu.ts"],"sourcesContent":["import { useClickable } from \"@chakra-ui/clickable\"\nimport { createDescendantContext } from \"@chakra-ui/descendant\"\nimport { useFocusOnHide } from \"@chakra-ui/react-use-focus-effect\"\nimport { usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport {\n  useDisclosure,\n  UseDisclosureProps,\n} from \"@chakra-ui/react-use-disclosure\"\nimport { useOutsideClick } from \"@chakra-ui/react-use-outside-click\"\nimport { useAnimationState } from \"@chakra-ui/react-use-animation-state\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { dataAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { lazyDisclosure, LazyMode } from \"@chakra-ui/lazy-utils\"\n\nimport React, {\n  cloneElement,\n  useCallback,\n  useRef,\n  useState,\n  useId,\n  useMemo,\n  useEffect,\n} from \"react\"\nimport { useShortcut } from \"./use-shortcut\"\nimport { getNextItemFromSearch } from \"./get-next-item-from-search\"\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [\n  MenuDescendantsProvider,\n  useMenuDescendantsContext,\n  useMenuDescendants,\n  useMenuDescendant,\n] = createDescendantContext<HTMLElement>()\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track menu state and logic\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [MenuProvider, useMenuContext] = createContext<\n  Omit<UseMenuReturn, \"descendants\">\n>({\n  strict: false,\n  name: \"MenuContext\",\n})\n\n/* -------------------------------------------------------------------------------------------------\n * useMenu hook\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuProps\n  extends Omit<UsePopperProps, \"enabled\">,\n    UseDisclosureProps {\n  /**\n   * The `ref` of the element that should receive focus when the popover opens.\n   */\n  initialFocusRef?: React.RefObject<{ focus(): void }>\n  /**\n   * If `true`, the menu will close when a menu item is\n   * clicked\n   *\n   * @default true\n   */\n  closeOnSelect?: boolean\n  /**\n   * If `true`, the menu will close when you click outside\n   * the menu list\n   *\n   * @default true\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the first enabled menu item will receive focus and be selected\n   * when the menu opens.\n   *\n   * @default true\n   */\n  autoSelect?: boolean\n  /**\n   * Performance 🚀:\n   * If `true`, the MenuItem rendering will be deferred\n   * until the menu is open.\n   *\n   * @default false\n   */\n  isLazy?: boolean\n  /**\n   * Performance 🚀:\n   * The lazy behavior of menu's content when not visible.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The menu's content is always unmounted when not open.\n   * - \"keepMounted\": The menu's content initially unmounted,\n   * but stays mounted when menu is open.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyMode\n  /**\n   * If `rtl`, proper placement positions will be flipped i.e. 'top-right' will\n   * become 'top-left' and vice-verse\n   */\n  direction?: \"ltr\" | \"rtl\"\n  /*\n   * If `true`, the menu will be positioned when it mounts\n   * (even if it's not open).\n   *\n   * Note 🚨: We don't recommend using this in a menu/popover intensive UI or page\n   * as it might affect scrolling performance.\n   *\n   * @default false\n   */\n  computePositionOnMount?: boolean\n}\n\nfunction useIds(idProp?: string, ...prefixes: string[]) {\n  const reactId = useId()\n  const id = idProp || reactId\n  return useMemo(() => {\n    return prefixes.map((prefix) => `${prefix}-${id}`)\n  }, [id, prefixes])\n}\n\nfunction getOwnerDocument(node?: Element | null): Document {\n  return node?.ownerDocument ?? document\n}\n\nfunction isActiveElement(element: HTMLElement) {\n  const doc = getOwnerDocument(element)\n  return doc.activeElement === (element as HTMLElement)\n}\n\n/**\n * React Hook to manage a menu\n *\n * It provides the logic and will be used with react context\n * to propagate its return value to all children\n */\nexport function useMenu(props: UseMenuProps = {}) {\n  const {\n    id,\n    closeOnSelect = true,\n    closeOnBlur = true,\n    initialFocusRef,\n    autoSelect = true,\n    isLazy,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    placement = \"bottom-start\",\n    lazyBehavior = \"unmount\",\n    direction,\n    computePositionOnMount = false,\n    ...popperProps\n  } = props\n  /**\n   * Prepare the reference to the menu and disclosure\n   */\n  const menuRef = useRef<HTMLDivElement>(null)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n\n  /**\n   * Context to register all menu item nodes\n   */\n  const descendants = useMenuDescendants()\n\n  const focusMenu = useCallback(() => {\n    requestAnimationFrame(() => {\n      menuRef.current?.focus({ preventScroll: false })\n    })\n  }, [])\n\n  const focusFirstItem = useCallback(() => {\n    const id = setTimeout(() => {\n      if (initialFocusRef) {\n        initialFocusRef.current?.focus()\n      } else {\n        const first = descendants.firstEnabled()\n        if (first) setFocusedIndex(first.index)\n      }\n    })\n    timeoutIds.current.add(id)\n  }, [descendants, initialFocusRef])\n\n  const focusLastItem = useCallback(() => {\n    const id = setTimeout(() => {\n      const last = descendants.lastEnabled()\n      if (last) setFocusedIndex(last.index)\n    })\n    timeoutIds.current.add(id)\n  }, [descendants])\n\n  const onOpenInternal = useCallback(() => {\n    onOpenProp?.()\n    if (autoSelect) {\n      focusFirstItem()\n    } else {\n      focusMenu()\n    }\n  }, [autoSelect, focusFirstItem, focusMenu, onOpenProp])\n\n  const { isOpen, onOpen, onClose, onToggle } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenInternal,\n  })\n\n  useOutsideClick({\n    enabled: isOpen && closeOnBlur,\n    ref: menuRef,\n    handler: (event) => {\n      if (!buttonRef.current?.contains(event.target as HTMLElement)) {\n        onClose()\n      }\n    },\n  })\n\n  /**\n   * Add some popper.js for dynamic positioning\n   */\n  const popper: any = usePopper({\n    ...popperProps,\n    enabled: isOpen || computePositionOnMount,\n    placement,\n    direction,\n  })\n\n  const [focusedIndex, setFocusedIndex] = useState(-1)\n\n  /**\n   * Focus the button when we close the menu\n   */\n  useUpdateEffect(() => {\n    if (!isOpen) {\n      setFocusedIndex(-1)\n    }\n  }, [isOpen])\n\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen,\n    shouldFocus: true,\n  })\n\n  const animationState = useAnimationState({ isOpen, ref: menuRef })\n\n  /**\n   * Generate unique ids for menu's list and button\n   */\n  const [buttonId, menuId] = useIds(id, `menu-button`, `menu-list`)\n\n  const openAndFocusMenu = useCallback(() => {\n    onOpen()\n    focusMenu()\n  }, [onOpen, focusMenu])\n\n  const timeoutIds = useRef<Set<any>>(new Set([]))\n\n  // clean up timeouts\n  useEffect(() => {\n    const ids = timeoutIds.current\n    return () => {\n      ids.forEach((id) => clearTimeout(id))\n      ids.clear()\n    }\n  }, [])\n\n  const openAndFocusFirstItem = useCallback(() => {\n    onOpen()\n    focusFirstItem()\n  }, [focusFirstItem, onOpen])\n\n  const openAndFocusLastItem = useCallback(() => {\n    onOpen()\n    focusLastItem()\n  }, [onOpen, focusLastItem])\n\n  const refocus = useCallback(() => {\n    const doc = getOwnerDocument(menuRef.current)\n    const hasFocusWithin = menuRef.current?.contains(doc.activeElement)\n    const shouldRefocus = isOpen && !hasFocusWithin\n\n    if (!shouldRefocus) return\n\n    const node = descendants.item(focusedIndex)?.node\n    node?.focus({ preventScroll: true })\n  }, [isOpen, focusedIndex, descendants])\n\n  /**\n   * Track the animation frame which is scheduled to focus\n   * a menu item, so it can be cancelled if another item\n   * is focused before the animation executes. This prevents\n   * infinite rerenders.\n   */\n  const rafId = useRef<number | null>(null)\n\n  return {\n    openAndFocusMenu,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    onTransitionEnd: refocus,\n    unstable__animationState: animationState,\n    descendants,\n    popper,\n    buttonId,\n    menuId,\n    forceUpdate: popper.forceUpdate,\n    orientation: \"vertical\",\n    isOpen,\n    onToggle,\n    onOpen,\n    onClose,\n    menuRef,\n    buttonRef,\n    focusedIndex,\n    closeOnSelect,\n    closeOnBlur,\n    autoSelect,\n    setFocusedIndex,\n    isLazy,\n    lazyBehavior,\n    initialFocusRef,\n    rafId,\n  }\n}\n\nexport interface UseMenuReturn extends ReturnType<typeof useMenu> {}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuButton hook\n * -----------------------------------------------------------------------------------------------*/\nexport interface UseMenuButtonProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {}\n\n/**\n * React Hook to manage a menu button.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\nexport function useMenuButton(\n  props: UseMenuButtonProps = {},\n  externalRef: React.Ref<any> = null,\n) {\n  const menu = useMenuContext()\n\n  const { onToggle, popper, openAndFocusFirstItem, openAndFocusLastItem } = menu\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = event.key\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        Enter: openAndFocusFirstItem,\n        ArrowDown: openAndFocusFirstItem,\n        ArrowUp: openAndFocusLastItem,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        event.stopPropagation()\n        action(event)\n      }\n    },\n    [openAndFocusFirstItem, openAndFocusLastItem],\n  )\n\n  return {\n    ...props,\n    ref: mergeRefs(menu.buttonRef, externalRef, popper.referenceRef),\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\" as React.AriaAttributes[\"aria-haspopup\"],\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onToggle),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\nfunction isTargetMenuItem(target: EventTarget | null) {\n  // this will catch `menuitem`, `menuitemradio`, `menuitemcheckbox`\n  return (\n    isHTMLElement(target) &&\n    !!target?.getAttribute(\"role\")?.startsWith(\"menuitem\")\n  )\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuList\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuListProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {}\n\n/**\n * React Hook to manage a menu list.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\nexport function useMenuList(\n  props: UseMenuListProps = {},\n  ref: React.Ref<any> = null,\n): React.HTMLAttributes<HTMLElement> & React.RefAttributes<HTMLElement> {\n  const menu = useMenuContext()\n\n  if (!menu) {\n    throw new Error(\n      `useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>`,\n    )\n  }\n\n  const {\n    focusedIndex,\n    setFocusedIndex,\n    menuRef,\n    isOpen,\n    onClose,\n    menuId,\n    isLazy,\n    lazyBehavior,\n    unstable__animationState: animated,\n  } = menu\n\n  const descendants = useMenuDescendantsContext()\n\n  /**\n   * Hook that creates a keydown event handler that listens\n   * to printable keyboard character press\n   */\n  const createTypeaheadHandler = useShortcut({\n    preventDefault: (event) =>\n      event.key !== \" \" && isTargetMenuItem(event.target),\n  })\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      // ignore events bubbles from portal children\n      if (!event.currentTarget.contains(event.target as Element)) return\n\n      const eventKey = event.key\n\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        Tab: (event) => event.preventDefault(),\n        Escape: onClose,\n        ArrowDown: () => {\n          const next = descendants.nextEnabled(focusedIndex)\n          if (next) setFocusedIndex(next.index)\n        },\n        ArrowUp: () => {\n          const prev = descendants.prevEnabled(focusedIndex)\n          if (prev) setFocusedIndex(prev.index)\n        },\n      }\n\n      const fn = keyMap[eventKey]\n\n      if (fn) {\n        event.preventDefault()\n        fn(event)\n        return\n      }\n\n      /**\n       * Typeahead: Based on current character pressed,\n       * find the next item to be selected\n       */\n      const onTypeahead = createTypeaheadHandler((character) => {\n        const nextItem = getNextItemFromSearch(\n          descendants.values(),\n          character,\n          (item) => item?.node?.textContent ?? \"\",\n          descendants.item(focusedIndex),\n        )\n        if (nextItem) {\n          const index = descendants.indexOf(nextItem.node)\n          setFocusedIndex(index)\n        }\n      })\n\n      if (isTargetMenuItem(event.target)) {\n        onTypeahead(event)\n      }\n    },\n    [\n      descendants,\n      focusedIndex,\n      createTypeaheadHandler,\n      onClose,\n      setFocusedIndex,\n    ],\n  )\n\n  const hasBeenOpened = useRef(false)\n  if (isOpen) {\n    hasBeenOpened.current = true\n  }\n\n  const shouldRenderChildren = lazyDisclosure({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present,\n  })\n\n  return {\n    ...props,\n    ref: mergeRefs(menuRef, ref),\n    children: shouldRenderChildren ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: {\n      ...props.style,\n      transformOrigin: \"var(--popper-transform-origin)\",\n    },\n    \"aria-orientation\": \"vertical\" as React.AriaAttributes[\"aria-orientation\"],\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuPosition: Composes usePopper to position the menu\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useMenuPositioner(props: any = {}) {\n  const { popper, isOpen } = useMenuContext()\n  return popper.getPopperProps({\n    ...props,\n    style: {\n      visibility: isOpen ? \"visible\" : \"hidden\",\n      ...props.style,\n    },\n  })\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuItem: Hook for each menu item within the menu list.\n   We also use it in `useMenuItemOption`\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuItemProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\" | \"disabled\"> {\n  /**\n   * If `true`, the menuitem will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and the menuitem is disabled, it'll\n   * remain keyboard-focusable\n   */\n  isFocusable?: boolean\n  /**\n   * Overrides the parent menu's `closeOnSelect` prop.\n   */\n  closeOnSelect?: boolean\n  /**\n   * The type of the menuitem.\n   */\n  type?: React.ButtonHTMLAttributes<HTMLButtonElement>[\"type\"]\n}\n\nexport function useMenuItem(\n  props: UseMenuItemProps = {},\n  externalRef: React.Ref<any> = null,\n) {\n  const {\n    onMouseEnter: onMouseEnterProp,\n    onMouseMove: onMouseMoveProp,\n    onMouseLeave: onMouseLeaveProp,\n    onClick: onClickProp,\n    onFocus: onFocusProp,\n    isDisabled,\n    isFocusable,\n    closeOnSelect,\n    type: typeProp,\n    ...htmlProps\n  } = props\n\n  const menu = useMenuContext()\n\n  const {\n    setFocusedIndex,\n    focusedIndex,\n    closeOnSelect: menuCloseOnSelect,\n    onClose,\n    menuRef,\n    isOpen,\n    menuId,\n    rafId,\n  } = menu\n\n  const ref = useRef<HTMLDivElement>(null)\n  const id = `${menuId}-menuitem-${useId()}`\n\n  /**\n   * Register the menuitem's node into the domContext\n   */\n  const { index, register } = useMenuDescendant({\n    disabled: isDisabled && !isFocusable,\n  })\n\n  const onMouseEnter = useCallback(\n    (event: any) => {\n      onMouseEnterProp?.(event)\n      if (isDisabled) return\n      setFocusedIndex(index)\n    },\n    [setFocusedIndex, index, isDisabled, onMouseEnterProp],\n  )\n\n  const onMouseMove = useCallback(\n    (event: any) => {\n      onMouseMoveProp?.(event)\n      if (ref.current && !isActiveElement(ref.current)) {\n        onMouseEnter(event)\n      }\n    },\n    [onMouseEnter, onMouseMoveProp],\n  )\n\n  const onMouseLeave = useCallback(\n    (event: any) => {\n      onMouseLeaveProp?.(event)\n      if (isDisabled) return\n      setFocusedIndex(-1)\n    },\n    [setFocusedIndex, isDisabled, onMouseLeaveProp],\n  )\n\n  const onClick = useCallback(\n    (event: React.MouseEvent) => {\n      onClickProp?.(event)\n      if (!isTargetMenuItem(event.currentTarget)) return\n      /**\n       * Close menu and parent menus, allowing the MenuItem\n       * to override its parent menu's `closeOnSelect` prop.\n       */\n      if (closeOnSelect ?? menuCloseOnSelect) {\n        onClose()\n      }\n    },\n    [onClose, onClickProp, menuCloseOnSelect, closeOnSelect],\n  )\n\n  const onFocus = useCallback(\n    (event: React.FocusEvent) => {\n      onFocusProp?.(event)\n      setFocusedIndex(index)\n    },\n    [setFocusedIndex, onFocusProp, index],\n  )\n\n  const isFocused = index === focusedIndex\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  useUpdateEffect(() => {\n    if (!isOpen) return\n    if (isFocused && !trulyDisabled && ref.current) {\n      // Cancel any pending animations\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current)\n      }\n      rafId.current = requestAnimationFrame(() => {\n        ref.current?.focus({ preventScroll: true })\n        rafId.current = null\n      })\n    } else if (menuRef.current && !isActiveElement(menuRef.current)) {\n      menuRef.current.focus({ preventScroll: true })\n    }\n\n    return () => {\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current)\n      }\n    }\n  }, [isFocused, trulyDisabled, menuRef, isOpen])\n\n  const clickableProps = useClickable({\n    onClick,\n    onFocus,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    ref: mergeRefs(register, ref, externalRef),\n    isDisabled,\n    isFocusable,\n  })\n\n  return {\n    ...htmlProps,\n    ...clickableProps,\n    type: typeProp ?? (clickableProps as any).type,\n    id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1,\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuOption: Composes useMenuItem to provide a selectable/checkable menu item\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuOptionOptions {\n  value?: string\n  isChecked?: boolean\n  type?: \"radio\" | \"checkbox\"\n  children?: React.ReactNode\n}\n\nexport interface UseMenuOptionProps\n  extends Omit<UseMenuItemProps, \"type\">,\n    UseMenuOptionOptions {}\n\nexport function useMenuOption(\n  props: UseMenuOptionProps = {},\n  ref: React.Ref<any> = null,\n) {\n  const { type = \"radio\", isChecked, ...rest } = props\n  const ownProps = useMenuItem(rest, ref)\n  return {\n    ...ownProps,\n    role: `menuitem${type}`,\n    \"aria-checked\": isChecked as React.AriaAttributes[\"aria-checked\"],\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuOptionGroup: Manages the state of multiple selectable menuitem or menu option\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuOptionGroupProps {\n  value?: string | string[]\n  defaultValue?: string | string[]\n  type?: \"radio\" | \"checkbox\"\n  onChange?: (value: string | string[]) => void\n  children?: React.ReactNode\n}\n\nexport function useMenuOptionGroup(props: UseMenuOptionGroupProps = {}) {\n  const {\n    children,\n    type = \"radio\",\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp,\n    ...htmlProps\n  } = props\n\n  const isRadio = type === \"radio\"\n\n  const fallback = isRadio ? \"\" : []\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue ?? fallback,\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n\n  const onChange = useCallback(\n    (selectedValue: string) => {\n      if (type === \"radio\" && typeof value === \"string\") {\n        setValue(selectedValue)\n      }\n\n      if (type === \"checkbox\" && Array.isArray(value)) {\n        const nextValue = value.includes(selectedValue)\n          ? value.filter((item) => item !== selectedValue)\n          : value.concat(selectedValue)\n\n        setValue(nextValue)\n      }\n    },\n    [value, setValue, type],\n  )\n\n  const validChildren = getValidChildren(children)\n\n  const clones = validChildren.map((child) => {\n    /**\n     * We've added an internal `id` to each `MenuItemOption`,\n     * let's use that for type-checking.\n     *\n     * We can't rely on displayName or the element's type since\n     * they can be changed by the user.\n     */\n    if ((child.type as any).id !== \"MenuItemOption\") return child\n\n    const onClick = (event: MouseEvent) => {\n      onChange(child.props.value)\n      child.props.onClick?.(event)\n    }\n\n    const isChecked =\n      type === \"radio\"\n        ? child.props.value === value\n        : value.includes(child.props.value)\n\n    return cloneElement(child, {\n      type,\n      onClick,\n      isChecked,\n    })\n  })\n\n  return {\n    ...htmlProps,\n    children: clones,\n  }\n}\n\nexport function useMenuState() {\n  const { isOpen, onClose } = useMenuContext()\n  return { isOpen, onClose }\n}\n\nfunction isHTMLElement(el: any): el is HTMLElement {\n  if (!isElement(el)) return false\n  const win = el.ownerDocument.defaultView ?? window\n  return el instanceof win.HTMLElement\n}\n\nfunction isElement(el: any): el is Element {\n  return (\n    el != null &&\n    typeof el == \"object\" &&\n    \"nodeType\" in el &&\n    el.nodeType === Node.ELEMENT_NODE\n  )\n}\n"]},"metadata":{},"sourceType":"module"}