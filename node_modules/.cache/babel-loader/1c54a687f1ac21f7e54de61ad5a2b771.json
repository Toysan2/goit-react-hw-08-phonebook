{"ast":null,"code":"'use client';\n\nimport { PanEvent } from \"./chunk-Z2LY7B4S.mjs\";\n\n// src/use-pan-event.ts\nimport { addPointerEvent } from \"@chakra-ui/event-utils\";\nimport { useLatestRef } from \"@chakra-ui/react-use-latest-ref\";\nimport { useEffect, useRef } from \"react\";\nfunction usePanEvent(ref, options) {\n  var onPan = options.onPan,\n    onPanStart = options.onPanStart,\n    onPanEnd = options.onPanEnd,\n    onPanSessionStart = options.onPanSessionStart,\n    onPanSessionEnd = options.onPanSessionEnd,\n    threshold = options.threshold;\n  var hasPanEvents = Boolean(onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd);\n  var panSession = useRef(null);\n  var handlersRef = useLatestRef({\n    onSessionStart: onPanSessionStart,\n    onSessionEnd: onPanSessionEnd,\n    onStart: onPanStart,\n    onMove: onPan,\n    onEnd: function onEnd(event, info) {\n      panSession.current = null;\n      onPanEnd == null ? void 0 : onPanEnd(event, info);\n    }\n  });\n  useEffect(function () {\n    var _a;\n    (_a = panSession.current) == null ? void 0 : _a.updateHandlers(handlersRef.current);\n  });\n  useEffect(function () {\n    var node = ref.current;\n    if (!node || !hasPanEvents) return;\n    function onPointerDown(event) {\n      panSession.current = new PanEvent(event, handlersRef.current, threshold);\n    }\n    return addPointerEvent(node, \"pointerdown\", onPointerDown);\n  }, [ref, hasPanEvents, handlersRef, threshold]);\n  useEffect(function () {\n    return function () {\n      var _a;\n      (_a = panSession.current) == null ? void 0 : _a.end();\n      panSession.current = null;\n    };\n  }, []);\n}\nexport { usePanEvent };","map":{"version":3,"mappings":";;;;;AAAA,SAASA,uBAAuB;AAChC,SAASC,oBAAoB;AAC7B,SAASC,WAAWC,cAAc;AAa3B,SAASC,YACdC,KACAC,SACA;EACA,IACEC,QAMED,QANFC;IACAC,aAKEF,QALFE;IACAC,WAIEH,QAJFG;IACAC,oBAGEJ,QAHFI;IACAC,kBAEEL,QAFFK;IACAC,YACEN,QADFM;EAGF,IAAMC,eAAeC,QACnBP,SAASC,cAAcC,YAAYC,qBAAqBC,eAC1D;EAEA,IAAMI,aAAaZ,OAAwB,IAAI;EAE/C,IAAMa,cAAcf,aAAwC;IAC1DgB,gBAAgBP;IAChBQ,cAAcP;IACdQ,SAASX;IACTY,QAAQb;IACRc,sBAAMC,OAAOC,MAAM;MACjBR,WAAWS,UAAU;MACrBf,qCAAWa,OAAOC;IACpB;EACF,CAAC;EAEDrB,UAAU,YAAM;IA7ClB;IA8CI,iBAAWsB,YAAX,mBAAoBC,eAAeT,YAAYQ;EACjD,CAAC;EAEDtB,UAAU,YAAM;IACd,IAAMwB,OAAOrB,IAAImB;IAEjB,IAAI,CAACE,QAAQ,CAACb,cAAc;IAE5B,SAASc,cAAcL,OAAwB;MAC7CP,WAAWS,UAAU,IAAII,SAASN,OAAON,YAAYQ,SAASZ,SAAS;IACzE;IAEA,OAAOZ,gBAAgB0B,MAAM,eAAeC,aAAa;EAC3D,GAAG,CAACtB,KAAKQ,cAAcG,aAAaJ,SAAS,CAAC;EAE9CV,UAAU,YAAM;IACd,OAAO,YAAM;MA9DjB;MA+DM,iBAAWsB,YAAX,mBAAoBK;MACpBd,WAAWS,UAAU;IACvB;EACF,GAAG,EAAE;AACP","names":["addPointerEvent","useLatestRef","useEffect","useRef","usePanEvent","ref","options","onPan","onPanStart","onPanEnd","onPanSessionStart","onPanSessionEnd","threshold","hasPanEvents","Boolean","panSession","handlersRef","onSessionStart","onSessionEnd","onStart","onMove","onEnd","event","info","current","updateHandlers","node","onPointerDown","PanEvent","end"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\react-use-pan-event\\src\\use-pan-event.ts"],"sourcesContent":["import { addPointerEvent } from \"@chakra-ui/event-utils\"\nimport { useLatestRef } from \"@chakra-ui/react-use-latest-ref\"\nimport { useEffect, useRef } from \"react\"\nimport { PanEvent } from \"./pan-event\"\nimport { AnyPointerEvent, PanEventHandler, PanEventHandlers } from \"./types\"\n\nexport interface UsePanEventProps {\n  onPan?: PanEventHandler\n  onPanStart?: PanEventHandler\n  onPanEnd?: PanEventHandler\n  onPanSessionStart?: PanEventHandler\n  onPanSessionEnd?: PanEventHandler\n  threshold?: number\n}\n\nexport function usePanEvent(\n  ref: React.RefObject<HTMLElement>,\n  options: UsePanEventProps,\n) {\n  const {\n    onPan,\n    onPanStart,\n    onPanEnd,\n    onPanSessionStart,\n    onPanSessionEnd,\n    threshold,\n  } = options\n\n  const hasPanEvents = Boolean(\n    onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd,\n  )\n\n  const panSession = useRef<PanEvent | null>(null)\n\n  const handlersRef = useLatestRef<Partial<PanEventHandlers>>({\n    onSessionStart: onPanSessionStart,\n    onSessionEnd: onPanSessionEnd,\n    onStart: onPanStart,\n    onMove: onPan,\n    onEnd(event, info) {\n      panSession.current = null\n      onPanEnd?.(event, info)\n    },\n  })\n\n  useEffect(() => {\n    panSession.current?.updateHandlers(handlersRef.current)\n  })\n\n  useEffect(() => {\n    const node = ref.current\n\n    if (!node || !hasPanEvents) return\n\n    function onPointerDown(event: AnyPointerEvent) {\n      panSession.current = new PanEvent(event, handlersRef.current, threshold)\n    }\n\n    return addPointerEvent(node, \"pointerdown\", onPointerDown)\n  }, [ref, hasPanEvents, handlersRef, threshold])\n\n  useEffect(() => {\n    return () => {\n      panSession.current?.end()\n      panSession.current = null\n    }\n  }, [])\n}\n"]},"metadata":{},"sourceType":"module"}