{"ast":null,"code":"'use client';\n\n// src/form-control.tsx\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _excluded = [\"id\", \"isRequired\", \"isInvalid\", \"isDisabled\", \"isReadOnly\"],\n  _excluded2 = [\"getRootProps\", \"htmlProps\"];\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\";\nimport { useCallback, useId, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar _createContext = createContext({\n    name: \"FormControlStylesContext\",\n    errorMessage: \"useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \\\"<FormControl />\\\" \"\n  }),\n  _createContext2 = _slicedToArray(_createContext, 2),\n  FormControlStylesProvider = _createContext2[0],\n  useFormControlStyles = _createContext2[1];\nvar _createContext3 = createContext({\n    strict: false,\n    name: \"FormControlContext\"\n  }),\n  _createContext4 = _slicedToArray(_createContext3, 2),\n  FormControlProvider = _createContext4[0],\n  useFormControlContext = _createContext4[1];\nfunction useFormControlProvider(props) {\n  var idProp = props.id,\n    isRequired = props.isRequired,\n    isInvalid = props.isInvalid,\n    isDisabled = props.isDisabled,\n    isReadOnly = props.isReadOnly,\n    htmlProps = _objectWithoutProperties(props, _excluded);\n  var uuid = useId();\n  var id = idProp || \"field-\".concat(uuid);\n  var labelId = \"\".concat(id, \"-label\");\n  var feedbackId = \"\".concat(id, \"-feedback\");\n  var helpTextId = \"\".concat(id, \"-helptext\");\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    hasFeedbackText = _useState2[0],\n    setHasFeedbackText = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    hasHelpText = _useState4[0],\n    setHasHelpText = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isFocused = _useState6[0],\n    setFocus = _useState6[1];\n  var getHelpTextProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({\n      id: helpTextId\n    }, props2), {}, {\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, function (node) {\n        if (!node) return;\n        setHasHelpText(true);\n      })\n    });\n  }, [helpTextId]);\n  var getLabelProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props2.id !== void 0 ? props2.id : labelId,\n      htmlFor: props2.htmlFor !== void 0 ? props2.htmlFor : id\n    });\n  }, [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId]);\n  var getErrorMessageProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({\n      id: feedbackId\n    }, props2), {}, {\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, function (node) {\n        if (!node) return;\n        setHasFeedbackText(true);\n      }),\n      \"aria-live\": \"polite\"\n    });\n  }, [feedbackId]);\n  var getRootProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread(_objectSpread({}, props2), htmlProps), {}, {\n      ref: forwardedRef,\n      role: \"group\",\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly)\n    });\n  }, [htmlProps, isDisabled, isFocused, isInvalid, isReadOnly]);\n  var getRequiredIndicatorProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props2.children || \"*\"\n    });\n  }, []);\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: function onFocus() {\n      return setFocus(true);\n    },\n    onBlur: function onBlur() {\n      return setFocus(false);\n    },\n    hasFeedbackText: hasFeedbackText,\n    setHasFeedbackText: setHasFeedbackText,\n    hasHelpText: hasHelpText,\n    setHasHelpText: setHasHelpText,\n    id: id,\n    labelId: labelId,\n    feedbackId: feedbackId,\n    helpTextId: helpTextId,\n    htmlProps: htmlProps,\n    getHelpTextProps: getHelpTextProps,\n    getErrorMessageProps: getErrorMessageProps,\n    getRootProps: getRootProps,\n    getLabelProps: getLabelProps,\n    getRequiredIndicatorProps: getRequiredIndicatorProps\n  };\n}\nvar FormControl = forwardRef(function FormControl2(props, ref) {\n  var styles = useMultiStyleConfig(\"Form\", props);\n  var ownProps = omitThemingProps(props);\n  var _useFormControlProvid = useFormControlProvider(ownProps),\n    getRootProps = _useFormControlProvid.getRootProps,\n    _ = _useFormControlProvid.htmlProps,\n    context = _objectWithoutProperties(_useFormControlProvid, _excluded2);\n  var className = cx(\"chakra-form-control\", props.className);\n  return /* @__PURE__ */jsx(FormControlProvider, {\n    value: context,\n    children: /* @__PURE__ */jsx(FormControlStylesProvider, {\n      value: styles,\n      children: /* @__PURE__ */jsx(chakra.div, _objectSpread(_objectSpread({}, getRootProps({}, ref)), {}, {\n        className: className,\n        __css: styles[\"container\"]\n      }))\n    })\n  });\n});\nFormControl.displayName = \"FormControl\";\nvar FormHelperText = forwardRef(function FormHelperText2(props, ref) {\n  var field = useFormControlContext();\n  var styles = useFormControlStyles();\n  var className = cx(\"chakra-form__helper-text\", props.className);\n  return /* @__PURE__ */jsx(chakra.div, _objectSpread(_objectSpread({}, field == null ? void 0 : field.getHelpTextProps(props, ref)), {}, {\n    __css: styles.helperText,\n    className: className\n  }));\n});\nFormHelperText.displayName = \"FormHelperText\";\nexport { useFormControlStyles, useFormControlContext, FormControl, FormHelperText };","map":{"version":3,"mappings":"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","names":["createContext","mergeRefs","chakra","forwardRef","omitThemingProps","useMultiStyleConfig","cx","dataAttr","useCallback","useId","useState","name","errorMessage","_createContext2","FormControlStylesProvider","useFormControlStyles","strict","_createContext4","FormControlProvider","useFormControlContext","useFormControlProvider","props","idProp","id","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","labelId","feedbackId","helpTextId","_useState2","hasFeedbackText","setHasFeedbackText","_useState4","hasHelpText","setHasHelpText","_useState6","isFocused","setFocus","getHelpTextProps","forwardedRef","ref","node","getLabelProps","htmlFor","getErrorMessageProps","getRootProps","role","getRequiredIndicatorProps","children","onFocus","onBlur","FormControl","styles","ownProps","_","context","className","value","div","__css","displayName","FormHelperText","field","helperText"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\form-control\\src\\form-control.tsx"],"sourcesContent":["import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n    }),\n    [htmlProps, isDisabled, isFocused, isInvalid, isReadOnly],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n"]},"metadata":{},"sourceType":"module"}