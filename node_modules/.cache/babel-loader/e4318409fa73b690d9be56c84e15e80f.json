{"ast":null,"code":"'use client';\n\n// src/tag.tsx\nimport _objectWithoutProperties from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _excluded = [\"isDisabled\", \"children\"];\nimport { Icon } from \"@chakra-ui/icon\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar _createContext = createContext({\n    name: \"TagStylesContext\",\n    errorMessage: \"useTagStyles returned is 'undefined'. Seems you forgot to wrap the components in \\\"<Tag />\\\" \"\n  }),\n  _createContext2 = _slicedToArray(_createContext, 2),\n  TagStylesProvider = _createContext2[0],\n  useTagStyles = _createContext2[1];\nvar Tag = forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Tag\", props);\n  var ownProps = omitThemingProps(props);\n  var containerStyles = _objectSpread({\n    display: \"inline-flex\",\n    verticalAlign: \"top\",\n    alignItems: \"center\",\n    maxWidth: \"100%\"\n  }, styles.container);\n  return /* @__PURE__ */jsx(TagStylesProvider, {\n    value: styles,\n    children: /* @__PURE__ */jsx(chakra.span, _objectSpread(_objectSpread({\n      ref: ref\n    }, ownProps), {}, {\n      __css: containerStyles\n    }))\n  });\n});\nTag.displayName = \"Tag\";\nvar TagLabel = forwardRef(function (props, ref) {\n  var styles = useTagStyles();\n  return /* @__PURE__ */jsx(chakra.span, _objectSpread(_objectSpread({\n    ref: ref,\n    noOfLines: 1\n  }, props), {}, {\n    __css: styles.label\n  }));\n});\nTagLabel.displayName = \"TagLabel\";\nvar TagLeftIcon = forwardRef(function (props, ref) {\n  return /* @__PURE__ */jsx(Icon, _objectSpread({\n    ref: ref,\n    verticalAlign: \"top\",\n    marginEnd: \"0.5rem\"\n  }, props));\n});\nTagLeftIcon.displayName = \"TagLeftIcon\";\nvar TagRightIcon = forwardRef(function (props, ref) {\n  return /* @__PURE__ */jsx(Icon, _objectSpread({\n    ref: ref,\n    verticalAlign: \"top\",\n    marginStart: \"0.5rem\"\n  }, props));\n});\nTagRightIcon.displayName = \"TagRightIcon\";\nvar TagCloseIcon = function TagCloseIcon(props) {\n  return /* @__PURE__ */jsx(Icon, _objectSpread(_objectSpread({\n    verticalAlign: \"inherit\",\n    viewBox: \"0 0 512 512\"\n  }, props), {}, {\n    children: /* @__PURE__ */jsx(\"path\", {\n      fill: \"currentColor\",\n      d: \"M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z\"\n    })\n  }));\n};\nTagCloseIcon.displayName = \"TagCloseIcon\";\nvar TagCloseButton = forwardRef(function (props, ref) {\n  var isDisabled = props.isDisabled,\n    children = props.children,\n    rest = _objectWithoutProperties(props, _excluded);\n  var styles = useTagStyles();\n  var btnStyles = _objectSpread({\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    outline: \"0\"\n  }, styles.closeButton);\n  return /* @__PURE__ */jsx(chakra.button, _objectSpread(_objectSpread({\n    ref: ref,\n    \"aria-label\": \"close\"\n  }, rest), {}, {\n    type: \"button\",\n    disabled: isDisabled,\n    __css: btnStyles,\n    children: children || /* @__PURE__ */jsx(TagCloseIcon, {})\n  }));\n});\nTagCloseButton.displayName = \"TagCloseButton\";\nexport { useTagStyles, Tag, TagLabel, TagLeftIcon, TagRightIcon, TagCloseButton };","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,YAAuB;AAChC,SAASC,qBAAqB;AAC9B,SACEC,QACAC,YAEAC,kBAGAC,2BACK;AAkCD;AAhCN,qBAA0CJ,cAExC;IACAK,wBAAM;IACNC;EACF,CAAC;EAAAC;EALMC;EAAmBC,YAAY;AAkB/B,IAAMC,MAAMR,WAA6B,UAACS,OAAOC,KAAQ;EAC9D,IAAMC,SAAST,oBAAoB,OAAOO,KAAK;EAC/C,IAAMG,WAAWX,iBAAiBQ,KAAK;EAEvC,IAAMI;IACJC,SAAS;IACTC,eAAe;IACfC,YAAY;IACZC,UAAU;EAAA,GACPN,OAAOO,UACZ;EAEA,OACE,mBAACZ;IAAkBa,OAAOR;IACxBS,6BAACrB,OAAOsB;MAAKX;IAAA,GAAcE;MAAUU,OAAOT;IAAA,EAAiB;EAAA,CAC/D;AAEJ,CAAC;AAEDL,IAAIe,cAAc;AAIX,IAAMC,WAAWxB,WAAkC,UAACS,OAAOC,KAAQ;EACxE,IAAMC,SAASJ,aAAa;EAC5B,OAAO,mBAACR,OAAOsB;IAAKX;IAAUe,WAAW;EAAA,GAAOhB;IAAOa,OAAOX,OAAOe;EAAA,EAAO;AAC9E,CAAC;AAEDF,SAASD,cAAc;AAEhB,IAAMI,cAAc3B,WAA6B,UAACS,OAAOC;EAAA,OAC9D,mBAACb;IAAKa;IAAUK,eAAc;IAAMa,WAAU;EAAA,GAAanB,MAAO,CACnE;AAAA;AAEDkB,YAAYJ,cAAc;AAEnB,IAAMM,eAAe7B,WAA6B,UAACS,OAAOC;EAAA,OAC/D,mBAACb;IAAKa;IAAUK,eAAc;IAAMe,aAAY;EAAA,GAAarB,MAAO,CACrE;AAAA;AAEDoB,aAAaN,cAAc;AAE3B,IAAMQ,eAAoC,SAApCA,aAAqCtB;EAAA,OACzC,mBAACZ;IAAKkB,eAAc;IAAUiB,SAAQ;EAAA,GAAkBvB;IACtDW,6BAAC;MACCa,MAAK;MACLC,GAAE;IAAA,CACJ;EAAA,EACF;AAAA;AAGFH,aAAaR,cAAc;AAcpB,IAAMY,iBAAiBnC,WAC5B,UAACS,OAAOC,KAAQ;EACd,IAAQ0B,aAAkC3B,MAAlC2B;IAAYhB,WAAsBX,MAAtBW;IAAaiB,gCAAS5B;EAE1C,IAAME,SAASJ,aAAa;EAE5B,IAAM+B;IACJxB,SAAS;IACTE,YAAY;IACZuB,gBAAgB;IAChBC,SAAS;EAAA,GACN7B,OAAO8B,YACZ;EAEA,OACE,mBAAC1C,OAAO2C;IACNhC;IACA,cAAW;EAAA,GACP2B;IACJM,MAAK;IACLC,UAAUR;IACVd,OAAOgB;IAENlB,sBAAY,mBAACW,gBAAa;EAAA,EAC7B;AAEJ,CACF;AAEAI,eAAeZ,cAAc","names":["Icon","createContext","chakra","forwardRef","omitThemingProps","useMultiStyleConfig","name","errorMessage","_createContext2","TagStylesProvider","useTagStyles","Tag","props","ref","styles","ownProps","containerStyles","display","verticalAlign","alignItems","maxWidth","container","value","children","span","__css","displayName","TagLabel","noOfLines","label","TagLeftIcon","marginEnd","TagRightIcon","marginStart","TagCloseIcon","viewBox","fill","d","TagCloseButton","isDisabled","rest","btnStyles","justifyContent","outline","closeButton","button","type","disabled"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\tag\\src\\tag.tsx"],"sourcesContent":["import { Icon, IconProps } from \"@chakra-ui/icon\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\n\nconst [TagStylesProvider, useTagStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `TagStylesContext`,\n  errorMessage: `useTagStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Tag />\" `,\n})\n\nexport { useTagStyles }\n\nexport interface TagProps\n  extends HTMLChakraProps<\"span\">,\n    ThemingProps<\"Tag\"> {}\n\n/**\n * The tag component is used to label or categorize UI elements.\n * To style the tag globally, change the styles in `theme.components.Tag`\n * @see Docs https://chakra-ui.com/tag\n */\nexport const Tag = forwardRef<TagProps, \"span\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Tag\", props)\n  const ownProps = omitThemingProps(props)\n\n  const containerStyles: SystemStyleObject = {\n    display: \"inline-flex\",\n    verticalAlign: \"top\",\n    alignItems: \"center\",\n    maxWidth: \"100%\",\n    ...styles.container,\n  }\n\n  return (\n    <TagStylesProvider value={styles}>\n      <chakra.span ref={ref} {...ownProps} __css={containerStyles} />\n    </TagStylesProvider>\n  )\n})\n\nTag.displayName = \"Tag\"\n\nexport interface TagLabelProps extends HTMLChakraProps<\"span\"> {}\n\nexport const TagLabel = forwardRef<TagLabelProps, \"span\">((props, ref) => {\n  const styles = useTagStyles()\n  return <chakra.span ref={ref} noOfLines={1} {...props} __css={styles.label} />\n})\n\nTagLabel.displayName = \"TagLabel\"\n\nexport const TagLeftIcon = forwardRef<IconProps, \"svg\">((props, ref) => (\n  <Icon ref={ref} verticalAlign=\"top\" marginEnd=\"0.5rem\" {...props} />\n))\n\nTagLeftIcon.displayName = \"TagLeftIcon\"\n\nexport const TagRightIcon = forwardRef<IconProps, \"svg\">((props, ref) => (\n  <Icon ref={ref} verticalAlign=\"top\" marginStart=\"0.5rem\" {...props} />\n))\n\nTagRightIcon.displayName = \"TagRightIcon\"\n\nconst TagCloseIcon: React.FC<IconProps> = (props) => (\n  <Icon verticalAlign=\"inherit\" viewBox=\"0 0 512 512\" {...props}>\n    <path\n      fill=\"currentColor\"\n      d=\"M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z\"\n    />\n  </Icon>\n)\n\nTagCloseIcon.displayName = \"TagCloseIcon\"\n\nexport interface TagCloseButtonProps\n  extends Omit<HTMLChakraProps<\"button\">, \"disabled\"> {\n  /**\n   * @default false\n   */\n  isDisabled?: boolean\n}\n\n/**\n * TagCloseButton is used to close \"remove\" the tag\n * @see Docs https://chakra-ui.com/tag\n */\nexport const TagCloseButton = forwardRef<TagCloseButtonProps, \"button\">(\n  (props, ref) => {\n    const { isDisabled, children, ...rest } = props\n\n    const styles = useTagStyles()\n\n    const btnStyles: SystemStyleObject = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      outline: \"0\",\n      ...styles.closeButton,\n    }\n\n    return (\n      <chakra.button\n        ref={ref}\n        aria-label=\"close\"\n        {...rest}\n        type=\"button\"\n        disabled={isDisabled}\n        __css={btnStyles}\n      >\n        {children || <TagCloseIcon />}\n      </chakra.button>\n    )\n  },\n)\n\nTagCloseButton.displayName = \"TagCloseButton\"\n"]},"metadata":{},"sourceType":"module"}