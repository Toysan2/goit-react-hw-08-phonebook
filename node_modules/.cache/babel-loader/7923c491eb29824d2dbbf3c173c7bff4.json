{"ast":null,"code":"import _asyncToGenerator from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createClass from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _createForOfIteratorHelper from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"E:\\\\GoIT\\\\Zad dom\\\\goit-react-hw-08-phonebook\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n/**\n * @remix-run/router v1.14.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nvar PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options = options,\n    _options$initialEntri = _options.initialEntries,\n    initialEntries = _options$initialEntri === void 0 ? [\"/\"] : _options$initialEntri,\n    initialIndex = _options.initialIndex,\n    _options$v5Compat = _options.v5Compat,\n    v5Compat = _options$v5Compat === void 0 ? false : _options$v5Compat;\n  var entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map(function (entry, index) {\n    return createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined);\n  });\n  var index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  var action = Action.Pop;\n  var listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    var location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  var history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref: createHref,\n    createURL: function createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation: function encodeLocation(to) {\n      var path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push: function push(to, state) {\n      action = Action.Push;\n      var nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace: function replace(to, state) {\n      action = Action.Replace;\n      var nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go: function go(delta) {\n      action = Action.Pop;\n      var nextIndex = clampIndex(index + delta);\n      var nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: delta\n        });\n      }\n    },\n    listen: function listen(fn) {\n      listener = fn;\n      return function () {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    var _window$location = window.location,\n      pathname = _window$location.pathname,\n      search = _window$location.search,\n      hash = _window$location.hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    var _parsePath = parsePath(window.location.hash.substr(1)),\n      _parsePath$pathname = _parsePath.pathname,\n      pathname = _parsePath$pathname === void 0 ? \"/\" : _parsePath$pathname,\n      _parsePath$search = _parsePath.search,\n      search = _parsePath$search === void 0 ? \"\" : _parsePath$search,\n      _parsePath$hash = _parsePath.hash,\n      hash = _parsePath$hash === void 0 ? \"\" : _parsePath$hash;\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    var base = window.document.querySelector(\"base\");\n    var href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      var url = window.location.href;\n      var hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  var location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state: state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  var _ref$pathname = _ref.pathname,\n    pathname = _ref$pathname === void 0 ? \"/\" : _ref$pathname,\n    _ref$search = _ref.search,\n    search = _ref$search === void 0 ? \"\" : _ref$search,\n    _ref$hash = _ref.hash,\n    hash = _ref$hash === void 0 ? \"\" : _ref$hash;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  var parsedPath = {};\n  if (path) {\n    var hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    var searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, _createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options2 = options,\n    _options2$window = _options2.window,\n    window = _options2$window === void 0 ? document.defaultView : _options2$window,\n    _options2$v5Compat = _options2.v5Compat,\n    v5Compat = _options2$v5Compat === void 0 ? false : _options2$v5Compat;\n  var globalHistory = window.history;\n  var action = Action.Pop;\n  var listener = null;\n  var index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    var state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    var nextIndex = getIndex();\n    var delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    var base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    var href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  var history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen: function listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return function () {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref: function createHref(to) {\n      return _createHref(window, to);\n    },\n    createURL: createURL,\n    encodeLocation: function encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      var url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push: push,\n    replace: replace,\n    go: function go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nvar immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map(function (route, index) {\n    var treePath = [].concat(_toConsumableArray(parentPath), [index]);\n    var id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      var indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id: id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      var pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id: id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  var route = match.route,\n    pathname = match.pathname,\n    params = match.params;\n  return {\n    id: route.id,\n    pathname: pathname,\n    params: params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  var flattenRoute = function flattenRoute(route, index, relativePath) {\n    var meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route: route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  };\n  routes.forEach(function (route, index) {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      var _iterator = _createForOfIteratorHelper(explodeOptionalSegments(route.path)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var exploded = _step.value;\n          flattenRoute(route, index, exploded);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  var segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  var _segments = _toArray(segments),\n    first = _segments[0],\n    rest = _segments.slice(1);\n  // Optional path segments are denoted by a trailing `?`\n  var isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  var required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  var restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  var result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push.apply(result, _toConsumableArray(restExploded.map(function (subpath) {\n    return subpath === \"\" ? required : [required, subpath].join(\"/\");\n  })));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push.apply(result, _toConsumableArray(restExploded));\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(function (exploded) {\n    return path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded;\n  });\n}\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\nvar paramRe = /^:[\\w-]+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    var route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route: route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  var path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  var prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  var stringify = function stringify(p) {\n    return p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  };\n  var segments = path.split(/\\/+/).map(function (segment, index, array) {\n    var isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      var star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    var keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      var _keyMatch = _slicedToArray(keyMatch, 3),\n        key = _keyMatch[1],\n        optional = _keyMatch[2];\n      var param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(function (segment) {\n    return !!segment;\n  });\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n    _compilePath2 = _slicedToArray(_compilePath, 2),\n    matcher = _compilePath2[0],\n    compiledParams = _compilePath2[1];\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = compiledParams.reduce(function (memo, _ref, index) {\n    var paramName = _ref.paramName,\n      isOptional = _ref.isOptional;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    var value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = safelyDecodeURIComponent(value || \"\", paramName);\n    }\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  var params = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, function (_, paramName, isOptional) {\n    params.push({\n      paramName: paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  var startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  var nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  var _ref4 = typeof to === \"string\" ? parsePath(to) : to,\n    toPathname = _ref4.pathname,\n    _ref4$search = _ref4.search,\n    search = _ref4$search === void 0 ? \"\" : _ref4$search,\n    _ref4$hash = _ref4.hash,\n    hash = _ref4$hash === void 0 ? \"\" : _ref4$hash;\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter(function (match, index) {\n    return index === 0 || match.route.path && match.route.path.length > 0;\n  });\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  var pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map(function (match, idx) {\n      return idx === matches.length - 1 ? match.pathname : match.pathnameBase;\n    });\n  }\n  return pathMatches.map(function (match) {\n    return match.pathnameBase;\n  });\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  var to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  var isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  var toPathname = isEmptyPath ? \"/\" : to.pathname;\n  var from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1;\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  var path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  var hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  var hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\n/**\n * @private\n */\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\n/**\n * @private\n */\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\n/**\n * @private\n */\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n};\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nvar json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  var headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers: headers\n  }));\n};\nvar AbortedDeferredError = /*#__PURE__*/function (_Error) {\n  _inherits(AbortedDeferredError, _Error);\n  var _super = _createSuper(AbortedDeferredError);\n  function AbortedDeferredError() {\n    _classCallCheck(this, AbortedDeferredError);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(AbortedDeferredError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar DeferredData = /*#__PURE__*/function () {\n  function DeferredData(data, responseInit) {\n    var _this = this;\n    _classCallCheck(this, DeferredData);\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    var reject;\n    this.abortPromise = new Promise(function (_, r) {\n      return reject = r;\n    });\n    this.controller = new AbortController();\n    var onAbort = function onAbort() {\n      return reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    };\n    this.unlistenAbortSignal = function () {\n      return _this.controller.signal.removeEventListener(\"abort\", onAbort);\n    };\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce(function (acc, _ref2) {\n      var _ref5 = _slicedToArray(_ref2, 2),\n        key = _ref5[0],\n        value = _ref5[1];\n      return Object.assign(acc, _defineProperty({}, key, _this.trackPromise(key, value)));\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  _createClass(DeferredData, [{\n    key: \"trackPromise\",\n    value: function trackPromise(key, value) {\n      var _this2 = this;\n      if (!(value instanceof Promise)) {\n        return value;\n      }\n      this.deferredKeys.push(key);\n      this.pendingKeysSet.add(key);\n      // We store a little wrapper promise that will be extended with\n      // _data/_error props upon resolve/reject\n      var promise = Promise.race([value, this.abortPromise]).then(function (data) {\n        return _this2.onSettle(promise, key, undefined, data);\n      }, function (error) {\n        return _this2.onSettle(promise, key, error);\n      });\n      // Register rejection listeners to avoid uncaught promise rejections on\n      // errors or aborted deferred values\n      promise.catch(function () {});\n      Object.defineProperty(promise, \"_tracked\", {\n        get: function get() {\n          return true;\n        }\n      });\n      return promise;\n    }\n  }, {\n    key: \"onSettle\",\n    value: function onSettle(promise, key, error, data) {\n      if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n        this.unlistenAbortSignal();\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        return Promise.reject(error);\n      }\n      this.pendingKeysSet.delete(key);\n      if (this.done) {\n        // Nothing left to abort!\n        this.unlistenAbortSignal();\n      }\n      // If the promise was resolved/rejected with undefined, we'll throw an error as you\n      // should always resolve with a value or null\n      if (error === undefined && data === undefined) {\n        var undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return undefinedError;\n          }\n        });\n        this.emit(false, key);\n        return Promise.reject(undefinedError);\n      }\n      if (data === undefined) {\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        this.emit(false, key);\n        return Promise.reject(error);\n      }\n      Object.defineProperty(promise, \"_data\", {\n        get: function get() {\n          return data;\n        }\n      });\n      this.emit(false, key);\n      return data;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(aborted, settledKey) {\n      this.subscribers.forEach(function (subscriber) {\n        return subscriber(aborted, settledKey);\n      });\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      var _this3 = this;\n      this.subscribers.add(fn);\n      return function () {\n        return _this3.subscribers.delete(fn);\n      };\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _this4 = this;\n      this.controller.abort();\n      this.pendingKeysSet.forEach(function (v, k) {\n        return _this4.pendingKeysSet.delete(k);\n      });\n      this.emit(true);\n    }\n  }, {\n    key: \"resolveData\",\n    value: function () {\n      var _resolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(signal) {\n        var _this5 = this;\n        var aborted, onAbort;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                aborted = false;\n                if (this.done) {\n                  _context.next = 7;\n                  break;\n                }\n                onAbort = function onAbort() {\n                  return _this5.cancel();\n                };\n                signal.addEventListener(\"abort\", onAbort);\n                _context.next = 6;\n                return new Promise(function (resolve) {\n                  _this5.subscribe(function (aborted) {\n                    signal.removeEventListener(\"abort\", onAbort);\n                    if (aborted || _this5.done) {\n                      resolve(aborted);\n                    }\n                  });\n                });\n              case 6:\n                aborted = _context.sent;\n              case 7:\n                return _context.abrupt(\"return\", aborted);\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function resolveData(_x) {\n        return _resolveData.apply(this, arguments);\n      }\n      return resolveData;\n    }()\n  }, {\n    key: \"done\",\n    get: function get() {\n      return this.pendingKeysSet.size === 0;\n    }\n  }, {\n    key: \"unwrappedData\",\n    get: function get() {\n      invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n      return Object.entries(this.data).reduce(function (acc, _ref3) {\n        var _ref6 = _slicedToArray(_ref3, 2),\n          key = _ref6[0],\n          value = _ref6[1];\n        return Object.assign(acc, _defineProperty({}, key, unwrapTrackedPromise(value)));\n      }, {});\n    }\n  }, {\n    key: \"pendingKeys\",\n    get: function get() {\n      return Array.from(this.pendingKeysSet);\n    }\n  }]);\n  return DeferredData;\n}();\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nvar defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nvar redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  var responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  var headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nvar redirectDocument = function redirectDocument(url, init) {\n  var response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nvar ErrorResponseImpl = /*#__PURE__*/_createClass(function ErrorResponseImpl(status, statusText, data, internal) {\n  _classCallCheck(this, ErrorResponseImpl);\n  if (internal === void 0) {\n    internal = false;\n  }\n  this.status = status;\n  this.statusText = statusText || \"\";\n  this.internal = internal;\n  if (data instanceof Error) {\n    this.data = data.toString();\n    this.error = data;\n  } else {\n    this.data = data;\n  }\n});\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\nvar validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nvar validMutationMethods = new Set(validMutationMethodsArr);\nvar validRequestMethodsArr = [\"get\"].concat(validMutationMethodsArr);\nvar validRequestMethods = new Set(validRequestMethodsArr);\nvar redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nvar redirectPreserveMethodStatusCodes = new Set([307, 308]);\nvar IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nvar IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nvar IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nvar ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nvar defaultMapRouteProperties = function defaultMapRouteProperties(route) {\n  return {\n    hasErrorBoundary: Boolean(route.hasErrorBoundary)\n  };\n};\nvar TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  var routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  var isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  var isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  var mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    var detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = function mapRouteProperties(route) {\n      return {\n        hasErrorBoundary: detectErrorBoundary(route)\n      };\n    };\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  var manifest = {};\n  // Routes in tree format for matching\n  var dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  var inFlightDataRoutes;\n  var basename = init.basename || \"/\";\n  // Config driven behavior flags\n  var future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false\n  }, init.future);\n  // Cleanup function for history\n  var unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  var subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  var savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  var getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  var getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  var initialScrollRestored = init.hydrationData != null;\n  var initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  var initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    var error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    var _getShortCircuitMatch = getShortCircuitMatches(dataRoutes),\n      matches = _getShortCircuitMatch.matches,\n      route = _getShortCircuitMatch.route;\n    initialMatches = matches;\n    initialErrors = _defineProperty({}, route.id, error);\n  }\n  var initialized;\n  var hasLazyRoutes = initialMatches.some(function (m) {\n    return m.route.lazy;\n  });\n  var hasLoaders = initialMatches.some(function (m) {\n    return m.route.loader;\n  });\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    var loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    var errors = init.hydrationData ? init.hydrationData.errors : null;\n    initialized = initialMatches.every(function (m) {\n      return m.route.loader && m.route.loader.hydrate !== true && (loaderData && loaderData[m.route.id] !== undefined || errors && errors[m.route.id] !== undefined);\n    });\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  var router;\n  var state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized: initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  var pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  var pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  var pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  var pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  var appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  var removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  var isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  var isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  var cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  var cancelledFetcherLoads = [];\n  // AbortControllers for any in-flight fetchers\n  var fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  var incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  var pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  var fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  var fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  var fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  var activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  var deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  var activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  var blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  var ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(function (_ref) {\n      var historyAction = _ref.action,\n        location = _ref.location,\n        delta = _ref.delta;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      var blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction: historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location: location,\n          proceed: function proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location: location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset: function reset() {\n            var blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers: blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      var _saveAppliedTransitions = function _saveAppliedTransitions() {\n        return persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      };\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = function removePageHideEventListener() {\n        return routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n      };\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach(function (_, key) {\n      return deleteFetcher(key);\n    });\n    state.blockers.forEach(function (_, key) {\n      return deleteBlocker(key);\n    });\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return function () {\n      return subscribers.delete(fn);\n    };\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    var completedFetchers = [];\n    var deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach(function (fetcher, key) {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    _toConsumableArray(subscribers).forEach(function (subscriber) {\n      return subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true\n      });\n    });\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(function (key) {\n        return state.fetchers.delete(key);\n      });\n      deletedFetchersKeys.forEach(function (key) {\n        return deleteFetcher(key);\n      });\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    var _ref7 = _temp === void 0 ? {} : _temp,\n      flushSync = _ref7.flushSync;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    var isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    var actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    var loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    var blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach(function (_, k) {\n        return blockers.set(k, IDLE_BLOCKER);\n      });\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    var preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    var viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      var priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      var toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData: actionData,\n      loaderData: loaderData,\n      historyAction: pendingAction,\n      location: location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: preventScrollReset,\n      blockers: blockers\n    }), {\n      viewTransitionOpts: viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  function navigate(_x2, _x3) {\n    return _navigate.apply(this, arguments);\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function _navigate() {\n    _navigate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(to, opts) {\n      var normalizedPath, _normalizeNavigateOpt2, path, submission, error, currentLocation, nextLocation, userReplace, historyAction, preventScrollReset, flushSync, blockerKey;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(typeof to === \"number\")) {\n                _context2.next = 3;\n                break;\n              }\n              init.history.go(to);\n              return _context2.abrupt(\"return\");\n            case 3:\n              normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n              _normalizeNavigateOpt2 = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts), path = _normalizeNavigateOpt2.path, submission = _normalizeNavigateOpt2.submission, error = _normalizeNavigateOpt2.error;\n              currentLocation = state.location;\n              nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n              // URL from window.location, so we need to encode it here so the behavior\n              // remains the same as POP and non-data-router usages.  new URL() does all\n              // the same encoding we'd get from a history.pushState/window.location read\n              // without having to touch history\n              nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n              userReplace = opts && opts.replace != null ? opts.replace : undefined;\n              historyAction = Action.Push;\n              if (userReplace === true) {\n                historyAction = Action.Replace;\n              } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n                // By default on submissions to the current location we REPLACE so that\n                // users don't have to double-click the back button to get to the prior\n                // location.  If the user redirects to a different location from the\n                // action/loader this will be ignored and the redirect will be a PUSH\n                historyAction = Action.Replace;\n              }\n              preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n              flushSync = (opts && opts.unstable_flushSync) === true;\n              blockerKey = shouldBlockNavigation({\n                currentLocation: currentLocation,\n                nextLocation: nextLocation,\n                historyAction: historyAction\n              });\n              if (!blockerKey) {\n                _context2.next = 17;\n                break;\n              }\n              // Put the blocker into a blocked state\n              updateBlocker(blockerKey, {\n                state: \"blocked\",\n                location: nextLocation,\n                proceed: function proceed() {\n                  updateBlocker(blockerKey, {\n                    state: \"proceeding\",\n                    proceed: undefined,\n                    reset: undefined,\n                    location: nextLocation\n                  });\n                  // Send the same navigation through\n                  navigate(to, opts);\n                },\n                reset: function reset() {\n                  var blockers = new Map(state.blockers);\n                  blockers.set(blockerKey, IDLE_BLOCKER);\n                  updateState({\n                    blockers: blockers\n                  });\n                }\n              });\n              return _context2.abrupt(\"return\");\n            case 17:\n              _context2.next = 19;\n              return startNavigation(historyAction, nextLocation, {\n                submission: submission,\n                // Send through the formData serialization error if we have one so we can\n                // render at the right error boundary after we match routes\n                pendingError: error,\n                preventScrollReset: preventScrollReset,\n                replace: opts && opts.replace,\n                enableViewTransition: opts && opts.unstable_viewTransition,\n                flushSync: flushSync\n              });\n            case 19:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 20:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _navigate.apply(this, arguments);\n  }\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  function startNavigation(_x4, _x5, _x6) {\n    return _startNavigation.apply(this, arguments);\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  function _startNavigation() {\n    _startNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(historyAction, location, opts) {\n      var routesToUse, loadingNavigation, matches, flushSync, _error, _getShortCircuitMatch2, notFoundMatches, _route, request, pendingActionData, pendingError, actionOutput, _yield$handleLoaders, shortCircuited, loaderData, errors;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // Abort any in-progress navigations and start a new one. Unset any ongoing\n              // uninterrupted revalidations unless told otherwise, since we want this\n              // new navigation to update history normally\n              pendingNavigationController && pendingNavigationController.abort();\n              pendingNavigationController = null;\n              pendingAction = historyAction;\n              isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n              // Save the current scroll position every time we start a new navigation,\n              // and track whether we should reset scroll on completion\n              saveScrollPosition(state.location, state.matches);\n              pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n              pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n              routesToUse = inFlightDataRoutes || dataRoutes;\n              loadingNavigation = opts && opts.overrideNavigation;\n              matches = matchRoutes(routesToUse, location, basename);\n              flushSync = (opts && opts.flushSync) === true; // Short circuit with a 404 on the root error boundary if we match nothing\n              if (matches) {\n                _context3.next = 17;\n                break;\n              }\n              _error = getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n              _getShortCircuitMatch2 = getShortCircuitMatches(routesToUse), notFoundMatches = _getShortCircuitMatch2.matches, _route = _getShortCircuitMatch2.route; // Cancel all pending deferred on 404s since we don't keep any routes\n              cancelActiveDeferreds();\n              completeNavigation(location, {\n                matches: notFoundMatches,\n                loaderData: {},\n                errors: _defineProperty({}, _route.id, _error)\n              }, {\n                flushSync: flushSync\n              });\n              return _context3.abrupt(\"return\");\n            case 17:\n              if (!(state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod)))) {\n                _context3.next = 20;\n                break;\n              }\n              completeNavigation(location, {\n                matches: matches\n              }, {\n                flushSync: flushSync\n              });\n              return _context3.abrupt(\"return\");\n            case 20:\n              // Create a controller/Request for this navigation\n              pendingNavigationController = new AbortController();\n              request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n              if (!(opts && opts.pendingError)) {\n                _context3.next = 26;\n                break;\n              }\n              // If we have a pendingError, it means the user attempted a GET submission\n              // with binary FormData so assign here and skip to handleLoaders.  That\n              // way we handle calling loaders above the boundary etc.  It's not really\n              // different from an actionError in that sense.\n              pendingError = _defineProperty({}, findNearestBoundary(matches).route.id, opts.pendingError);\n              _context3.next = 37;\n              break;\n            case 26:\n              if (!(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n                _context3.next = 37;\n                break;\n              }\n              _context3.next = 29;\n              return handleAction(request, location, opts.submission, matches, {\n                replace: opts.replace,\n                flushSync: flushSync\n              });\n            case 29:\n              actionOutput = _context3.sent;\n              if (!actionOutput.shortCircuited) {\n                _context3.next = 32;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 32:\n              pendingActionData = actionOutput.pendingActionData;\n              pendingError = actionOutput.pendingActionError;\n              loadingNavigation = getLoadingNavigation(location, opts.submission);\n              flushSync = false;\n              // Create a GET request for the loaders\n              request = new Request(request.url, {\n                signal: request.signal\n              });\n            case 37:\n              _context3.next = 39;\n              return handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionData, pendingError);\n            case 39:\n              _yield$handleLoaders = _context3.sent;\n              shortCircuited = _yield$handleLoaders.shortCircuited;\n              loaderData = _yield$handleLoaders.loaderData;\n              errors = _yield$handleLoaders.errors;\n              if (!shortCircuited) {\n                _context3.next = 45;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 45:\n              // Clean up now that the action/loaders have completed.  Don't clean up if\n              // we short circuited because pendingNavigationController will have already\n              // been assigned to a new controller for the next navigation\n              pendingNavigationController = null;\n              completeNavigation(location, _extends({\n                matches: matches\n              }, pendingActionData ? {\n                actionData: pendingActionData\n              } : {}, {\n                loaderData: loaderData,\n                errors: errors\n              }));\n            case 47:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _startNavigation.apply(this, arguments);\n  }\n  function handleAction(_x7, _x8, _x9, _x10, _x11) {\n    return _handleAction.apply(this, arguments);\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  function _handleAction() {\n    _handleAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(request, location, submission, matches, opts) {\n      var navigation, result, actionMatch, replace, boundaryMatch;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (opts === void 0) {\n                opts = {};\n              }\n              interruptActiveLoads();\n              // Put us in a submitting state\n              navigation = getSubmittingNavigation(location, submission);\n              updateState({\n                navigation: navigation\n              }, {\n                flushSync: opts.flushSync === true\n              });\n              // Call our action and get the result\n              actionMatch = getTargetMatch(matches, location);\n              if (!(!actionMatch.route.action && !actionMatch.route.lazy)) {\n                _context4.next = 9;\n                break;\n              }\n              result = {\n                type: ResultType.error,\n                error: getInternalRouterError(405, {\n                  method: request.method,\n                  pathname: location.pathname,\n                  routeId: actionMatch.route.id\n                })\n              };\n              _context4.next = 14;\n              break;\n            case 9:\n              _context4.next = 11;\n              return callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n            case 11:\n              result = _context4.sent;\n              if (!request.signal.aborted) {\n                _context4.next = 14;\n                break;\n              }\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n            case 14:\n              if (!isRedirectResult(result)) {\n                _context4.next = 19;\n                break;\n              }\n              if (opts && opts.replace != null) {\n                replace = opts.replace;\n              } else {\n                // If the user didn't explicity indicate replace behavior, replace if\n                // we redirected to the exact same location we're currently at to avoid\n                // double back-buttons\n                replace = result.location === state.location.pathname + state.location.search;\n              }\n              _context4.next = 18;\n              return startRedirectNavigation(state, result, {\n                submission: submission,\n                replace: replace\n              });\n            case 18:\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n            case 19:\n              if (!isErrorResult(result)) {\n                _context4.next = 23;\n                break;\n              }\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n              // action threw an error that'll be rendered in an errorElement, we fall\n              // back to PUSH so that the user can use the back button to get back to\n              // the pre-submission form location to try again\n              if ((opts && opts.replace) !== true) {\n                pendingAction = Action.Push;\n              }\n              return _context4.abrupt(\"return\", {\n                // Send back an empty object we can use to clear out any prior actionData\n                pendingActionData: {},\n                pendingActionError: _defineProperty({}, boundaryMatch.route.id, result.error)\n              });\n            case 23:\n              if (!isDeferredResult(result)) {\n                _context4.next = 25;\n                break;\n              }\n              throw getInternalRouterError(400, {\n                type: \"defer-action\"\n              });\n            case 25:\n              return _context4.abrupt(\"return\", {\n                pendingActionData: _defineProperty({}, actionMatch.route.id, result.data)\n              });\n            case 26:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _handleAction.apply(this, arguments);\n  }\n  function handleLoaders(_x12, _x13, _x14, _x15, _x16, _x17, _x18, _x19, _x20, _x21, _x22) {\n    return _handleLoaders.apply(this, arguments);\n  } // Trigger a fetcher load/submit for the given fetcher key\n  function _handleLoaders() {\n    _handleLoaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionData, pendingError) {\n      var loadingNavigation, activeSubmission, routesToUse, _getMatchesToLoad, _getMatchesToLoad2, matchesToLoad, revalidatingFetchers, _updatedFetchers, actionData, abortPendingFetchRevalidations, _yield$callLoadersAnd, results, loaderResults, fetcherResults, redirect, fetcherKey, _processLoaderData, loaderData, errors, updatedFetchers, didAbortFetchLoads, shouldUpdateFetchers;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              // Figure out the right navigation we want to use for data loading\n              loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission); // If this was a redirect from an action we don't have a \"submission\" but\n              // we have it on the loading navigation so use that if available\n              activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n              routesToUse = inFlightDataRoutes || dataRoutes;\n              _getMatchesToLoad = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError), _getMatchesToLoad2 = _slicedToArray(_getMatchesToLoad, 2), matchesToLoad = _getMatchesToLoad2[0], revalidatingFetchers = _getMatchesToLoad2[1]; // Cancel pending deferreds for no-longer-matched routes or routes we're\n              // about to reload.  Note that if this is an action reload we would have\n              // already cancelled all pending deferreds so this would be a no-op\n              cancelActiveDeferreds(function (routeId) {\n                return !(matches && matches.some(function (m) {\n                  return m.route.id === routeId;\n                })) || matchesToLoad && matchesToLoad.some(function (m) {\n                  return m.route.id === routeId;\n                });\n              });\n              pendingNavigationLoadId = ++incrementingLoadId;\n              // Short circuit if we have no loaders to run\n              if (!(matchesToLoad.length === 0 && revalidatingFetchers.length === 0)) {\n                _context5.next = 10;\n                break;\n              }\n              _updatedFetchers = markFetchRedirectsDone();\n              completeNavigation(location, _extends({\n                matches: matches,\n                loaderData: {},\n                // Commit pending error if we're short circuiting\n                errors: pendingError || null\n              }, pendingActionData ? {\n                actionData: pendingActionData\n              } : {}, _updatedFetchers ? {\n                fetchers: new Map(state.fetchers)\n              } : {}), {\n                flushSync: flushSync\n              });\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n            case 10:\n              // If this is an uninterrupted revalidation, we remain in our current idle\n              // state.  If not, we need to switch to our loading state and load data,\n              // preserving any new action data or existing action data (in the case of\n              // a revalidation interrupting an actionReload)\n              // If we have partialHydration enabled, then don't update the state for the\n              // initial data load since iot's not a \"navigation\"\n              if (!isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration)) {\n                revalidatingFetchers.forEach(function (rf) {\n                  var fetcher = state.fetchers.get(rf.key);\n                  var revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n                  state.fetchers.set(rf.key, revalidatingFetcher);\n                });\n                actionData = pendingActionData || state.actionData;\n                updateState(_extends({\n                  navigation: loadingNavigation\n                }, actionData ? Object.keys(actionData).length === 0 ? {\n                  actionData: null\n                } : {\n                  actionData: actionData\n                } : {}, revalidatingFetchers.length > 0 ? {\n                  fetchers: new Map(state.fetchers)\n                } : {}), {\n                  flushSync: flushSync\n                });\n              }\n              revalidatingFetchers.forEach(function (rf) {\n                if (fetchControllers.has(rf.key)) {\n                  abortFetcher(rf.key);\n                }\n                if (rf.controller) {\n                  // Fetchers use an independent AbortController so that aborting a fetcher\n                  // (via deleteFetcher) does not abort the triggering navigation that\n                  // triggered the revalidation\n                  fetchControllers.set(rf.key, rf.controller);\n                }\n              });\n              // Proxy navigation abort through to revalidation fetchers\n              abortPendingFetchRevalidations = function abortPendingFetchRevalidations() {\n                return revalidatingFetchers.forEach(function (f) {\n                  return abortFetcher(f.key);\n                });\n              };\n              if (pendingNavigationController) {\n                pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n              }\n              _context5.next = 16;\n              return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n            case 16:\n              _yield$callLoadersAnd = _context5.sent;\n              results = _yield$callLoadersAnd.results;\n              loaderResults = _yield$callLoadersAnd.loaderResults;\n              fetcherResults = _yield$callLoadersAnd.fetcherResults;\n              if (!request.signal.aborted) {\n                _context5.next = 22;\n                break;\n              }\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n            case 22:\n              // Clean up _after_ loaders have completed.  Don't clean up if we short\n              // circuited because fetchControllers would have been aborted and\n              // reassigned to new controllers for the next navigation\n              if (pendingNavigationController) {\n                pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n              }\n              revalidatingFetchers.forEach(function (rf) {\n                return fetchControllers.delete(rf.key);\n              });\n              // If any loaders returned a redirect Response, start a new REPLACE navigation\n              redirect = findRedirect(results);\n              if (!redirect) {\n                _context5.next = 30;\n                break;\n              }\n              if (redirect.idx >= matchesToLoad.length) {\n                // If this redirect came from a fetcher make sure we mark it in\n                // fetchRedirectIds so it doesn't get revalidated on the next set of\n                // loader executions\n                fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n                fetchRedirectIds.add(fetcherKey);\n              }\n              _context5.next = 29;\n              return startRedirectNavigation(state, redirect.result, {\n                replace: replace\n              });\n            case 29:\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n            case 30:\n              // Process and commit output from loaders\n              _processLoaderData = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData.loaderData, errors = _processLoaderData.errors; // Wire up subscribers to update loaderData as promises settle\n              activeDeferreds.forEach(function (deferredData, routeId) {\n                deferredData.subscribe(function (aborted) {\n                  // Note: No need to updateState here since the TrackedPromise on\n                  // loaderData is stable across resolve/reject\n                  // Remove this instance if we were aborted or if promises have settled\n                  if (aborted || deferredData.done) {\n                    activeDeferreds.delete(routeId);\n                  }\n                });\n              });\n              updatedFetchers = markFetchRedirectsDone();\n              didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n              shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n              return _context5.abrupt(\"return\", _extends({\n                loaderData: loaderData,\n                errors: errors\n              }, shouldUpdateFetchers ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n            case 36:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _handleLoaders.apply(this, arguments);\n  }\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    var flushSync = (opts && opts.unstable_flushSync) === true;\n    var routesToUse = inFlightDataRoutes || dataRoutes;\n    var normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    var matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync: flushSync\n      });\n      return;\n    }\n    var _normalizeNavigateOpt = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts),\n      path = _normalizeNavigateOpt.path,\n      submission = _normalizeNavigateOpt.submission,\n      error = _normalizeNavigateOpt.error;\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync: flushSync\n      });\n      return;\n    }\n    var match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, flushSync, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId: routeId,\n      path: path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  function handleFetcherAction(_x23, _x24, _x25, _x26, _x27, _x28, _x29) {\n    return _handleFetcherAction.apply(this, arguments);\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  function _handleFetcherAction() {\n    _handleFetcherAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(key, routeId, path, match, requestMatches, flushSync, submission) {\n      var _error2, existingFetcher, abortController, fetchRequest, originatingLoadId, actionResult, nextLocation, revalidationRequest, routesToUse, matches, loadId, loadFetcher, _getMatchesToLoad3, _getMatchesToLoad4, matchesToLoad, revalidatingFetchers, abortPendingFetchRevalidations, _yield$callLoadersAnd2, results, loaderResults, fetcherResults, redirect, fetcherKey, _processLoaderData2, loaderData, errors, doneFetcher;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              interruptActiveLoads();\n              fetchLoadMatches.delete(key);\n              if (!(!match.route.action && !match.route.lazy)) {\n                _context6.next = 6;\n                break;\n              }\n              _error2 = getInternalRouterError(405, {\n                method: submission.formMethod,\n                pathname: path,\n                routeId: routeId\n              });\n              setFetcherError(key, routeId, _error2, {\n                flushSync: flushSync\n              });\n              return _context6.abrupt(\"return\");\n            case 6:\n              // Put this fetcher into it's submitting state\n              existingFetcher = state.fetchers.get(key);\n              updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n                flushSync: flushSync\n              });\n              // Call the action for the fetcher\n              abortController = new AbortController();\n              fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n              fetchControllers.set(key, abortController);\n              originatingLoadId = incrementingLoadId;\n              _context6.next = 14;\n              return callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n            case 14:\n              actionResult = _context6.sent;\n              if (!fetchRequest.signal.aborted) {\n                _context6.next = 18;\n                break;\n              }\n              // We can delete this so long as we weren't aborted by our own fetcher\n              // re-submit which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n              return _context6.abrupt(\"return\");\n            case 18:\n              if (!(future.v7_fetcherPersist && deletedFetchers.has(key))) {\n                _context6.next = 24;\n                break;\n              }\n              if (!(isRedirectResult(actionResult) || isErrorResult(actionResult))) {\n                _context6.next = 22;\n                break;\n              }\n              updateFetcherState(key, getDoneFetcher(undefined));\n              return _context6.abrupt(\"return\");\n            case 22:\n              _context6.next = 37;\n              break;\n            case 24:\n              if (!isRedirectResult(actionResult)) {\n                _context6.next = 34;\n                break;\n              }\n              fetchControllers.delete(key);\n              if (!(pendingNavigationLoadId > originatingLoadId)) {\n                _context6.next = 31;\n                break;\n              }\n              // A new navigation was kicked off after our action started, so that\n              // should take precedence over this redirect navigation.  We already\n              // set isRevalidationRequired so all loaders for the new route should\n              // fire unless opted out via shouldRevalidate\n              updateFetcherState(key, getDoneFetcher(undefined));\n              return _context6.abrupt(\"return\");\n            case 31:\n              fetchRedirectIds.add(key);\n              updateFetcherState(key, getLoadingFetcher(submission));\n              return _context6.abrupt(\"return\", startRedirectNavigation(state, actionResult, {\n                fetcherSubmission: submission\n              }));\n            case 34:\n              if (!isErrorResult(actionResult)) {\n                _context6.next = 37;\n                break;\n              }\n              setFetcherError(key, routeId, actionResult.error);\n              return _context6.abrupt(\"return\");\n            case 37:\n              if (!isDeferredResult(actionResult)) {\n                _context6.next = 39;\n                break;\n              }\n              throw getInternalRouterError(400, {\n                type: \"defer-action\"\n              });\n            case 39:\n              // Start the data load for current matches, or the next location if we're\n              // in the middle of a navigation\n              nextLocation = state.navigation.location || state.location;\n              revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n              routesToUse = inFlightDataRoutes || dataRoutes;\n              matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n              invariant(matches, \"Didn't find any matches after fetcher action\");\n              loadId = ++incrementingLoadId;\n              fetchReloadIds.set(key, loadId);\n              loadFetcher = getLoadingFetcher(submission, actionResult.data);\n              state.fetchers.set(key, loadFetcher);\n              _getMatchesToLoad3 = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, _defineProperty({}, match.route.id, actionResult.data), undefined // No need to send through errors since we short circuit above\n              ), _getMatchesToLoad4 = _slicedToArray(_getMatchesToLoad3, 2), matchesToLoad = _getMatchesToLoad4[0], revalidatingFetchers = _getMatchesToLoad4[1]; // Put all revalidating fetchers into the loading state, except for the\n              // current fetcher which we want to keep in it's current loading state which\n              // contains it's action submission info + action data\n              revalidatingFetchers.filter(function (rf) {\n                return rf.key !== key;\n              }).forEach(function (rf) {\n                var staleKey = rf.key;\n                var existingFetcher = state.fetchers.get(staleKey);\n                var revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n                state.fetchers.set(staleKey, revalidatingFetcher);\n                if (fetchControllers.has(staleKey)) {\n                  abortFetcher(staleKey);\n                }\n                if (rf.controller) {\n                  fetchControllers.set(staleKey, rf.controller);\n                }\n              });\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n              abortPendingFetchRevalidations = function abortPendingFetchRevalidations() {\n                return revalidatingFetchers.forEach(function (rf) {\n                  return abortFetcher(rf.key);\n                });\n              };\n              abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n              _context6.next = 55;\n              return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n            case 55:\n              _yield$callLoadersAnd2 = _context6.sent;\n              results = _yield$callLoadersAnd2.results;\n              loaderResults = _yield$callLoadersAnd2.loaderResults;\n              fetcherResults = _yield$callLoadersAnd2.fetcherResults;\n              if (!abortController.signal.aborted) {\n                _context6.next = 61;\n                break;\n              }\n              return _context6.abrupt(\"return\");\n            case 61:\n              abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n              fetchReloadIds.delete(key);\n              fetchControllers.delete(key);\n              revalidatingFetchers.forEach(function (r) {\n                return fetchControllers.delete(r.key);\n              });\n              redirect = findRedirect(results);\n              if (!redirect) {\n                _context6.next = 69;\n                break;\n              }\n              if (redirect.idx >= matchesToLoad.length) {\n                // If this redirect came from a fetcher make sure we mark it in\n                // fetchRedirectIds so it doesn't get revalidated on the next set of\n                // loader executions\n                fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n                fetchRedirectIds.add(fetcherKey);\n              }\n              return _context6.abrupt(\"return\", startRedirectNavigation(state, redirect.result));\n            case 69:\n              // Process and commit output from loaders\n              _processLoaderData2 = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData2.loaderData, errors = _processLoaderData2.errors; // Since we let revalidations complete even if the submitting fetcher was\n              // deleted, only put it back to idle if it hasn't been deleted\n              if (state.fetchers.has(key)) {\n                doneFetcher = getDoneFetcher(actionResult.data);\n                state.fetchers.set(key, doneFetcher);\n              }\n              abortStaleFetchLoads(loadId);\n              // If we are currently in a navigation loading state and this fetcher is\n              // more recent than the navigation, we want the newer data so abort the\n              // navigation and complete it with the fetcher data\n              if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n                invariant(pendingAction, \"Expected pending action\");\n                pendingNavigationController && pendingNavigationController.abort();\n                completeNavigation(state.navigation.location, {\n                  matches: matches,\n                  loaderData: loaderData,\n                  errors: errors,\n                  fetchers: new Map(state.fetchers)\n                });\n              } else {\n                // otherwise just update with the fetcher data, preserving any existing\n                // loaderData for loaders that did not need to reload.  We have to\n                // manually merge here since we aren't going through completeNavigation\n                updateState({\n                  errors: errors,\n                  loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n                  fetchers: new Map(state.fetchers)\n                });\n                isRevalidationRequired = false;\n              }\n            case 73:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _handleFetcherAction.apply(this, arguments);\n  }\n  function handleFetcherLoader(_x30, _x31, _x32, _x33, _x34, _x35, _x36) {\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  function _handleFetcherLoader() {\n    _handleFetcherLoader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(key, routeId, path, match, matches, flushSync, submission) {\n      var existingFetcher, abortController, fetchRequest, originatingLoadId, result;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              existingFetcher = state.fetchers.get(key);\n              updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n                flushSync: flushSync\n              });\n              // Call the loader for this fetcher route match\n              abortController = new AbortController();\n              fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n              fetchControllers.set(key, abortController);\n              originatingLoadId = incrementingLoadId;\n              _context7.next = 8;\n              return callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n            case 8:\n              result = _context7.sent;\n              if (!isDeferredResult(result)) {\n                _context7.next = 16;\n                break;\n              }\n              _context7.next = 12;\n              return resolveDeferredData(result, fetchRequest.signal, true);\n            case 12:\n              _context7.t0 = _context7.sent;\n              if (_context7.t0) {\n                _context7.next = 15;\n                break;\n              }\n              _context7.t0 = result;\n            case 15:\n              result = _context7.t0;\n            case 16:\n              // We can delete this so long as we weren't aborted by our our own fetcher\n              // re-load which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n              if (!fetchRequest.signal.aborted) {\n                _context7.next = 19;\n                break;\n              }\n              return _context7.abrupt(\"return\");\n            case 19:\n              if (!deletedFetchers.has(key)) {\n                _context7.next = 22;\n                break;\n              }\n              updateFetcherState(key, getDoneFetcher(undefined));\n              return _context7.abrupt(\"return\");\n            case 22:\n              if (!isRedirectResult(result)) {\n                _context7.next = 32;\n                break;\n              }\n              if (!(pendingNavigationLoadId > originatingLoadId)) {\n                _context7.next = 28;\n                break;\n              }\n              // A new navigation was kicked off after our loader started, so that\n              // should take precedence over this redirect navigation\n              updateFetcherState(key, getDoneFetcher(undefined));\n              return _context7.abrupt(\"return\");\n            case 28:\n              fetchRedirectIds.add(key);\n              _context7.next = 31;\n              return startRedirectNavigation(state, result);\n            case 31:\n              return _context7.abrupt(\"return\");\n            case 32:\n              if (!isErrorResult(result)) {\n                _context7.next = 35;\n                break;\n              }\n              setFetcherError(key, routeId, result.error);\n              return _context7.abrupt(\"return\");\n            case 35:\n              invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n              // Put the fetcher back into an idle state\n              updateFetcherState(key, getDoneFetcher(result.data));\n            case 37:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  function startRedirectNavigation(_x37, _x38, _x39) {\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n  function _startRedirectNavigation() {\n    _startRedirectNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(state, redirect, _temp2) {\n      var _ref8, submission, fetcherSubmission, replace, redirectLocation, isDocumentReload, url, redirectHistoryAction, _state$navigation, formMethod, formAction, formEncType, activeSubmission, overrideNavigation;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _ref8 = _temp2 === void 0 ? {} : _temp2, submission = _ref8.submission, fetcherSubmission = _ref8.fetcherSubmission, replace = _ref8.replace;\n              if (redirect.revalidate) {\n                isRevalidationRequired = true;\n              }\n              redirectLocation = createLocation(state.location, redirect.location, {\n                _isRedirect: true\n              });\n              invariant(redirectLocation, \"Expected a location on the redirect navigation\");\n              if (!isBrowser) {\n                _context8.next = 10;\n                break;\n              }\n              isDocumentReload = false;\n              if (redirect.reloadDocument) {\n                // Hard reload if the response contained X-Remix-Reload-Document\n                isDocumentReload = true;\n              } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n                url = init.history.createURL(redirect.location);\n                isDocumentReload =\n                // Hard reload if it's an absolute URL to a new origin\n                url.origin !== routerWindow.location.origin ||\n                // Hard reload if it's an absolute URL that does not match our basename\n                stripBasename(url.pathname, basename) == null;\n              }\n              if (!isDocumentReload) {\n                _context8.next = 10;\n                break;\n              }\n              if (replace) {\n                routerWindow.location.replace(redirect.location);\n              } else {\n                routerWindow.location.assign(redirect.location);\n              }\n              return _context8.abrupt(\"return\");\n            case 10:\n              // There's no need to abort on redirects, since we don't detect the\n              // redirect until the action/loaders have settled\n              pendingNavigationController = null;\n              redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n              // state.navigation\n              _state$navigation = state.navigation, formMethod = _state$navigation.formMethod, formAction = _state$navigation.formAction, formEncType = _state$navigation.formEncType;\n              if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n                submission = getSubmissionFromNavigation(state.navigation);\n              }\n              // If this was a 307/308 submission we want to preserve the HTTP method and\n              // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n              // redirected location\n              activeSubmission = submission || fetcherSubmission;\n              if (!(redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod))) {\n                _context8.next = 20;\n                break;\n              }\n              _context8.next = 18;\n              return startNavigation(redirectHistoryAction, redirectLocation, {\n                submission: _extends({}, activeSubmission, {\n                  formAction: redirect.location\n                }),\n                // Preserve this flag across redirects\n                preventScrollReset: pendingPreventScrollReset\n              });\n            case 18:\n              _context8.next = 23;\n              break;\n            case 20:\n              // If we have a navigation submission, we will preserve it through the\n              // redirect navigation\n              overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n              _context8.next = 23;\n              return startNavigation(redirectHistoryAction, redirectLocation, {\n                overrideNavigation: overrideNavigation,\n                // Send fetcher submissions through for shouldRevalidate\n                fetcherSubmission: fetcherSubmission,\n                // Preserve this flag across redirects\n                preventScrollReset: pendingPreventScrollReset\n              });\n            case 23:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n  function callLoadersAndMaybeResolveData(_x40, _x41, _x42, _x43, _x44) {\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n  function _callLoadersAndMaybeResolveData() {\n    _callLoadersAndMaybeResolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n      var results, loaderResults, fetcherResults;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return Promise.all([].concat(_toConsumableArray(matchesToLoad.map(function (match) {\n                return callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n              })), _toConsumableArray(fetchersToLoad.map(function (f) {\n                if (f.matches && f.match && f.controller) {\n                  return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n                } else {\n                  var _error3 = {\n                    type: ResultType.error,\n                    error: getInternalRouterError(404, {\n                      pathname: f.path\n                    })\n                  };\n                  return _error3;\n                }\n              }))));\n            case 2:\n              results = _context9.sent;\n              loaderResults = results.slice(0, matchesToLoad.length);\n              fetcherResults = results.slice(matchesToLoad.length);\n              _context9.next = 7;\n              return Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(function () {\n                return request.signal;\n              }), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(function (f) {\n                return f.match;\n              }), fetcherResults, fetchersToLoad.map(function (f) {\n                return f.controller ? f.controller.signal : null;\n              }), true)]);\n            case 7:\n              return _context9.abrupt(\"return\", {\n                results: results,\n                loaderResults: loaderResults,\n                fetcherResults: fetcherResults\n              });\n            case 8:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n  function interruptActiveLoads() {\n    var _cancelledDeferredRou;\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    (_cancelledDeferredRou = cancelledDeferredRoutes).push.apply(_cancelledDeferredRou, _toConsumableArray(cancelActiveDeferreds()));\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach(function (_, key) {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    var boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: _defineProperty({}, boundaryMatch.route.id, error),\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    var fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      var count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    var controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    var _iterator2 = _createForOfIteratorHelper(keys),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var key = _step2.value;\n        var fetcher = getFetcher(key);\n        var doneFetcher = getDoneFetcher(fetcher.data);\n        state.fetchers.set(key, doneFetcher);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  function markFetchRedirectsDone() {\n    var doneKeys = [];\n    var updatedFetchers = false;\n    var _iterator3 = _createForOfIteratorHelper(fetchRedirectIds),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var key = _step3.value;\n        var fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          fetchRedirectIds.delete(key);\n          doneKeys.push(key);\n          updatedFetchers = true;\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    var yeetedKeys = [];\n    var _iterator4 = _createForOfIteratorHelper(fetchReloadIds),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var _step4$value = _slicedToArray(_step4.value, 2),\n          key = _step4$value[0],\n          id = _step4$value[1];\n        if (id < landedId) {\n          var fetcher = state.fetchers.get(key);\n          invariant(fetcher, \"Expected fetcher: \" + key);\n          if (fetcher.state === \"loading\") {\n            abortFetcher(key);\n            fetchReloadIds.delete(key);\n            yeetedKeys.push(key);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    var blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers: blockers\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    var currentLocation = _ref2.currentLocation,\n      nextLocation = _ref2.nextLocation,\n      historyAction = _ref2.historyAction;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    var entries = Array.from(blockerFunctions.entries());\n    var _entries = _slicedToArray(entries[entries.length - 1], 2),\n      blockerKey = _entries[0],\n      blockerFunction = _entries[1];\n    var blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation: currentLocation,\n      nextLocation: nextLocation,\n      historyAction: historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    var cancelledRouteIds = [];\n    activeDeferreds.forEach(function (dfd, routeId) {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      var y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return function () {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      var key = getScrollRestorationKey(location, matches.map(function (m) {\n        return convertRouteMatchToUiMatch(m, state.loaderData);\n      }));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      var key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      var key = getScrollKey(location, matches);\n      var y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize: initialize,\n    subscribe: subscribe,\n    enableScrollRestoration: enableScrollRestoration,\n    navigate: navigate,\n    fetch: fetch,\n    revalidate: revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: function createHref(to) {\n      return init.history.createHref(to);\n    },\n    encodeLocation: function encodeLocation(to) {\n      return init.history.encodeLocation(to);\n    },\n    getFetcher: getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose: dispose,\n    getBlocker: getBlocker,\n    deleteBlocker: deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes: _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nvar UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  var manifest = {};\n  var basename = (opts ? opts.basename : null) || \"/\";\n  var mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    var detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = function mapRouteProperties(route) {\n      return {\n        hasErrorBoundary: detectErrorBoundary(route)\n      };\n    };\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  var future = _extends({\n    v7_relativeSplatPath: false\n  }, opts ? opts.future : null);\n  var dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  function query(_x45, _x46) {\n    return _query.apply(this, arguments);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  function _query() {\n    _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(request, _temp3) {\n      var _ref9, requestContext, url, method, location, matches, error, _getShortCircuitMatch3, methodNotAllowedMatches, route, _error4, _getShortCircuitMatch4, notFoundMatches, _route2, result;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _ref9 = _temp3 === void 0 ? {} : _temp3, requestContext = _ref9.requestContext;\n              url = new URL(request.url);\n              method = request.method;\n              location = createLocation(\"\", createPath(url), null, \"default\");\n              matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n              if (!(!isValidMethod(method) && method !== \"HEAD\")) {\n                _context10.next = 11;\n                break;\n              }\n              error = getInternalRouterError(405, {\n                method: method\n              });\n              _getShortCircuitMatch3 = getShortCircuitMatches(dataRoutes), methodNotAllowedMatches = _getShortCircuitMatch3.matches, route = _getShortCircuitMatch3.route;\n              return _context10.abrupt(\"return\", {\n                basename: basename,\n                location: location,\n                matches: methodNotAllowedMatches,\n                loaderData: {},\n                actionData: null,\n                errors: _defineProperty({}, route.id, error),\n                statusCode: error.status,\n                loaderHeaders: {},\n                actionHeaders: {},\n                activeDeferreds: null\n              });\n            case 11:\n              if (matches) {\n                _context10.next = 15;\n                break;\n              }\n              _error4 = getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n              _getShortCircuitMatch4 = getShortCircuitMatches(dataRoutes), notFoundMatches = _getShortCircuitMatch4.matches, _route2 = _getShortCircuitMatch4.route;\n              return _context10.abrupt(\"return\", {\n                basename: basename,\n                location: location,\n                matches: notFoundMatches,\n                loaderData: {},\n                actionData: null,\n                errors: _defineProperty({}, _route2.id, _error4),\n                statusCode: _error4.status,\n                loaderHeaders: {},\n                actionHeaders: {},\n                activeDeferreds: null\n              });\n            case 15:\n              _context10.next = 17;\n              return queryImpl(request, location, matches, requestContext);\n            case 17:\n              result = _context10.sent;\n              if (!isResponse(result)) {\n                _context10.next = 20;\n                break;\n              }\n              return _context10.abrupt(\"return\", result);\n            case 20:\n              return _context10.abrupt(\"return\", _extends({\n                location: location,\n                basename: basename\n              }, result));\n            case 21:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n    return _query.apply(this, arguments);\n  }\n  function queryRoute(_x47, _x48) {\n    return _queryRoute.apply(this, arguments);\n  }\n  function _queryRoute() {\n    _queryRoute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(request, _temp4) {\n      var _ref10, routeId, requestContext, url, method, location, matches, match, result, error, _result$activeDeferre, data;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _ref10 = _temp4 === void 0 ? {} : _temp4, routeId = _ref10.routeId, requestContext = _ref10.requestContext;\n              url = new URL(request.url);\n              method = request.method;\n              location = createLocation(\"\", createPath(url), null, \"default\");\n              matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n              if (!(!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\")) {\n                _context11.next = 9;\n                break;\n              }\n              throw getInternalRouterError(405, {\n                method: method\n              });\n            case 9:\n              if (matches) {\n                _context11.next = 11;\n                break;\n              }\n              throw getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n            case 11:\n              match = routeId ? matches.find(function (m) {\n                return m.route.id === routeId;\n              }) : getTargetMatch(matches, location);\n              if (!(routeId && !match)) {\n                _context11.next = 16;\n                break;\n              }\n              throw getInternalRouterError(403, {\n                pathname: location.pathname,\n                routeId: routeId\n              });\n            case 16:\n              if (match) {\n                _context11.next = 18;\n                break;\n              }\n              throw getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n            case 18:\n              _context11.next = 20;\n              return queryImpl(request, location, matches, requestContext, match);\n            case 20:\n              result = _context11.sent;\n              if (!isResponse(result)) {\n                _context11.next = 23;\n                break;\n              }\n              return _context11.abrupt(\"return\", result);\n            case 23:\n              error = result.errors ? Object.values(result.errors)[0] : undefined;\n              if (!(error !== undefined)) {\n                _context11.next = 26;\n                break;\n              }\n              throw error;\n            case 26:\n              if (!result.actionData) {\n                _context11.next = 28;\n                break;\n              }\n              return _context11.abrupt(\"return\", Object.values(result.actionData)[0]);\n            case 28:\n              if (!result.loaderData) {\n                _context11.next = 32;\n                break;\n              }\n              data = Object.values(result.loaderData)[0];\n              if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n                data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n              }\n              return _context11.abrupt(\"return\", data);\n            case 32:\n              return _context11.abrupt(\"return\", undefined);\n            case 33:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n    return _queryRoute.apply(this, arguments);\n  }\n  function queryImpl(_x49, _x50, _x51, _x52, _x53) {\n    return _queryImpl.apply(this, arguments);\n  }\n  function _queryImpl() {\n    _queryImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(request, location, matches, requestContext, routeMatch) {\n      var _result, result;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n              _context12.prev = 1;\n              if (!isMutationMethod(request.method.toLowerCase())) {\n                _context12.next = 7;\n                break;\n              }\n              _context12.next = 5;\n              return submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n            case 5:\n              _result = _context12.sent;\n              return _context12.abrupt(\"return\", _result);\n            case 7:\n              _context12.next = 9;\n              return loadRouteData(request, matches, requestContext, routeMatch);\n            case 9:\n              result = _context12.sent;\n              return _context12.abrupt(\"return\", isResponse(result) ? result : _extends({}, result, {\n                actionData: null,\n                actionHeaders: {}\n              }));\n            case 13:\n              _context12.prev = 13;\n              _context12.t0 = _context12[\"catch\"](1);\n              if (!isQueryRouteResponse(_context12.t0)) {\n                _context12.next = 19;\n                break;\n              }\n              if (!(_context12.t0.type === ResultType.error)) {\n                _context12.next = 18;\n                break;\n              }\n              throw _context12.t0.response;\n            case 18:\n              return _context12.abrupt(\"return\", _context12.t0.response);\n            case 19:\n              if (!isRedirectResponse(_context12.t0)) {\n                _context12.next = 21;\n                break;\n              }\n              return _context12.abrupt(\"return\", _context12.t0);\n            case 21:\n              throw _context12.t0;\n            case 22:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, null, [[1, 13]]);\n    }));\n    return _queryImpl.apply(this, arguments);\n  }\n  function submit(_x54, _x55, _x56, _x57, _x58) {\n    return _submit.apply(this, arguments);\n  }\n  function _submit() {\n    _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(request, matches, actionMatch, requestContext, isRouteRequest) {\n      var result, error, method, _error5, boundaryMatch, _context13, loaderRequest, context;\n      return _regeneratorRuntime.wrap(function _callee13$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              if (!(!actionMatch.route.action && !actionMatch.route.lazy)) {\n                _context14.next = 7;\n                break;\n              }\n              error = getInternalRouterError(405, {\n                method: request.method,\n                pathname: new URL(request.url).pathname,\n                routeId: actionMatch.route.id\n              });\n              if (!isRouteRequest) {\n                _context14.next = 4;\n                break;\n              }\n              throw error;\n            case 4:\n              result = {\n                type: ResultType.error,\n                error: error\n              };\n              _context14.next = 13;\n              break;\n            case 7:\n              _context14.next = 9;\n              return callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath, {\n                isStaticRequest: true,\n                isRouteRequest: isRouteRequest,\n                requestContext: requestContext\n              });\n            case 9:\n              result = _context14.sent;\n              if (!request.signal.aborted) {\n                _context14.next = 13;\n                break;\n              }\n              method = isRouteRequest ? \"queryRoute\" : \"query\";\n              throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n            case 13:\n              if (!isRedirectResult(result)) {\n                _context14.next = 15;\n                break;\n              }\n              throw new Response(null, {\n                status: result.status,\n                headers: {\n                  Location: result.location\n                }\n              });\n            case 15:\n              if (!isDeferredResult(result)) {\n                _context14.next = 20;\n                break;\n              }\n              _error5 = getInternalRouterError(400, {\n                type: \"defer-action\"\n              });\n              if (!isRouteRequest) {\n                _context14.next = 19;\n                break;\n              }\n              throw _error5;\n            case 19:\n              result = {\n                type: ResultType.error,\n                error: _error5\n              };\n            case 20:\n              if (!isRouteRequest) {\n                _context14.next = 24;\n                break;\n              }\n              if (!isErrorResult(result)) {\n                _context14.next = 23;\n                break;\n              }\n              throw result.error;\n            case 23:\n              return _context14.abrupt(\"return\", {\n                matches: [actionMatch],\n                loaderData: {},\n                actionData: _defineProperty({}, actionMatch.route.id, result.data),\n                errors: null,\n                // Note: statusCode + headers are unused here since queryRoute will\n                // return the raw Response or value\n                statusCode: 200,\n                loaderHeaders: {},\n                actionHeaders: {},\n                activeDeferreds: null\n              });\n            case 24:\n              if (!isErrorResult(result)) {\n                _context14.next = 30;\n                break;\n              }\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n              _context14.next = 28;\n              return loadRouteData(request, matches, requestContext, undefined, _defineProperty({}, boundaryMatch.route.id, result.error));\n            case 28:\n              _context13 = _context14.sent;\n              return _context14.abrupt(\"return\", _extends({}, _context13, {\n                statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n                actionData: null,\n                actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n              }));\n            case 30:\n              // Create a GET request for the loaders\n              loaderRequest = new Request(request.url, {\n                headers: request.headers,\n                redirect: request.redirect,\n                signal: request.signal\n              });\n              _context14.next = 33;\n              return loadRouteData(loaderRequest, matches, requestContext);\n            case 33:\n              context = _context14.sent;\n              return _context14.abrupt(\"return\", _extends({}, context, result.statusCode ? {\n                statusCode: result.statusCode\n              } : {}, {\n                actionData: _defineProperty({}, actionMatch.route.id, result.data),\n                actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n              }));\n            case 35:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee13);\n    }));\n    return _submit.apply(this, arguments);\n  }\n  function loadRouteData(_x59, _x60, _x61, _x62, _x63) {\n    return _loadRouteData.apply(this, arguments);\n  }\n  function _loadRouteData() {\n    _loadRouteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(request, matches, requestContext, routeMatch, pendingActionError) {\n      var isRouteRequest, requestMatches, matchesToLoad, results, method, activeDeferreds, context, executedLoaders;\n      return _regeneratorRuntime.wrap(function _callee14$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n              if (!(isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy))) {\n                _context15.next = 3;\n                break;\n              }\n              throw getInternalRouterError(400, {\n                method: request.method,\n                pathname: new URL(request.url).pathname,\n                routeId: routeMatch == null ? void 0 : routeMatch.route.id\n              });\n            case 3:\n              requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n              matchesToLoad = requestMatches.filter(function (m) {\n                return m.route.loader || m.route.lazy;\n              }); // Short circuit if we have no loaders to run (query())\n              if (!(matchesToLoad.length === 0)) {\n                _context15.next = 7;\n                break;\n              }\n              return _context15.abrupt(\"return\", {\n                matches: matches,\n                // Add a null for all matched routes for proper revalidation on the client\n                loaderData: matches.reduce(function (acc, m) {\n                  return Object.assign(acc, _defineProperty({}, m.route.id, null));\n                }, {}),\n                errors: pendingActionError || null,\n                statusCode: 200,\n                loaderHeaders: {},\n                activeDeferreds: null\n              });\n            case 7:\n              _context15.next = 9;\n              return Promise.all(_toConsumableArray(matchesToLoad.map(function (match) {\n                return callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath, {\n                  isStaticRequest: true,\n                  isRouteRequest: isRouteRequest,\n                  requestContext: requestContext\n                });\n              })));\n            case 9:\n              results = _context15.sent;\n              if (!request.signal.aborted) {\n                _context15.next = 13;\n                break;\n              }\n              method = isRouteRequest ? \"queryRoute\" : \"query\";\n              throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n            case 13:\n              // Process and commit output from loaders\n              activeDeferreds = new Map();\n              context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n              executedLoaders = new Set(matchesToLoad.map(function (match) {\n                return match.route.id;\n              }));\n              matches.forEach(function (match) {\n                if (!executedLoaders.has(match.route.id)) {\n                  context.loaderData[match.route.id] = null;\n                }\n              });\n              return _context15.abrupt(\"return\", _extends({}, context, {\n                matches: matches,\n                activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n              }));\n            case 18:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee14);\n    }));\n    return _loadRouteData.apply(this, arguments);\n  }\n  return {\n    dataRoutes: dataRoutes,\n    query: query,\n    queryRoute: queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  var newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: _defineProperty({}, context._deepestRenderedBoundaryId || routes[0].id, error)\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  var contextualMatches;\n  var activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    var _iterator5 = _createForOfIteratorHelper(matches),\n      _step5;\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var match = _step5.value;\n        contextualMatches.push(match);\n        if (match.route.id === fromRouteId) {\n          activeRouteMatch = match;\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  var path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path: path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path: path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  var getInvalidBodyError = function getInvalidBodyError() {\n    return {\n      path: path,\n      error: getInternalRouterError(400, {\n        type: \"invalid-body\"\n      })\n    };\n  };\n  // Create a Submission on non-GET navigations\n  var rawFormMethod = opts.formMethod || \"get\";\n  var formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  var formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      var text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce(function (acc, _ref3) {\n        var _ref13 = _slicedToArray(_ref3, 2),\n          name = _ref13[0],\n          value = _ref13[1];\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path: path,\n        submission: {\n          formMethod: formMethod,\n          formAction: formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text: text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        var _json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path: path,\n          submission: {\n            formMethod: formMethod,\n            formAction: formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json: _json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  var searchParams;\n  var formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  var submission = {\n    formMethod: formMethod,\n    formAction: formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData: formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path: path,\n      submission: submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  var parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission: submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  var boundaryMatches = matches;\n  if (boundaryId) {\n    var index = matches.findIndex(function (m) {\n      return m.route.id === boundaryId;\n    });\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isInitialLoad, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {\n  var actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  var currentUrl = history.createURL(state.location);\n  var nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  var boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  var boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  var navigationMatches = boundaryMatches.filter(function (match, index) {\n    var route = match.route;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (isInitialLoad) {\n      if (route.loader.hydrate) {\n        return true;\n      }\n      return state.loaderData[route.id] === undefined && (\n      // Don't re-run if the loader ran and threw an error\n      !state.errors || state.errors[route.id] === undefined);\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(function (id) {\n      return id === match.route.id;\n    })) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    var currentRouteMatch = state.matches[index];\n    var nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl: currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl: nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult: actionResult,\n      defaultShouldRevalidate:\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired ||\n      // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  var revalidatingFetchers = [];\n  fetchLoadMatches.forEach(function (f, key) {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (isInitialLoad || !matches.some(function (m) {\n      return m.route.id === f.routeId;\n    }) || deletedFetchers.has(key)) {\n      return;\n    }\n    var fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key: key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    var fetcher = state.fetchers.get(key);\n    var fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    var shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl: currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl: nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult: actionResult,\n        defaultShouldRevalidate: isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key: key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  var isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  var isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  var currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    var routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nfunction loadLazyRouteModule(_x64, _x65, _x66) {\n  return _loadLazyRouteModule.apply(this, arguments);\n}\nfunction _loadLazyRouteModule() {\n  _loadLazyRouteModule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(route, mapRouteProperties, manifest) {\n    var lazyRoute, routeToUpdate, routeUpdates, lazyRouteProperty, staticRouteValue, isPropertyStaticallyDefined;\n    return _regeneratorRuntime.wrap(function _callee15$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            if (route.lazy) {\n              _context16.next = 2;\n              break;\n            }\n            return _context16.abrupt(\"return\");\n          case 2:\n            _context16.next = 4;\n            return route.lazy();\n          case 4:\n            lazyRoute = _context16.sent;\n            if (route.lazy) {\n              _context16.next = 7;\n              break;\n            }\n            return _context16.abrupt(\"return\");\n          case 7:\n            routeToUpdate = manifest[route.id];\n            invariant(routeToUpdate, \"No route found in manifest\");\n            // Update the route in place.  This should be safe because there's no way\n            // we could yet be sitting on this route as we can't get there without\n            // resolving lazy() first.\n            //\n            // This is different than the HMR \"update\" use-case where we may actively be\n            // on the route being updated.  The main concern boils down to \"does this\n            // mutation affect any ongoing navigations or any current state.matches\n            // values?\".  If not, it should be safe to update in place.\n            routeUpdates = {};\n            for (lazyRouteProperty in lazyRoute) {\n              staticRouteValue = routeToUpdate[lazyRouteProperty];\n              isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n              // This property isn't static since it should always be updated based\n              // on the route updates\n              lazyRouteProperty !== \"hasErrorBoundary\";\n              warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n              if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n                routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n              }\n            }\n            // Mutate the route with the provided updates.  Do this first so we pass\n            // the updated version to mapRouteProperties\n            Object.assign(routeToUpdate, routeUpdates);\n            // Mutate the `hasErrorBoundary` property on the route based on the route\n            // updates and remove the `lazy` function so we don't resolve the lazy\n            // route again.\n            Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n              lazy: undefined\n            }));\n          case 13:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, _callee15);\n  }));\n  return _loadLazyRouteModule.apply(this, arguments);\n}\nfunction callLoaderOrAction(_x67, _x68, _x69, _x70, _x71, _x72, _x73, _x74, _x75) {\n  return _callLoaderOrAction.apply(this, arguments);\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction _callLoaderOrAction() {\n  _callLoaderOrAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(type, request, match, matches, manifest, mapRouteProperties, basename, v7_relativeSplatPath, opts) {\n    var resultType, result, onReject, runHandler, handler, handlerError, values, url, pathname, _url, _pathname, status, location, currentUrl, _url2, isSameBasename, queryRouteResponse, data, contentType, _result$init, _result$init2;\n    return _regeneratorRuntime.wrap(function _callee16$(_context17) {\n      while (1) {\n        switch (_context17.prev = _context17.next) {\n          case 0:\n            if (opts === void 0) {\n              opts = {};\n            }\n            runHandler = function runHandler(handler) {\n              // Setup a promise we can race against so that abort signals short circuit\n              var reject;\n              var abortPromise = new Promise(function (_, r) {\n                return reject = r;\n              });\n              onReject = function onReject() {\n                return reject();\n              };\n              request.signal.addEventListener(\"abort\", onReject);\n              return Promise.race([handler({\n                request: request,\n                params: match.params,\n                context: opts.requestContext\n              }), abortPromise]);\n            };\n            _context17.prev = 2;\n            handler = match.route[type];\n            if (!match.route.lazy) {\n              _context17.next = 32;\n              break;\n            }\n            if (!handler) {\n              _context17.next = 14;\n              break;\n            }\n            _context17.next = 8;\n            return Promise.all([\n            // If the handler throws, don't let it immediately bubble out,\n            // since we need to let the lazy() execution finish so we know if this\n            // route has a boundary that can handle the error\n            runHandler(handler).catch(function (e) {\n              handlerError = e;\n            }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n          case 8:\n            values = _context17.sent;\n            if (!handlerError) {\n              _context17.next = 11;\n              break;\n            }\n            throw handlerError;\n          case 11:\n            result = values[0];\n            _context17.next = 30;\n            break;\n          case 14:\n            _context17.next = 16;\n            return loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n          case 16:\n            handler = match.route[type];\n            if (!handler) {\n              _context17.next = 23;\n              break;\n            }\n            _context17.next = 20;\n            return runHandler(handler);\n          case 20:\n            result = _context17.sent;\n            _context17.next = 30;\n            break;\n          case 23:\n            if (!(type === \"action\")) {\n              _context17.next = 29;\n              break;\n            }\n            url = new URL(request.url);\n            pathname = url.pathname + url.search;\n            throw getInternalRouterError(405, {\n              method: request.method,\n              pathname: pathname,\n              routeId: match.route.id\n            });\n          case 29:\n            return _context17.abrupt(\"return\", {\n              type: ResultType.data,\n              data: undefined\n            });\n          case 30:\n            _context17.next = 41;\n            break;\n          case 32:\n            if (handler) {\n              _context17.next = 38;\n              break;\n            }\n            _url = new URL(request.url);\n            _pathname = _url.pathname + _url.search;\n            throw getInternalRouterError(404, {\n              pathname: _pathname\n            });\n          case 38:\n            _context17.next = 40;\n            return runHandler(handler);\n          case 40:\n            result = _context17.sent;\n          case 41:\n            invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n            _context17.next = 48;\n            break;\n          case 44:\n            _context17.prev = 44;\n            _context17.t0 = _context17[\"catch\"](2);\n            resultType = ResultType.error;\n            result = _context17.t0;\n          case 48:\n            _context17.prev = 48;\n            if (onReject) {\n              request.signal.removeEventListener(\"abort\", onReject);\n            }\n            return _context17.finish(48);\n          case 51:\n            if (!isResponse(result)) {\n              _context17.next = 87;\n              break;\n            }\n            status = result.status; // Process redirects\n            if (!redirectStatusCodes.has(status)) {\n              _context17.next = 61;\n              break;\n            }\n            location = result.headers.get(\"Location\");\n            invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n            // Support relative routing in internal redirects\n            if (!ABSOLUTE_URL_REGEX.test(location)) {\n              location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location, v7_relativeSplatPath);\n            } else if (!opts.isStaticRequest) {\n              // Strip off the protocol+origin for same-origin + same-basename absolute\n              // redirects. If this is a static request, we can let it go back to the\n              // browser as-is\n              currentUrl = new URL(request.url);\n              _url2 = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n              isSameBasename = stripBasename(_url2.pathname, basename) != null;\n              if (_url2.origin === currentUrl.origin && isSameBasename) {\n                location = _url2.pathname + _url2.search + _url2.hash;\n              }\n            }\n            // Don't process redirects in the router during static requests requests.\n            // Instead, throw the Response and let the server handle it with an HTTP\n            // redirect.  We also update the Location header in place in this flow so\n            // basename and relative routing is taken into account\n            if (!opts.isStaticRequest) {\n              _context17.next = 60;\n              break;\n            }\n            result.headers.set(\"Location\", location);\n            throw result;\n          case 60:\n            return _context17.abrupt(\"return\", {\n              type: ResultType.redirect,\n              status: status,\n              location: location,\n              revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n              reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null\n            });\n          case 61:\n            if (!opts.isRouteRequest) {\n              _context17.next = 64;\n              break;\n            }\n            queryRouteResponse = {\n              type: resultType === ResultType.error ? ResultType.error : ResultType.data,\n              response: result\n            };\n            throw queryRouteResponse;\n          case 64:\n            _context17.prev = 64;\n            contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n            // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n            if (!(contentType && /\\bapplication\\/json\\b/.test(contentType))) {\n              _context17.next = 76;\n              break;\n            }\n            if (!(result.body == null)) {\n              _context17.next = 71;\n              break;\n            }\n            data = null;\n            _context17.next = 74;\n            break;\n          case 71:\n            _context17.next = 73;\n            return result.json();\n          case 73:\n            data = _context17.sent;\n          case 74:\n            _context17.next = 79;\n            break;\n          case 76:\n            _context17.next = 78;\n            return result.text();\n          case 78:\n            data = _context17.sent;\n          case 79:\n            _context17.next = 84;\n            break;\n          case 81:\n            _context17.prev = 81;\n            _context17.t1 = _context17[\"catch\"](64);\n            return _context17.abrupt(\"return\", {\n              type: ResultType.error,\n              error: _context17.t1\n            });\n          case 84:\n            if (!(resultType === ResultType.error)) {\n              _context17.next = 86;\n              break;\n            }\n            return _context17.abrupt(\"return\", {\n              type: resultType,\n              error: new ErrorResponseImpl(status, result.statusText, data),\n              headers: result.headers\n            });\n          case 86:\n            return _context17.abrupt(\"return\", {\n              type: ResultType.data,\n              data: data,\n              statusCode: result.status,\n              headers: result.headers\n            });\n          case 87:\n            if (!(resultType === ResultType.error)) {\n              _context17.next = 89;\n              break;\n            }\n            return _context17.abrupt(\"return\", {\n              type: resultType,\n              error: result\n            });\n          case 89:\n            if (!isDeferredData(result)) {\n              _context17.next = 91;\n              break;\n            }\n            return _context17.abrupt(\"return\", {\n              type: ResultType.deferred,\n              deferredData: result,\n              statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n              headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n            });\n          case 91:\n            return _context17.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result\n            });\n          case 92:\n          case \"end\":\n            return _context17.stop();\n        }\n      }\n    }, _callee16, null, [[2, 44, 48, 51], [64, 81]]);\n  }));\n  return _callLoaderOrAction.apply(this, arguments);\n}\nfunction createClientSideRequest(history, location, signal, submission) {\n  var url = history.createURL(stripHashFromPath(location)).toString();\n  var init = {\n    signal: signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    var formMethod = submission.formMethod,\n      formEncType = submission.formEncType;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  var searchParams = new URLSearchParams();\n  var _iterator6 = _createForOfIteratorHelper(formData.entries()),\n    _step6;\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var _step6$value = _slicedToArray(_step6.value, 2),\n        key = _step6$value[0],\n        value = _step6$value[1];\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n      searchParams.append(key, typeof value === \"string\" ? value : value.name);\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  var formData = new FormData();\n  var _iterator7 = _createForOfIteratorHelper(searchParams.entries()),\n    _step7;\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var _step7$value = _slicedToArray(_step7.value, 2),\n        key = _step7$value[0],\n        value = _step7$value[1];\n      formData.append(key, value);\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  var loaderData = {};\n  var errors = null;\n  var statusCode;\n  var foundError = false;\n  var loaderHeaders = {};\n  // Process loader results into state.loaderData/state.errors\n  results.forEach(function (result, index) {\n    var id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      var boundaryMatch = findNearestBoundary(matches, id);\n      var error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData: loaderData,\n    errors: errors,\n    statusCode: statusCode || 200,\n    loaderHeaders: loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  var _processRouteLoaderDa = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds),\n    loaderData = _processRouteLoaderDa.loaderData,\n    errors = _processRouteLoaderDa.errors;\n  // Process results from our revalidating fetchers\n  for (var index = 0; index < revalidatingFetchers.length; index++) {\n    var _revalidatingFetchers = revalidatingFetchers[index],\n      key = _revalidatingFetchers.key,\n      match = _revalidatingFetchers.match,\n      controller = _revalidatingFetchers.controller;\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    var result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      var boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, _defineProperty({}, boundaryMatch.route.id, result.error));\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      var doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData: loaderData,\n    errors: errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  var mergedLoaderData = _extends({}, newLoaderData);\n  var _iterator8 = _createForOfIteratorHelper(matches),\n    _step8;\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var match = _step8.value;\n      var id = match.route.id;\n      if (newLoaderData.hasOwnProperty(id)) {\n        if (newLoaderData[id] !== undefined) {\n          mergedLoaderData[id] = newLoaderData[id];\n        }\n      } else if (loaderData[id] !== undefined && match.route.loader) {\n        // Preserve existing keys not included in newLoaderData and where a loader\n        // wasn't removed by HMR\n        mergedLoaderData[id] = loaderData[id];\n      }\n      if (errors && errors.hasOwnProperty(id)) {\n        // Don't keep any loader data below the boundary\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n  return mergedLoaderData;\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  var eligibleMatches = routeId ? matches.slice(0, matches.findIndex(function (m) {\n    return m.route.id === routeId;\n  }) + 1) : _toConsumableArray(matches);\n  return eligibleMatches.reverse().find(function (m) {\n    return m.route.hasErrorBoundary === true;\n  }) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  var route = routes.length === 1 ? routes[0] : routes.find(function (r) {\n    return r.index || !r.path || r.path === \"/\";\n  }) || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: route\n    }],\n    route: route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  var _ref14 = _temp5 === void 0 ? {} : _temp5,\n    pathname = _ref14.pathname,\n    routeId = _ref14.routeId,\n    method = _ref14.method,\n    type = _ref14.type;\n  var statusText = \"Unknown Server Error\";\n  var errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (var i = results.length - 1; i >= 0; i--) {\n    var result = results[i];\n    if (isRedirectResult(result)) {\n      return {\n        result: result,\n        idx: i\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  var parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  var deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  var status = result.status;\n  var location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || obj.type === ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nfunction resolveDeferredResults(_x76, _x77, _x78, _x79, _x80, _x81) {\n  return _resolveDeferredResults.apply(this, arguments);\n}\nfunction _resolveDeferredResults() {\n  _resolveDeferredResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n    var _loop, index, _ret;\n    return _regeneratorRuntime.wrap(function _callee17$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop(index) {\n              var result, match, currentMatch, isRevalidatingLoader, signal;\n              return _regeneratorRuntime.wrap(function _loop$(_context18) {\n                while (1) {\n                  switch (_context18.prev = _context18.next) {\n                    case 0:\n                      result = results[index];\n                      match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n                      // anything with.  This is for revalidating fetchers where the route was\n                      // removed during HMR\n                      if (match) {\n                        _context18.next = 4;\n                        break;\n                      }\n                      return _context18.abrupt(\"return\", \"continue\");\n                    case 4:\n                      currentMatch = currentMatches.find(function (m) {\n                        return m.route.id === match.route.id;\n                      });\n                      isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n                      if (!(isDeferredResult(result) && (isFetcher || isRevalidatingLoader))) {\n                        _context18.next = 11;\n                        break;\n                      }\n                      // Note: we do not have to touch activeDeferreds here since we race them\n                      // against the signal in resolveDeferredData and they'll get aborted\n                      // there if needed\n                      signal = signals[index];\n                      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n                      _context18.next = 11;\n                      return resolveDeferredData(result, signal, isFetcher).then(function (result) {\n                        if (result) {\n                          results[index] = result || results[index];\n                        }\n                      });\n                    case 11:\n                    case \"end\":\n                      return _context18.stop();\n                  }\n                }\n              }, _loop);\n            });\n            index = 0;\n          case 2:\n            if (!(index < results.length)) {\n              _context19.next = 10;\n              break;\n            }\n            return _context19.delegateYield(_loop(index), \"t0\", 4);\n          case 4:\n            _ret = _context19.t0;\n            if (!(_ret === \"continue\")) {\n              _context19.next = 7;\n              break;\n            }\n            return _context19.abrupt(\"continue\", 7);\n          case 7:\n            index++;\n            _context19.next = 2;\n            break;\n          case 10:\n          case \"end\":\n            return _context19.stop();\n        }\n      }\n    }, _callee17);\n  }));\n  return _resolveDeferredResults.apply(this, arguments);\n}\nfunction resolveDeferredData(_x82, _x83, _x84) {\n  return _resolveDeferredData.apply(this, arguments);\n}\nfunction _resolveDeferredData() {\n  _resolveDeferredData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(result, signal, unwrap) {\n    var aborted;\n    return _regeneratorRuntime.wrap(function _callee18$(_context20) {\n      while (1) {\n        switch (_context20.prev = _context20.next) {\n          case 0:\n            if (unwrap === void 0) {\n              unwrap = false;\n            }\n            _context20.next = 3;\n            return result.deferredData.resolveData(signal);\n          case 3:\n            aborted = _context20.sent;\n            if (!aborted) {\n              _context20.next = 6;\n              break;\n            }\n            return _context20.abrupt(\"return\");\n          case 6:\n            if (!unwrap) {\n              _context20.next = 14;\n              break;\n            }\n            _context20.prev = 7;\n            return _context20.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.unwrappedData\n            });\n          case 11:\n            _context20.prev = 11;\n            _context20.t0 = _context20[\"catch\"](7);\n            return _context20.abrupt(\"return\", {\n              type: ResultType.error,\n              error: _context20.t0\n            });\n          case 14:\n            return _context20.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.data\n            });\n          case 15:\n          case \"end\":\n            return _context20.stop();\n        }\n      }\n    }, _callee18, null, [[7, 11]]);\n  }));\n  return _resolveDeferredData.apply(this, arguments);\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(function (v) {\n    return v === \"\";\n  });\n}\nfunction getTargetMatch(matches, location) {\n  var search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  var pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  var formMethod = navigation.formMethod,\n    formAction = navigation.formAction,\n    formEncType = navigation.formEncType,\n    text = navigation.text,\n    formData = navigation.formData,\n    json = navigation.json;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod: formMethod,\n      formAction: formAction,\n      formEncType: formEncType,\n      formData: undefined,\n      json: undefined,\n      text: text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod: formMethod,\n      formAction: formAction,\n      formEncType: formEncType,\n      formData: formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod: formMethod,\n      formAction: formAction,\n      formEncType: formEncType,\n      formData: undefined,\n      json: json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    var navigation = {\n      state: \"loading\",\n      location: location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    var _navigation = {\n      state: \"loading\",\n      location: location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return _navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  var navigation = {\n    state: \"submitting\",\n    location: location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    var fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data: data\n    };\n    return fetcher;\n  } else {\n    var _fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data: data\n    };\n    return _fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  var fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  var fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data: data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    var sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      var _json2 = JSON.parse(sessionPositions);\n      for (var _i = 0, _Object$entries = Object.entries(_json2 || {}); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          k = _Object$entries$_i[0],\n          v = _Object$entries$_i[1];\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    var _json3 = {};\n    var _iterator9 = _createForOfIteratorHelper(transitions),\n      _step9;\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var _step9$value = _slicedToArray(_step9.value, 2),\n          k = _step9$value[0],\n          v = _step9$value[1];\n        _json3[k] = _toConsumableArray(v);\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(_json3));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, resolvePath, resolveTo, stripBasename };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;;AAEG;IACSA;AAAZ,WAAYA,MAAM;EAChB;;;;;;AAMG;EACHA,qBAAW;EAEX;;;;AAIG;EACHA,uBAAa;EAEb;;;AAGG;EACHA,6BAAmB;AACrB,CAAC,EAtBWA,MAAM,KAANA,MAAM,GAsBjB;AAqKD,IAAMC,iBAAiB,GAAG,UAAU;AA+BpC;;;AAGG;AACa,4BAAmBC,CACjCC,SAAkC;EAAA,IAAlCA;IAAAA,UAAgC,EAAE;EAAA;EAElC,eAAiEA,OAAO;IAAAC,iCAAlEC,cAAc;IAAdA,cAAc,sCAAG,CAAC,GAAG,CAAC;IAAEC,YAAY,YAAZA,YAAY;IAAAC,6BAAEC,QAAQ;IAARA,QAAQ,kCAAG;EACvD,IAAIC,OAAmB,CAAC;EACxBA,OAAO,GAAGJ,cAAc,CAACK,GAAG,CAAC,UAACC,KAAK,EAAEC,KAAK;IAAA,OACxCC,oBAAoB,CAClBF,KAAK,EACL,OAAOA,KAAK,KAAK,QAAQ,GAAG,IAAI,GAAGA,KAAK,CAACG,KAAK,EAC9CF,KAAK,KAAK,CAAC,GAAG,SAAS,GAAGG,SAAS,CACpC;EAAA,EACF;EACD,IAAIH,KAAK,GAAGI,UAAU,CACpBV,YAAY,IAAI,IAAI,GAAGG,OAAO,CAACQ,MAAM,GAAG,CAAC,GAAGX,YAAY,CACzD;EACD,IAAIY,MAAM,GAAGlB,MAAM,CAACmB,GAAG;EACvB,IAAIC,QAAQ,GAAoB,IAAI;EAEpC,SAASJ,UAAUA,CAACK,CAAS;IAC3B,OAAOC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACH,CAAC,EAAE,CAAC,CAAC,EAAEZ,OAAO,CAACQ,MAAM,GAAG,CAAC,CAAC;EACrD;EACA,SAASQ,kBAAkBA;IACzB,OAAOhB,OAAO,CAACG,KAAK,CAAC;EACvB;EACA,SAASC,oBAAoBA,CAC3Ba,EAAM,EACNZ,KAAa,EACba,GAAY;IAAA,IADZb,KAAa;MAAbA,KAAa,OAAI;IAAA;IAGjB,IAAIc,QAAQ,GAAGC,cAAc,CAC3BpB,OAAO,GAAGgB,kBAAkB,EAAE,CAACK,QAAQ,GAAG,GAAG,EAC7CJ,EAAE,EACFZ,KAAK,EACLa,GAAG,CACJ;IACDI,OAAO,CACLH,QAAQ,CAACE,QAAQ,CAACE,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,+DACwBC,IAAI,CAACC,SAAS,CACvER,EAAE,CACD,CACJ;IACD,OAAOE,QAAQ;EACjB;EAEA,SAASO,UAAUA,CAACT,EAAM;IACxB,OAAO,OAAOA,EAAE,KAAK,QAAQ,GAAGA,EAAE,GAAGU,UAAU,CAACV,EAAE,CAAC;EACrD;EAEA,IAAIW,OAAO,GAAkB;IAC3B,IAAIzB,KAAKA;MACP,OAAOA,KAAK;KACb;IACD,IAAIM,MAAMA;MACR,OAAOA,MAAM;KACd;IACD,IAAIU,QAAQA;MACV,OAAOH,kBAAkB,EAAE;KAC5B;IACDU,UAAU,EAAVA,UAAU;IACVG,SAASA,qBAACZ,EAAE;MACV,OAAO,IAAIa,GAAG,CAACJ,UAAU,CAACT,EAAE,CAAC,EAAE,kBAAkB,CAAC;KACnD;IACDc,cAAcA,0BAACd,EAAM;MACnB,IAAIe,IAAI,GAAG,OAAOf,EAAE,KAAK,QAAQ,GAAGgB,SAAS,CAAChB,EAAE,CAAC,GAAGA,EAAE;MACtD,OAAO;QACLI,QAAQ,EAAEW,IAAI,CAACX,QAAQ,IAAI,EAAE;QAC7Ba,MAAM,EAAEF,IAAI,CAACE,MAAM,IAAI,EAAE;QACzBC,IAAI,EAAEH,IAAI,CAACG,IAAI,IAAI;OACpB;KACF;IACDC,IAAIA,gBAACnB,EAAE,EAAEZ,KAAK;MACZI,MAAM,GAAGlB,MAAM,CAAC8C,IAAI;MACpB,IAAIC,YAAY,GAAGlC,oBAAoB,CAACa,EAAE,EAAEZ,KAAK,CAAC;MAClDF,KAAK,IAAI,CAAC;MACVH,OAAO,CAACuC,MAAM,CAACpC,KAAK,EAAEH,OAAO,CAACQ,MAAM,EAAE8B,YAAY,CAAC;MACnD,IAAIvC,QAAQ,IAAIY,QAAQ,EAAE;QACxBA,QAAQ,CAAC;UAAEF,MAAM,EAANA,MAAM;UAAEU,QAAQ,EAAEmB,YAAY;UAAEE,KAAK,EAAE;QAAC,CAAE,CAAC;MACvD;KACF;IACDC,OAAOA,mBAACxB,EAAE,EAAEZ,KAAK;MACfI,MAAM,GAAGlB,MAAM,CAACmD,OAAO;MACvB,IAAIJ,YAAY,GAAGlC,oBAAoB,CAACa,EAAE,EAAEZ,KAAK,CAAC;MAClDL,OAAO,CAACG,KAAK,CAAC,GAAGmC,YAAY;MAC7B,IAAIvC,QAAQ,IAAIY,QAAQ,EAAE;QACxBA,QAAQ,CAAC;UAAEF,MAAM,EAANA,MAAM;UAAEU,QAAQ,EAAEmB,YAAY;UAAEE,KAAK,EAAE;QAAC,CAAE,CAAC;MACvD;KACF;IACDG,EAAEA,cAACH,KAAK;MACN/B,MAAM,GAAGlB,MAAM,CAACmB,GAAG;MACnB,IAAIkC,SAAS,GAAGrC,UAAU,CAACJ,KAAK,GAAGqC,KAAK,CAAC;MACzC,IAAIF,YAAY,GAAGtC,OAAO,CAAC4C,SAAS,CAAC;MACrCzC,KAAK,GAAGyC,SAAS;MACjB,IAAIjC,QAAQ,EAAE;QACZA,QAAQ,CAAC;UAAEF,MAAM,EAANA,MAAM;UAAEU,QAAQ,EAAEmB,YAAY;UAAEE;QAAO,EAAC;MACpD;KACF;IACDK,MAAMA,kBAACC,EAAY;MACjBnC,QAAQ,GAAGmC,EAAE;MACb,OAAO,YAAK;QACVnC,QAAQ,GAAG,IAAI;OAChB;IACH;GACD;EAED,OAAOiB,OAAO;AAChB;AAkBA;;;;;;AAMG;AACa,6BAAoBmB,CAClCrD,SAAmC;EAAA,IAAnCA;IAAAA,UAAiC,EAAE;EAAA;EAEnC,SAASsD,qBAAqBA,CAC5BC,MAAc,EACdC,aAAgC;IAEhC,uBAAiCD,MAAM,CAAC9B,QAAQ;MAA1CE,QAAQ,oBAARA,QAAQ;MAAEa,MAAM,oBAANA,MAAM;MAAEC;IACxB,OAAOf,cAAc,CACnB,EAAE,EACF;MAAEC,QAAQ,EAARA,QAAQ;MAAEa,MAAM,EAANA,MAAM;MAAEC;KAAM;IAC1B;IACCe,aAAa,CAAC7C,KAAK,IAAI6C,aAAa,CAAC7C,KAAK,CAAC8C,GAAG,IAAK,IAAI,EACvDD,aAAa,CAAC7C,KAAK,IAAI6C,aAAa,CAAC7C,KAAK,CAACa,GAAG,IAAK,SAAS,CAC9D;EACH;EAEA,SAASkC,iBAAiBA,CAACH,MAAc,EAAEhC,EAAM;IAC/C,OAAO,OAAOA,EAAE,KAAK,QAAQ,GAAGA,EAAE,GAAGU,UAAU,CAACV,EAAE,CAAC;EACrD;EAEA,OAAOoC,kBAAkB,CACvBL,qBAAqB,EACrBI,iBAAiB,EACjB,IAAI,EACJ1D,OAAO,CACR;AACH;AAsBA;;;;;;;AAOG;AACa,0BAAiB4D,CAC/B5D,SAAgC;EAAA,IAAhCA;IAAAA,UAA8B,EAAE;EAAA;EAEhC,SAAS6D,kBAAkBA,CACzBN,MAAc,EACdC,aAAgC;IAEhC,iBAIIjB,SAAS,CAACgB,MAAM,CAAC9B,QAAQ,CAACgB,IAAI,CAACqB,MAAM,CAAC,CAAC,CAAC,CAAC;MAAAC,iCAH3CpC,QAAQ;MAARA,QAAQ,oCAAG,GAAG;MAAAqC,+BACdxB,MAAM;MAANA,MAAM,kCAAG,EAAE;MAAAyB,6BACXxB,IAAI;MAAJA,IAAI,gCAAG;IAGT;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,CAACd,QAAQ,CAACuC,UAAU,CAAC,GAAG,CAAC,IAAI,CAACvC,QAAQ,CAACuC,UAAU,CAAC,GAAG,CAAC,EAAE;MAC1DvC,QAAQ,GAAG,GAAG,GAAGA,QAAQ;IAC1B;IAED,OAAOD,cAAc,CACnB,EAAE,EACF;MAAEC,QAAQ,EAARA,QAAQ;MAAEa,MAAM,EAANA,MAAM;MAAEC;KAAM;IAC1B;IACCe,aAAa,CAAC7C,KAAK,IAAI6C,aAAa,CAAC7C,KAAK,CAAC8C,GAAG,IAAK,IAAI,EACvDD,aAAa,CAAC7C,KAAK,IAAI6C,aAAa,CAAC7C,KAAK,CAACa,GAAG,IAAK,SAAS,CAC9D;EACH;EAEA,SAAS2C,cAAcA,CAACZ,MAAc,EAAEhC,EAAM;IAC5C,IAAI6C,IAAI,GAAGb,MAAM,CAACc,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;IAChD,IAAIC,IAAI,GAAG,EAAE;IAEb,IAAIH,IAAI,IAAIA,IAAI,CAACI,YAAY,CAAC,MAAM,CAAC,EAAE;MACrC,IAAIC,GAAG,GAAGlB,MAAM,CAAC9B,QAAQ,CAAC8C,IAAI;MAC9B,IAAIG,SAAS,GAAGD,GAAG,CAACE,OAAO,CAAC,GAAG,CAAC;MAChCJ,IAAI,GAAGG,SAAS,KAAK,CAAC,CAAC,GAAGD,GAAG,GAAGA,GAAG,CAACG,KAAK,CAAC,CAAC,EAAEF,SAAS,CAAC;IACxD;IAED,OAAOH,IAAI,GAAG,GAAG,IAAI,OAAOhD,EAAE,KAAK,QAAQ,GAAGA,EAAE,GAAGU,UAAU,CAACV,EAAE,CAAC,CAAC;EACpE;EAEA,SAASsD,oBAAoBA,CAACpD,QAAkB,EAAEF,EAAM;IACtDK,OAAO,CACLH,QAAQ,CAACE,QAAQ,CAACE,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,iEAC0BC,IAAI,CAACC,SAAS,CACzER,EAAE,CACH,MAAG,CACL;EACH;EAEA,OAAOoC,kBAAkB,CACvBE,kBAAkB,EAClBM,cAAc,EACdU,oBAAoB,EACpB7E,OAAO,CACR;AACH;AAegB,kBAAS8E,CAACC,KAAU,EAAEC,OAAgB;EACpD,IAAID,KAAK,KAAK,KAAK,IAAIA,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,WAAW,EAAE;IACrE,MAAM,IAAIE,KAAK,CAACD,OAAO,CAAC;EACzB;AACH;AAEgB,gBAAOpD,CAACsD,IAAS,EAAEF,OAAe;EAChD,IAAI,CAACE,IAAI,EAAE;IACT;IACA,IAAI,OAAOC,OAAO,KAAK,WAAW,EAAEA,OAAO,CAACC,IAAI,CAACJ,OAAO,CAAC;IAEzD,IAAI;MACF;MACA;MACA;MACA;MACA;MACA,MAAM,IAAIC,KAAK,CAACD,OAAO,CAAC;MACxB;IACD,EAAC,OAAOK,CAAC,EAAE;EACb;AACH;AAEA,SAASC,SAASA;EAChB,OAAOnE,IAAI,CAACoE,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAAC1B,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;AAChD;AAEA;;AAEG;AACH,SAAS2B,eAAeA,CAAChE,QAAkB,EAAEhB,KAAa;EACxD,OAAO;IACLgD,GAAG,EAAEhC,QAAQ,CAACd,KAAK;IACnBa,GAAG,EAAEC,QAAQ,CAACD,GAAG;IACjBkE,GAAG,EAAEjF;GACN;AACH;AAEA;;AAEG;AACG,SAAUiB,cAAcA,CAC5BiE,OAA0B,EAC1BpE,EAAM,EACNZ,OACAa,GAAY;EAAA,IADZb;IAAAA,QAAa,IAAI;EAAA;EAGjB,IAAIc,QAAQ;IACVE,QAAQ,EAAE,OAAOgE,OAAO,KAAK,QAAQ,GAAGA,OAAO,GAAGA,OAAO,CAAChE,QAAQ;IAClEa,MAAM,EAAE,EAAE;IACVC,IAAI,EAAE;GACF,SAAOlB,EAAE,KAAK,QAAQ,GAAGgB,SAAS,CAAChB,EAAE,CAAC,GAAGA,EAAE;IAC/CZ,KAAK,EAALA,KAAK;IACL;IACA;IACA;IACA;IACAa,GAAG,EAAGD,EAAE,IAAKA,EAAe,CAACC,GAAG,IAAKA,GAAG,IAAI8D,SAAS;GACtD;EACD,OAAO7D,QAAQ;AACjB;AAEA;;AAEG;AACa,mBAAUQ,OAIV;EAAA,yBAHdN,QAAQ;IAARA,QAAQ,8BAAG,GAAG;IAAAiE,cAGAC,KAFdrD,MAAM;IAANA,MAAM,4BAAG,EAAE;IAAAsD,YAEGD,KADdpD,IAAI;IAAJA,IAAI,0BAAG;EAEP,IAAID,MAAM,IAAIA,MAAM,KAAK,GAAG,EAC1Bb,QAAQ,IAAIa,MAAM,CAACX,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,GAAGW,MAAM,GAAG,GAAG,GAAGA,MAAM;EAC9D,IAAIC,IAAI,IAAIA,IAAI,KAAK,GAAG,EACtBd,QAAQ,IAAIc,IAAI,CAACZ,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,GAAGY,IAAI,GAAG,GAAG,GAAGA,IAAI;EACxD,OAAOd,QAAQ;AACjB;AAEA;;AAEG;AACG,SAAUY,SAASA,CAACD,IAAY;EACpC,IAAIyD,UAAU,GAAkB,EAAE;EAElC,IAAIzD,IAAI,EAAE;IACR,IAAIoC,SAAS,GAAGpC,IAAI,CAACqC,OAAO,CAAC,GAAG,CAAC;IACjC,IAAID,SAAS,IAAI,CAAC,EAAE;MAClBqB,UAAU,CAACtD,IAAI,GAAGH,IAAI,CAACwB,MAAM,CAACY,SAAS,CAAC;MACxCpC,IAAI,GAAGA,IAAI,CAACwB,MAAM,CAAC,CAAC,EAAEY,SAAS,CAAC;IACjC;IAED,IAAIsB,WAAW,GAAG1D,IAAI,CAACqC,OAAO,CAAC,GAAG,CAAC;IACnC,IAAIqB,WAAW,IAAI,CAAC,EAAE;MACpBD,UAAU,CAACvD,MAAM,GAAGF,IAAI,CAACwB,MAAM,CAACkC,WAAW,CAAC;MAC5C1D,IAAI,GAAGA,IAAI,CAACwB,MAAM,CAAC,CAAC,EAAEkC,WAAW,CAAC;IACnC;IAED,IAAI1D,IAAI,EAAE;MACRyD,UAAU,CAACpE,QAAQ,GAAGW,IAAI;IAC3B;EACF;EAED,OAAOyD,UAAU;AACnB;AASA,SAASpC,kBAAkBA,CACzBsC,WAA2E,EAC3EjE,WAA8C,EAC9CkE,gBAA+D,EAC/DlG,SAA+B;EAAA,IAA/BA;IAAAA,UAA6B,EAAE;EAAA;EAE/B,gBAA2DA,OAAO;IAAAmG,6BAA5D5C,MAAM;IAANA,MAAM,iCAAGc,QAAQ,CAAC+B,WAAY;IAAAC,+BAAEhG,QAAQ;IAARA,QAAQ,mCAAG;EACjD,IAAImD,aAAa,GAAGD,MAAM,CAACrB,OAAO;EAClC,IAAInB,MAAM,GAAGlB,MAAM,CAACmB,GAAG;EACvB,IAAIC,QAAQ,GAAoB,IAAI;EAEpC,IAAIR,KAAK,GAAG6F,QAAQ,EAAG;EACvB;EACA;EACA;EACA,IAAI7F,KAAK,IAAI,IAAI,EAAE;IACjBA,KAAK,GAAG,CAAC;IACT+C,aAAa,CAAC+C,YAAY,UAAM/C,iBAAa,CAAC7C,KAAK;MAAE+E,GAAG,EAAEjF;IAAK,IAAI,EAAE,CAAC;EACvE;EAED,SAAS6F,QAAQA;IACf,IAAI3F,KAAK,GAAG6C,aAAa,CAAC7C,KAAK,IAAI;MAAE+E,GAAG,EAAE;KAAM;IAChD,OAAO/E,KAAK,CAAC+E,GAAG;EAClB;EAEA,SAASc,SAASA;IAChBzF,MAAM,GAAGlB,MAAM,CAACmB,GAAG;IACnB,IAAIkC,SAAS,GAAGoD,QAAQ,EAAE;IAC1B,IAAIxD,KAAK,GAAGI,SAAS,IAAI,IAAI,GAAG,IAAI,GAAGA,SAAS,GAAGzC,KAAK;IACxDA,KAAK,GAAGyC,SAAS;IACjB,IAAIjC,QAAQ,EAAE;MACZA,QAAQ,CAAC;QAAEF,MAAM,EAANA,MAAM;QAAEU,QAAQ,EAAES,OAAO,CAACT,QAAQ;QAAEqB;MAAK,CAAE,CAAC;IACxD;EACH;EAEA,SAASJ,IAAIA,CAACnB,EAAM,EAAEZ,KAAW;IAC/BI,MAAM,GAAGlB,MAAM,CAAC8C,IAAI;IACpB,IAAIlB,QAAQ,GAAGC,cAAc,CAACQ,OAAO,CAACT,QAAQ,EAAEF,EAAE,EAAEZ,KAAK,CAAC;IAC1D,IAAIuF,gBAAgB,EAAEA,gBAAgB,CAACzE,QAAQ,EAAEF,EAAE,CAAC;IAEpDd,KAAK,GAAG6F,QAAQ,EAAE,GAAG,CAAC;IACtB,IAAIG,YAAY,GAAGhB,eAAe,CAAChE,QAAQ,EAAEhB,KAAK,CAAC;IACnD,IAAIgE,GAAG,GAAGvC,OAAO,CAACF,UAAU,CAACP,QAAQ,CAAC;IAEtC;IACA,IAAI;MACF+B,aAAa,CAACkD,SAAS,CAACD,YAAY,EAAE,EAAE,EAAEhC,GAAG,CAAC;KAC/C,CAAC,OAAOkC,KAAK,EAAE;MACd;MACA;MACA;MACA;MACA,IAAIA,KAAK,YAAYC,YAAY,IAAID,KAAK,CAACE,IAAI,KAAK,gBAAgB,EAAE;QACpE,MAAMF,KAAK;MACZ;MACD;MACA;MACApD,MAAM,CAAC9B,QAAQ,CAACqF,MAAM,CAACrC,GAAG,CAAC;IAC5B;IAED,IAAIpE,QAAQ,IAAIY,QAAQ,EAAE;MACxBA,QAAQ,CAAC;QAAEF,MAAM,EAANA,MAAM;QAAEU,QAAQ,EAAES,OAAO,CAACT,QAAQ;QAAEqB,KAAK,EAAE;MAAC,CAAE,CAAC;IAC3D;EACH;EAEA,SAASC,OAAOA,CAACxB,EAAM,EAAEZ,KAAW;IAClCI,MAAM,GAAGlB,MAAM,CAACmD,OAAO;IACvB,IAAIvB,QAAQ,GAAGC,cAAc,CAACQ,OAAO,CAACT,QAAQ,EAAEF,EAAE,EAAEZ,KAAK,CAAC;IAC1D,IAAIuF,gBAAgB,EAAEA,gBAAgB,CAACzE,QAAQ,EAAEF,EAAE,CAAC;IAEpDd,KAAK,GAAG6F,QAAQ,EAAE;IAClB,IAAIG,YAAY,GAAGhB,eAAe,CAAChE,QAAQ,EAAEhB,KAAK,CAAC;IACnD,IAAIgE,GAAG,GAAGvC,OAAO,CAACF,UAAU,CAACP,QAAQ,CAAC;IACtC+B,aAAa,CAAC+C,YAAY,CAACE,YAAY,EAAE,EAAE,EAAEhC,GAAG,CAAC;IAEjD,IAAIpE,QAAQ,IAAIY,QAAQ,EAAE;MACxBA,QAAQ,CAAC;QAAEF,MAAM,EAANA,MAAM;QAAEU,QAAQ,EAAES,OAAO,CAACT,QAAQ;QAAEqB,KAAK,EAAE;MAAC,CAAE,CAAC;IAC3D;EACH;EAEA,SAASX,SAASA,CAACZ,EAAM;IACvB;IACA;IACA;IACA,IAAI6C,IAAI,GACNb,MAAM,CAAC9B,QAAQ,CAACsF,MAAM,KAAK,MAAM,GAC7BxD,MAAM,CAAC9B,QAAQ,CAACsF,MAAM,GACtBxD,MAAM,CAAC9B,QAAQ,CAAC8C,IAAI;IAE1B,IAAIA,IAAI,GAAG,OAAOhD,EAAE,KAAK,QAAQ,GAAGA,EAAE,GAAGU,UAAU,CAACV,EAAE,CAAC;IACvDuD,SAAS,CACPV,IAAI,EACkEG,4EAAM,CAC7E;IACD,OAAO,IAAInC,GAAG,CAACmC,IAAI,EAAEH,IAAI,CAAC;EAC5B;EAEA,IAAIlC,OAAO,GAAY;IACrB,IAAInB,MAAMA;MACR,OAAOA,MAAM;KACd;IACD,IAAIU,QAAQA;MACV,OAAOwE,WAAW,CAAC1C,MAAM,EAAEC,aAAa,CAAC;KAC1C;IACDL,MAAMA,kBAACC,EAAY;MACjB,IAAInC,QAAQ,EAAE;QACZ,MAAM,IAAIgE,KAAK,CAAC,4CAA4C,CAAC;MAC9D;MACD1B,MAAM,CAACyD,gBAAgB,CAAClH,iBAAiB,EAAE0G,SAAS,CAAC;MACrDvF,QAAQ,GAAGmC,EAAE;MAEb,OAAO,YAAK;QACVG,MAAM,CAAC0D,mBAAmB,CAACnH,iBAAiB,EAAE0G,SAAS,CAAC;QACxDvF,QAAQ,GAAG,IAAI;OAChB;KACF;IACDe,UAAUA,sBAACT,EAAE;MACX,OAAOS,WAAU,CAACuB,MAAM,EAAEhC,EAAE,CAAC;KAC9B;IACDY,SAAS,EAATA,SAAS;IACTE,cAAcA,0BAACd,EAAE;MACf;MACA,IAAIkD,GAAG,GAAGtC,SAAS,CAACZ,EAAE,CAAC;MACvB,OAAO;QACLI,QAAQ,EAAE8C,GAAG,CAAC9C,QAAQ;QACtBa,MAAM,EAAEiC,GAAG,CAACjC,MAAM;QAClBC,IAAI,EAAEgC,GAAG,CAAChC;OACX;KACF;IACDC,IAAI,EAAJA,IAAI;IACJK,OAAO,EAAPA,OAAO;IACPE,EAAEA,cAAC/B,CAAC;MACF,OAAOsC,aAAa,CAACP,EAAE,CAAC/B,CAAC,CAAC;IAC5B;GACD;EAED,OAAOgB,OAAO;AAChB;AAEA;;AC3tBA,IAAYgF,UAKX;AALD,WAAYA,UAAU;EACpBA,2BAAa;EACbA,mCAAqB;EACrBA,mCAAqB;EACrBA,6BAAe;AACjB,CAAC,EALWA,UAAU,KAAVA,UAAU,GAKrB;AAyOM,IAAMC,kBAAkB,GAAG,IAAIC,GAAG,CAAoB,CAC3D,MAAM,EACN,eAAe,EACf,MAAM,EACN,IAAI,EACJ,OAAO,EACP,UAAU,CACX,CAAC;AAoJF,SAASC,YAAYA,CACnBC,KAA0B;EAE1B,OAAOA,KAAK,CAAC7G,KAAK,KAAK,IAAI;AAC7B;AAEA;AACA;AACM,SAAU8G,yBAAyBA,CACvCC,MAA6B,EAC7BC,kBAA8C,EAC9CC,UAAuB,EACvBC,UAA4B;EAAA,IAD5BD,UAAuB;IAAvBA,UAAuB,KAAE;EAAA;EAAA,IACzBC;IAAAA,WAA0B,EAAE;EAAA;EAE5B,OAAOH,MAAM,CAACjH,GAAG,CAAC,UAAC+G,KAAK,EAAE7G,KAAK,EAAI;IACjC,IAAImH,QAAQ,gCAAOF,UAAU,IAAEjH,KAAK,EAAC;IACrC,IAAIoH,EAAE,GAAG,OAAOP,KAAK,CAACO,EAAE,KAAK,QAAQ,GAAGP,KAAK,CAACO,EAAE,GAAGD,QAAQ,CAACE,IAAI,CAAC,GAAG,CAAC;IACrEhD,SAAS,CACPwC,KAAK,CAAC7G,KAAK,KAAK,IAAI,IAAI,CAAC6G,KAAK,CAACS,QAAQ,6CACI,CAC5C;IACDjD,SAAS,CACP,CAAC6C,QAAQ,CAACE,EAAE,CAAC,EACb,qCAAqCA,KAAE,GACrC,wEAAwD,CAC3D;IAED,IAAIR,YAAY,CAACC,KAAK,CAAC,EAAE;MACvB,IAAIU,UAAU,gBACTV,KAAK,EACLG,kBAAkB,CAACH,KAAK,CAAC;QAC5BO;OACD;MACDF,QAAQ,CAACE,EAAE,CAAC,GAAGG,UAAU;MACzB,OAAOA,UAAU;IAClB,OAAM;MACL,IAAIC,iBAAiB,gBAChBX,KAAK,EACLG,kBAAkB,CAACH,KAAK,CAAC;QAC5BO,EAAE,EAAFA,EAAE;QACFE,QAAQ,EAAEnH;OACX;MACD+G,QAAQ,CAACE,EAAE,CAAC,GAAGI,iBAAiB;MAEhC,IAAIX,KAAK,CAACS,QAAQ,EAAE;QAClBE,iBAAiB,CAACF,QAAQ,GAAGR,yBAAyB,CACpDD,KAAK,CAACS,QAAQ,EACdN,kBAAkB,EAClBG,QAAQ,EACRD,QAAQ,CACT;MACF;MAED,OAAOM,iBAAiB;IACzB;EACH,CAAC,CAAC;AACJ;AAEA;;;;AAIG;AACG,SAAUC,WAAWA,CAGzBV,MAAyB,EACzBW,WAAuC,EACvCC,QAAQ,EAAM;EAAA,IAAdA,QAAQ;IAARA,QAAQ,GAAG,GAAG;EAAA;EAEd,IAAI3G,QAAQ,GACV,OAAO0G,WAAW,KAAK,QAAQ,GAAG5F,SAAS,CAAC4F,WAAW,CAAC,GAAGA,WAAW;EAExE,IAAIxG,QAAQ,GAAG0G,aAAa,CAAC5G,QAAQ,CAACE,QAAQ,IAAI,GAAG,EAAEyG,QAAQ,CAAC;EAEhE,IAAIzG,QAAQ,IAAI,IAAI,EAAE;IACpB,OAAO,IAAI;EACZ;EAED,IAAI2G,QAAQ,GAAGC,aAAa,CAACf,MAAM,CAAC;EACpCgB,iBAAiB,CAACF,QAAQ,CAAC;EAE3B,IAAIG,OAAO,GAAG,IAAI;EAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAED,OAAO,IAAI,IAAI,IAAIC,CAAC,GAAGJ,QAAQ,CAACxH,MAAM,EAAE,EAAE4H,CAAC,EAAE;IAC3DD,OAAO,GAAGE,gBAAgB,CACxBL,QAAQ,CAACI,CAAC,CAAC;IACX;IACA;IACA;IACA;IACA;IACA;IACAE,eAAe,CAACjH,QAAQ,CAAC,CAC1B;EACF;EAED,OAAO8G,OAAO;AAChB;AAUgB,mCAA0BI,CACxCC,KAA6B,EAC7BC,UAAqB;EAErB,IAAMzB,KAAK,GAAuBwB,KAAK,CAAjCxB,KAAK;IAAE3F,QAAQ,GAAamH,KAAK,CAA1BnH,QAAQ;IAAEqH,SAAWF,KAAK,CAAhBE;EACvB,OAAO;IACLnB,EAAE,EAAEP,KAAK,CAACO,EAAE;IACZlG,QAAQ,EAARA,QAAQ;IACRqH,MAAM,EAANA,MAAM;IACNC,IAAI,EAAEF,UAAU,CAACzB,KAAK,CAACO,EAAE,CAAC;IAC1BqB,MAAM,EAAE5B,KAAK,CAAC4B;GACf;AACH;AAmBA,SAASX,aAAaA,CAGpBf,MAAyB,EACzBc,QAA2C,EAC3Ca,aACAzB,UAAU,EAAK;EAAA,IAFfY,QAA2C;IAA3CA,QAA2C,KAAE;EAAA;EAAA,IAC7Ca;IAAAA,cAA4C,EAAE;EAAA;EAAA,IAC9CzB,UAAU;IAAVA,UAAU,GAAG,EAAE;EAAA;EAEf,IAAI0B,YAAY,GAAGA,SAAfA,YAAYA,CACd9B,KAAsB,EACtB7G,KAAa,EACb4I,YAAqB,EACnB;IACF,IAAIC,IAAI,GAA+B;MACrCD,YAAY,EACVA,YAAY,KAAKzI,SAAS,GAAG0G,KAAK,CAAChF,IAAI,IAAI,EAAE,GAAG+G,YAAY;MAC9DE,aAAa,EAAEjC,KAAK,CAACiC,aAAa,KAAK,IAAI;MAC3CC,aAAa,EAAE/I,KAAK;MACpB6G;KACD;IAED,IAAIgC,IAAI,CAACD,YAAY,CAACnF,UAAU,CAAC,GAAG,CAAC,EAAE;MACrCY,SAAS,CACPwE,IAAI,CAACD,YAAY,CAACnF,UAAU,CAACwD,UAAU,CAAC,EACxC,2BAAwB4B,IAAI,CAACD,YAAY,qCACnC3B,UAAU,oDAA+C,gEACA,CAChE;MAED4B,IAAI,CAACD,YAAY,GAAGC,IAAI,CAACD,YAAY,CAACzE,KAAK,CAAC8C,UAAU,CAAC5G,MAAM,CAAC;IAC/D;IAED,IAAIwB,IAAI,GAAGmH,SAAS,CAAC,CAAC/B,UAAU,EAAE4B,IAAI,CAACD,YAAY,CAAC,CAAC;IACrD,IAAIK,UAAU,GAAGP,WAAW,CAACQ,MAAM,CAACL,IAAI,CAAC;IAEzC;IACA;IACA;IACA,IAAIhC,KAAK,CAACS,QAAQ,IAAIT,KAAK,CAACS,QAAQ,CAACjH,MAAM,GAAG,CAAC,EAAE;MAC/CgE,SAAS;MACP;MACA;MACAwC,KAAK,CAAC7G,KAAK,KAAK,IAAI,EACpB,yDACuC6B,gDAAI,SAAI,CAChD;MAEDiG,aAAa,CAACjB,KAAK,CAACS,QAAQ,EAAEO,QAAQ,EAAEoB,UAAU,EAAEpH,IAAI,CAAC;IAC1D;IAED;IACA;IACA,IAAIgF,KAAK,CAAChF,IAAI,IAAI,IAAI,IAAI,CAACgF,KAAK,CAAC7G,KAAK,EAAE;MACtC;IACD;IAED6H,QAAQ,CAAC5F,IAAI,CAAC;MACZJ,IAAI,EAAJA,IAAI;MACJsH,KAAK,EAAEC,YAAY,CAACvH,IAAI,EAAEgF,KAAK,CAAC7G,KAAK,CAAC;MACtCiJ;IACD,EAAC;GACH;EACDlC,MAAM,CAACsC,OAAO,CAAC,UAACxC,KAAK,EAAE7G,KAAK,EAAI;IAAA;IAC9B;IACA,IAAI6G,KAAK,CAAChF,IAAI,KAAK,EAAE,IAAI,iBAACgF,KAAK,CAAChF,IAAI,aAAVyH,YAAYC,QAAQ,CAAC,GAAG,CAAC,CAAE;MACnDZ,YAAY,CAAC9B,KAAK,EAAE7G,KAAK,CAAC;IAC3B,OAAM;MAAA,2CACgBwJ,uBAAuB,CAAC3C,KAAK,CAAChF,IAAI,CAAC;QAAA4H;MAAA;QAAxD,oDAA0D;UAAA,IAAjDC,QAAQ;UACff,YAAY,CAAC9B,KAAK,EAAE7G,KAAK,EAAE0J,QAAQ,CAAC;QACrC;MAAA;QAAAC;MAAA;QAAAA;MAAA;IACF;EACH,CAAC,CAAC;EAEF,OAAO9B,QAAQ;AACjB;AAEA;;;;;;;;;;;;;AAaG;AACH,SAAS2B,uBAAuBA,CAAC3H,IAAY;EAC3C,IAAI+H,QAAQ,GAAG/H,IAAI,CAACgI,KAAK,CAAC,GAAG,CAAC;EAC9B,IAAID,QAAQ,CAACvJ,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE;EAEpC,yBAAuBuJ,QAAQ;IAA1BE,KAAK;IAAKC,IAAI;EAEnB;EACA,IAAIC,UAAU,GAAGF,KAAK,CAACG,QAAQ,CAAC,GAAG,CAAC;EACpC;EACA,IAAIC,QAAQ,GAAGJ,KAAK,CAACxH,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAEvC,IAAIyH,IAAI,CAAC1J,MAAM,KAAK,CAAC,EAAE;IACrB;IACA;IACA,OAAO2J,UAAU,GAAG,CAACE,QAAQ,EAAE,EAAE,CAAC,GAAG,CAACA,QAAQ,CAAC;EAChD;EAED,IAAIC,YAAY,GAAGX,uBAAuB,CAACO,IAAI,CAAC1C,IAAI,CAAC,GAAG,CAAC,CAAC;EAE1D,IAAI+C,MAAM,GAAa,EAAE;EAEzB;EACA;EACA;EACA;EACA;EACA;EACA;EACAA,MAAM,CAACnI,IAAI,OAAXmI,MAAM,qBACDD,YAAY,CAACrK,GAAG,CAAEuK,iBAAO;IAAA,OAC1BA,OAAO,KAAK,EAAE,GAAGH,QAAQ,GAAG,CAACA,QAAQ,EAAEG,OAAO,CAAC,CAAChD,IAAI,CAAC,GAAG,CAAC;EAAA,EAC1D,EACF;EAED;EACA,IAAI2C,UAAU,EAAE;IACdI,MAAM,CAACnI,IAAI,OAAXmI,MAAM,qBAASD,YAAY,EAAC;EAC7B;EAED;EACA,OAAOC,MAAM,CAACtK,GAAG,CAAE4J,kBAAQ;IAAA,OACzB7H,IAAI,CAAC4B,UAAU,CAAC,GAAG,CAAC,IAAIiG,QAAQ,KAAK,EAAE,GAAG,GAAG,GAAGA,QAAQ;EAAA,EACzD;AACH;AAEA,SAAS3B,iBAAiBA,CAACF,QAAuB;EAChDA,QAAQ,CAACyC,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;IAAA,OACjBD,CAAC,CAACpB,KAAK,KAAKqB,CAAC,CAACrB,KAAK,GACfqB,CAAC,CAACrB,KAAK,GAAGoB,CAAC,CAACpB,KAAK;IAAA,EACjBsB,cAAc,CACZF,CAAC,CAACtB,UAAU,CAACnJ,GAAG,CAAE+I,cAAI;MAAA,OAAKA,IAAI,CAACE,aAAa;IAAA,EAAC,EAC9CyB,CAAC,CAACvB,UAAU,CAACnJ,GAAG,CAAE+I,cAAI;MAAA,OAAKA,IAAI,CAACE,aAAa;IAAA,EAAC,CAC/C;EAAA,EACN;AACH;AAEA,IAAM2B,OAAO,GAAG,WAAW;AAC3B,IAAMC,mBAAmB,GAAG,CAAC;AAC7B,IAAMC,eAAe,GAAG,CAAC;AACzB,IAAMC,iBAAiB,GAAG,CAAC;AAC3B,IAAMC,kBAAkB,GAAG,EAAE;AAC7B,IAAMC,YAAY,GAAG,CAAC,CAAC;AACvB,IAAMC,OAAO,GAAIC,SAAXD,OAAOA,CAAIC,CAAS;EAAA,OAAKA,CAAC,KAAK,GAAG;AAAA;AAExC,SAAS7B,YAAYA,CAACvH,IAAY,EAAE7B,KAA0B;EAC5D,IAAI4J,QAAQ,GAAG/H,IAAI,CAACgI,KAAK,CAAC,GAAG,CAAC;EAC9B,IAAIqB,YAAY,GAAGtB,QAAQ,CAACvJ,MAAM;EAClC,IAAIuJ,QAAQ,CAACuB,IAAI,CAACH,OAAO,CAAC,EAAE;IAC1BE,YAAY,IAAIH,YAAY;EAC7B;EAED,IAAI/K,KAAK,EAAE;IACTkL,YAAY,IAAIN,eAAe;EAChC;EAED,OAAOhB,QAAQ,CACZwB,MAAM,CAAEH,WAAC;IAAA,OAAK,CAACD,OAAO,CAACC,CAAC,CAAC;EAAA,EAAC,CAC1BI,MAAM,CACL,UAAClC,KAAK,EAAEmC,OAAO;IAAA,OACbnC,KAAK,IACJuB,OAAO,CAACa,IAAI,CAACD,OAAO,CAAC,GAClBX,mBAAmB,GACnBW,OAAO,KAAK,EAAE,GACdT,iBAAiB,GACjBC,kBAAkB,CAAC;EAAA,GACzBI,YAAY,CACb;AACL;AAEA,SAAST,cAAcA,CAACF,CAAW,EAAEC,CAAW;EAC9C,IAAIgB,QAAQ,GACVjB,CAAC,CAAClK,MAAM,KAAKmK,CAAC,CAACnK,MAAM,IAAIkK,CAAC,CAACpG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACsH,KAAK,CAAC,UAAChL,CAAC,EAAEwH,CAAC;IAAA,OAAKxH,CAAC,KAAK+J,CAAC,CAACvC,CAAC,CAAC;EAAA,EAAC;EAErE,OAAOuD,QAAQ;EACX;EACA;EACA;EACA;EACAjB,CAAC,CAACA,CAAC,CAAClK,MAAM,GAAG,CAAC,CAAC,GAAGmK,CAAC,CAACA,CAAC,CAACnK,MAAM,GAAG,CAAC,CAAC;EACjC;EACA;EACA,CAAC;AACP;AAEA,SAAS6H,gBAAgBA,CAIvBwD,MAAoC,EACpCxK,QAAgB;EAEhB,IAAM+H,aAAeyC,MAAM,CAArBzC;EAEN,IAAI0C,aAAa,GAAG,EAAE;EACtB,IAAIC,eAAe,GAAG,GAAG;EACzB,IAAI5D,OAAO,GAAoD,EAAE;EACjE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgB,UAAU,CAAC5I,MAAM,EAAE,EAAE4H,CAAC,EAAE;IAC1C,IAAIY,IAAI,GAAGI,UAAU,CAAChB,CAAC,CAAC;IACxB,IAAI4D,GAAG,GAAG5D,CAAC,KAAKgB,UAAU,CAAC5I,MAAM,GAAG,CAAC;IACrC,IAAIyL,iBAAiB,GACnBF,eAAe,KAAK,GAAG,GACnB1K,QAAQ,GACRA,QAAQ,CAACiD,KAAK,CAACyH,eAAe,CAACvL,MAAM,CAAC,IAAI,GAAG;IACnD,IAAIgI,KAAK,GAAG0D,SAAS,CACnB;MAAElK,IAAI,EAAEgH,IAAI,CAACD,YAAY;MAAEE,aAAa,EAAED,IAAI,CAACC,aAAa;MAAE+C;KAAK,EACnEC,iBAAiB,CAClB;IAED,IAAI,CAACzD,KAAK,EAAE,OAAO,IAAI;IAEvB2D,MAAM,CAAC3F,MAAM,CAACsF,aAAa,EAAEtD,KAAK,CAACE,MAAM,CAAC;IAE1C,IAAI1B,KAAK,GAAGgC,IAAI,CAAChC,KAAK;IAEtBmB,OAAO,CAAC/F,IAAI,CAAC;MACX;MACAsG,MAAM,EAAEoD,aAAiC;MACzCzK,QAAQ,EAAE8H,SAAS,CAAC,CAAC4C,eAAe,EAAEvD,KAAK,CAACnH,QAAQ,CAAC,CAAC;MACtD+K,YAAY,EAAEC,iBAAiB,CAC7BlD,SAAS,CAAC,CAAC4C,eAAe,EAAEvD,KAAK,CAAC4D,YAAY,CAAC,CAAC,CACjD;MACDpF;IACD,EAAC;IAEF,IAAIwB,KAAK,CAAC4D,YAAY,KAAK,GAAG,EAAE;MAC9BL,eAAe,GAAG5C,SAAS,CAAC,CAAC4C,eAAe,EAAEvD,KAAK,CAAC4D,YAAY,CAAC,CAAC;IACnE;EACF;EAED,OAAOjE,OAAO;AAChB;AAEA;;;;AAIG;SACamE,YAAYA,CAC1BC,YAAkB,EAClB7D,QAEa;EAAA,IAFbA;IAAAA,SAEI,EAAS;EAAA;EAEb,IAAI1G,IAAI,GAAWuK,YAAY;EAC/B,IAAIvK,IAAI,CAACoI,QAAQ,CAAC,GAAG,CAAC,IAAIpI,IAAI,KAAK,GAAG,IAAI,CAACA,IAAI,CAACoI,QAAQ,CAAC,IAAI,CAAC,EAAE;IAC9D9I,OAAO,CACL,KAAK,EACL,eAAeU,OAAI,GACbA,kDAAI,CAACS,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,GAAqC,0GACE,IAChCT,2CAAI,CAACS,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,SAAI,CACpE;IACDT,IAAI,GAAGA,IAAI,CAACS,OAAO,CAAC,KAAK,EAAE,IAAI,CAAS;EACzC;EAED;EACA,IAAM+J,MAAM,GAAGxK,IAAI,CAAC4B,UAAU,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE;EAE9C,IAAMnC,SAAS,GAAIgL,SAAbhL,SAASA,CAAIgL,CAAM;IAAA,OACvBA,CAAC,IAAI,IAAI,GAAG,EAAE,GAAG,OAAOA,CAAC,KAAK,QAAQ,GAAGA,CAAC,GAAGC,MAAM,CAACD,CAAC,CAAC;EAAA;EAExD,IAAM1C,QAAQ,GAAG/H,IAAI,CAClBgI,KAAK,CAAC,KAAK,CAAC,CACZ/J,GAAG,CAAC,UAACwL,OAAO,EAAEtL,KAAK,EAAEwM,KAAK,EAAI;IAC7B,IAAMC,aAAa,GAAGzM,KAAK,KAAKwM,KAAK,CAACnM,MAAM,GAAG,CAAC;IAEhD;IACA,IAAIoM,aAAa,IAAInB,OAAO,KAAK,GAAG,EAAE;MACpC,IAAMoB,IAAI,GAAG,GAAsB;MACnC;MACA,OAAOpL,SAAS,CAACiH,MAAM,CAACmE,IAAI,CAAC,CAAC;IAC/B;IAED,IAAMC,QAAQ,GAAGrB,OAAO,CAACjD,KAAK,CAAC,kBAAkB,CAAC;IAClD,IAAIsE,QAAQ,EAAE;MACZ,+BAA0BA,QAAQ;QAAzB5L,GAAG;QAAE6L,QAAQ;MACtB,IAAIC,KAAK,GAAGtE,MAAM,CAACxH,GAAsB,CAAC;MAC1CsD,SAAS,CAACuI,QAAQ,KAAK,GAAG,IAAIC,KAAK,IAAI,IAAI,kBAAe9L,GAAG,aAAS,CAAC;MACvE,OAAOO,SAAS,CAACuL,KAAK,CAAC;IACxB;IAED;IACA,OAAOvB,OAAO,CAAChJ,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;GACnC;EACD;EAAA,CACC8I,MAAM,CAAEE,iBAAO;IAAA,OAAK,CAAC,CAACA,OAAO;EAAA,EAAC;EAEjC,OAAOe,MAAM,GAAGzC,QAAQ,CAACvC,IAAI,CAAC,GAAG,CAAC;AACpC;AAiDA;;;;;AAKG;AACa,kBAAS0E,CAIvBe,OAAiC,EACjC5L,QAAgB;EAEhB,IAAI,OAAO4L,OAAO,KAAK,QAAQ,EAAE;IAC/BA,OAAO,GAAG;MAAEjL,IAAI,EAAEiL,OAAO;MAAEhE,aAAa,EAAE,KAAK;MAAE+C,GAAG,EAAE;KAAM;EAC7D;EAED,mBAAgCkB,WAAW,CACzCD,OAAO,CAACjL,IAAI,EACZiL,OAAO,CAAChE,aAAa,EACrBgE,OAAO,CAACjB,GAAG,CACZ;IAAAmB;IAJIC,OAAO;IAAEC,cAAc;EAM5B,IAAI7E,KAAK,GAAGnH,QAAQ,CAACmH,KAAK,CAAC4E,OAAO,CAAC;EACnC,IAAI,CAAC5E,KAAK,EAAE,OAAO,IAAI;EAEvB,IAAIuD,eAAe,GAAGvD,KAAK,CAAC,CAAC,CAAC;EAC9B,IAAI4D,YAAY,GAAGL,eAAe,CAACtJ,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC;EAC3D,IAAI6K,aAAa,GAAG9E,KAAK,CAAClE,KAAK,CAAC,CAAC,CAAC;EAClC,IAAIoE,MAAM,GAAW2E,cAAc,CAAC7B,MAAM,CACxC,UAAC+B,IAAI,QAA6BpN,KAAK,EAAI;IAAA,IAAlCqN,SAAS,GAAcjI,KAAvBiI,SAAS;MAAErD,aAAY5E,KAAZ4E;IAClB;IACA;IACA,IAAIqD,SAAS,KAAK,GAAG,EAAE;MACrB,IAAIC,UAAU,GAAGH,aAAa,CAACnN,KAAK,CAAC,IAAI,EAAE;MAC3CiM,YAAY,GAAGL,eAAe,CAC3BzH,KAAK,CAAC,CAAC,EAAEyH,eAAe,CAACvL,MAAM,GAAGiN,UAAU,CAACjN,MAAM,CAAC,CACpDiC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC;IAC5B;IAED,IAAMgC,KAAK,GAAG6I,aAAa,CAACnN,KAAK,CAAC;IAClC,IAAIgK,UAAU,IAAI,CAAC1F,KAAK,EAAE;MACxB8I,IAAI,CAACC,SAAS,CAAC,GAAGlN,SAAS;IAC5B,OAAM;MACLiN,IAAI,CAACC,SAAS,CAAC,GAAGE,wBAAwB,CAACjJ,KAAK,IAAI,EAAE,EAAE+I,SAAS,CAAC;IACnE;IACD,OAAOD,IAAI;GACZ,EACD,EAAE,CACH;EAED,OAAO;IACL7E,MAAM,EAANA,MAAM;IACNrH,QAAQ,EAAE0K,eAAe;IACzBK,YAAY,EAAZA,YAAY;IACZa;GACD;AACH;AAIA,SAASC,WAAWA,CAClBlL,IAAY,EACZiH,aAAa,EACb+C,GAAG,EAAO;EAAA,IADV/C,aAAa;IAAbA,aAAa,GAAG,KAAK;EAAA;EAAA,IACrB+C,GAAG;IAAHA,GAAG,GAAG,IAAI;EAAA;EAEV1K,OAAO,CACLU,IAAI,KAAK,GAAG,IAAI,CAACA,IAAI,CAACoI,QAAQ,CAAC,GAAG,CAAC,IAAIpI,IAAI,CAACoI,QAAQ,CAAC,IAAI,CAAC,EAC1D,kBAAepI,IAAI,GACbA,kDAAI,CAACS,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,GAAqC,0GACE,2CAChCT,IAAI,CAACS,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,SAAI,CACpE;EAED,IAAIiG,MAAM,GAAwB,EAAE;EACpC,IAAIiF,YAAY,GACd,GAAG,GACH3L,IAAI,CACDS,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;EAAA,CACtBA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;EAAA,CACpBA,OAAO,CAAC,oBAAoB,EAAE,MAAM,CAAC;EAAA,CACrCA,OAAO,CACN,mBAAmB,EACnB,UAACmL,CAAS,EAAEJ,SAAiB,EAAErD,UAAU,EAAI;IAC3CzB,MAAM,CAACtG,IAAI,CAAC;MAAEoL,SAAS,EAATA,SAAS;MAAErD,UAAU,EAAEA,UAAU,IAAI;IAAI,CAAE,CAAC;IAC1D,OAAOA,UAAU,GAAG,cAAc,GAAG,YAAY;EACnD,CAAC,CACF;EAEL,IAAInI,IAAI,CAACoI,QAAQ,CAAC,GAAG,CAAC,EAAE;IACtB1B,MAAM,CAACtG,IAAI,CAAC;MAAEoL,SAAS,EAAE;IAAK,EAAC;IAC/BG,YAAY,IACV3L,IAAI,KAAK,GAAG,IAAIA,IAAI,KAAK,IAAI,GACzB,OAAO;IAAA,EACP,mBAAmB,CAAC;GAC3B,MAAM,IAAIgK,GAAG,EAAE;IACd;IACA2B,YAAY,IAAI,OAAO;GACxB,MAAM,IAAI3L,IAAI,KAAK,EAAE,IAAIA,IAAI,KAAK,GAAG,EAAE;IACtC;IACA;IACA;IACA;IACA;IACA;IACA;IACA2L,YAAY,IAAI,eAAe;EAChC,OAAM;EAIP,IAAIP,OAAO,GAAG,IAAIS,MAAM,CAACF,YAAY,EAAE1E,aAAa,GAAG3I,SAAS,GAAG,GAAG,CAAC;EAEvE,OAAO,CAAC8M,OAAO,EAAE1E,MAAM,CAAC;AAC1B;AAEA,SAASJ,eAAeA,CAAC7D,KAAa;EACpC,IAAI;IACF,OAAOqJ,SAAS,CAACrJ,KAAK,CAAC;GACxB,CAAC,OAAO4B,KAAK,EAAE;IACd/E,OAAO,CACL,KAAK,EACL,oBAAiBmD,KAAK,GAC2C,kIAClD4B,KAAK,QAAI,CACzB;IAED,OAAO5B,KAAK;EACb;AACH;AAEA,SAASiJ,wBAAwBA,CAACjJ,KAAa,EAAE+I,SAAiB;EAChE,IAAI;IACF,OAAOO,kBAAkB,CAACtJ,KAAK,CAAC;GACjC,CAAC,OAAO4B,KAAK,EAAE;IACd/E,OAAO,CACL,KAAK,EACL,gCAAgCkM,YAAS,GACvB/I,4DAAK,GAAgD,2FAClC4B,KAAK,QAAI,CAC/C;IAED,OAAO5B,KAAK;EACb;AACH;AAEA;;AAEG;AACa,sBAAasD,CAC3B1G,QAAgB,EAChByG,QAAgB;EAEhB,IAAIA,QAAQ,KAAK,GAAG,EAAE,OAAOzG,QAAQ;EAErC,IAAI,CAACA,QAAQ,CAAC2M,WAAW,EAAE,CAACpK,UAAU,CAACkE,QAAQ,CAACkG,WAAW,EAAE,CAAC,EAAE;IAC9D,OAAO,IAAI;EACZ;EAED;EACA;EACA,IAAIC,UAAU,GAAGnG,QAAQ,CAACsC,QAAQ,CAAC,GAAG,CAAC,GACnCtC,QAAQ,CAACtH,MAAM,GAAG,CAAC,GACnBsH,QAAQ,CAACtH,MAAM;EACnB,IAAI0N,QAAQ,GAAG7M,QAAQ,CAACE,MAAM,CAAC0M,UAAU,CAAC;EAC1C,IAAIC,QAAQ,IAAIA,QAAQ,KAAK,GAAG,EAAE;IAChC;IACA,OAAO,IAAI;EACZ;EAED,OAAO7M,QAAQ,CAACiD,KAAK,CAAC2J,UAAU,CAAC,IAAI,GAAG;AAC1C;AAEA;;;;AAIG;SACaE,WAAWA,CAAClN,EAAM,EAAEmN,YAAY,EAAM;EAAA,IAAlBA,YAAY;IAAZA,YAAY,GAAG,GAAG;EAAA;EACpD,YAII,OAAOnN,EAAE,KAAK,QAAQ,GAAGgB,SAAS,CAAChB,EAAE,CAAC,GAAGA,EAAE;IAHnCoN,UAAU,SAApBhN,QAAQ;IAAAiN,qBACRpM,MAAM;IAANA,MAAM,6BAAG,EAAE;IAAAqM,mBACXpM,IAAI;IAAJA,IAAI,2BAAG;EAGT,IAAId,QAAQ,GAAGgN,UAAU,GACrBA,UAAU,CAACzK,UAAU,CAAC,GAAG,CAAC,GACxByK,UAAU,GACVG,eAAe,CAACH,UAAU,EAAED,YAAY,CAAC,GAC3CA,YAAY;EAEhB,OAAO;IACL/M,QAAQ,EAARA,QAAQ;IACRa,MAAM,EAAEuM,eAAe,CAACvM,MAAM,CAAC;IAC/BC,IAAI,EAAEuM,aAAa,CAACvM,IAAI;GACzB;AACH;AAEA,SAASqM,eAAeA,CAACzF,YAAoB,EAAEqF,YAAoB;EACjE,IAAIrE,QAAQ,GAAGqE,YAAY,CAAC3L,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAACuH,KAAK,CAAC,GAAG,CAAC;EAC1D,IAAI2E,gBAAgB,GAAG5F,YAAY,CAACiB,KAAK,CAAC,GAAG,CAAC;EAE9C2E,gBAAgB,CAACnF,OAAO,CAAEiC,iBAAO,EAAI;IACnC,IAAIA,OAAO,KAAK,IAAI,EAAE;MACpB;MACA,IAAI1B,QAAQ,CAACvJ,MAAM,GAAG,CAAC,EAAEuJ,QAAQ,CAAC6E,GAAG,EAAE;IACxC,OAAM,IAAInD,OAAO,KAAK,GAAG,EAAE;MAC1B1B,QAAQ,CAAC3H,IAAI,CAACqJ,OAAO,CAAC;IACvB;EACH,CAAC,CAAC;EAEF,OAAO1B,QAAQ,CAACvJ,MAAM,GAAG,CAAC,GAAGuJ,QAAQ,CAACvC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;AACvD;AAEA,SAASqH,mBAAmBA,CAC1BC,IAAY,EACZC,KAAa,EACbC,IAAY,EACZhN,IAAmB;EAEnB,OACE,oBAAqB8M,OAAI,GACjBC,wDAAK,iBAAavN,IAAI,CAACC,SAAS,CACtCO,IAAI,CACL,wCAAoC,IAC7BgN,aAAI,8DAA2D,GACJ;AAEvE;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBG;AACG,SAAUC,0BAA0BA,CAExC9G,OAAY;EACZ,OAAOA,OAAO,CAACoD,MAAM,CACnB,UAAC/C,KAAK,EAAErI,KAAK;IAAA,OACXA,KAAK,KAAK,CAAC,IAAKqI,KAAK,CAACxB,KAAK,CAAChF,IAAI,IAAIwG,KAAK,CAACxB,KAAK,CAAChF,IAAI,CAACxB,MAAM,GAAG,CAAE;EAAA,EACnE;AACH;AAEA;AACA;AACgB,4BAAmB0O,CAEjC/G,OAAY,EAAEgH,oBAA6B;EAC3C,IAAIC,WAAW,GAAGH,0BAA0B,CAAC9G,OAAO,CAAC;EAErD;EACA;EACA;EACA,IAAIgH,oBAAoB,EAAE;IACxB,OAAOC,WAAW,CAACnP,GAAG,CAAC,UAACuI,KAAK,EAAEpD,GAAG;MAAA,OAChCA,GAAG,KAAK+C,OAAO,CAAC3H,MAAM,GAAG,CAAC,GAAGgI,KAAK,CAACnH,QAAQ,GAAGmH,KAAK,CAAC4D,YAAY;IAAA,EACjE;EACF;EAED,OAAOgD,WAAW,CAACnP,GAAG,CAAEuI,eAAK;IAAA,OAAKA,KAAK,CAAC4D,YAAY;EAAA,EAAC;AACvD;AAEA;;AAEG;AACG,SAAUiD,SAASA,CACvBC,KAAS,EACTC,cAAwB,EACxBC,gBAAwB,EACxBC,cAAc,EAAQ;EAAA,IAAtBA,cAAc;IAAdA,cAAc,GAAG,KAAK;EAAA;EAEtB,IAAIxO,EAAiB;EACrB,IAAI,OAAOqO,KAAK,KAAK,QAAQ,EAAE;IAC7BrO,EAAE,GAAGgB,SAAS,CAACqN,KAAK,CAAC;EACtB,OAAM;IACLrO,EAAE,YAAQqO,SAAK,CAAE;IAEjB9K,SAAS,CACP,CAACvD,EAAE,CAACI,QAAQ,IAAI,CAACJ,EAAE,CAACI,QAAQ,CAACqI,QAAQ,CAAC,GAAG,CAAC,EAC1CmF,mBAAmB,CAAC,GAAG,EAAE,UAAU,EAAE,QAAQ,EAAE5N,EAAE,CAAC,CACnD;IACDuD,SAAS,CACP,CAACvD,EAAE,CAACI,QAAQ,IAAI,CAACJ,EAAE,CAACI,QAAQ,CAACqI,QAAQ,CAAC,GAAG,CAAC,EAC1CmF,mBAAmB,CAAC,GAAG,EAAE,UAAU,EAAE,MAAM,EAAE5N,EAAE,CAAC,CACjD;IACDuD,SAAS,CACP,CAACvD,EAAE,CAACiB,MAAM,IAAI,CAACjB,EAAE,CAACiB,MAAM,CAACwH,QAAQ,CAAC,GAAG,CAAC,EACtCmF,mBAAmB,CAAC,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAE5N,EAAE,CAAC,CAC/C;EACF;EAED,IAAIyO,WAAW,GAAGJ,KAAK,KAAK,EAAE,IAAIrO,EAAE,CAACI,QAAQ,KAAK,EAAE;EACpD,IAAIgN,UAAU,GAAGqB,WAAW,GAAG,GAAG,GAAGzO,EAAE,CAACI,QAAQ;EAEhD,IAAIsO,IAAY;EAEhB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAItB,UAAU,IAAI,IAAI,EAAE;IACtBsB,IAAI,GAAGH,gBAAgB;EACxB,OAAM;IACL,IAAII,kBAAkB,GAAGL,cAAc,CAAC/O,MAAM,GAAG,CAAC;IAElD;IACA;IACA;IACA;IACA,IAAI,CAACiP,cAAc,IAAIpB,UAAU,CAACzK,UAAU,CAAC,IAAI,CAAC,EAAE;MAClD,IAAIiM,UAAU,GAAGxB,UAAU,CAACrE,KAAK,CAAC,GAAG,CAAC;MAEtC,OAAO6F,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;QAC7BA,UAAU,CAACC,KAAK,EAAE;QAClBF,kBAAkB,IAAI,CAAC;MACxB;MAED3O,EAAE,CAACI,QAAQ,GAAGwO,UAAU,CAACrI,IAAI,CAAC,GAAG,CAAC;IACnC;IAEDmI,IAAI,GAAGC,kBAAkB,IAAI,CAAC,GAAGL,cAAc,CAACK,kBAAkB,CAAC,GAAG,GAAG;EAC1E;EAED,IAAI5N,IAAI,GAAGmM,WAAW,CAAClN,EAAE,EAAE0O,IAAI,CAAC;EAEhC;EACA,IAAII,wBAAwB,GAC1B1B,UAAU,IAAIA,UAAU,KAAK,GAAG,IAAIA,UAAU,CAACjE,QAAQ,CAAC,GAAG,CAAC;EAC9D;EACA,IAAI4F,uBAAuB,GACzB,CAACN,WAAW,IAAIrB,UAAU,KAAK,GAAG,KAAKmB,gBAAgB,CAACpF,QAAQ,CAAC,GAAG,CAAC;EACvE,IACE,CAACpI,IAAI,CAACX,QAAQ,CAAC+I,QAAQ,CAAC,GAAG,CAAC,KAC3B2F,wBAAwB,IAAIC,uBAAuB,CAAC,EACrD;IACAhO,IAAI,CAACX,QAAQ,IAAI,GAAG;EACrB;EAED,OAAOW,IAAI;AACb;AAEA;;AAEG;AACG,SAAUiO,aAAaA,CAAChP,EAAM;EAClC;EACA,OAAOA,EAAE,KAAK,EAAE,IAAKA,EAAW,CAACI,QAAQ,KAAK,EAAE,GAC5C,GAAG,GACH,OAAOJ,EAAE,KAAK,QAAQ,GACtBgB,SAAS,CAAChB,EAAE,CAAC,CAACI,QAAQ,GACtBJ,EAAE,CAACI,QAAQ;AACjB;AAEA;;AAEG;IACU8H,SAAS,GAAI+G,SAAb/G,SAASA,CAAI+G,KAAe;EAAA,OACvCA,KAAK,CAAC1I,IAAI,CAAC,GAAG,CAAC,CAAC/E,OAAO,CAAC,QAAQ,EAAE,GAAG;AAAA;AAEvC;;AAEG;IACU4J,iBAAiB,GAAIhL,SAArBgL,iBAAiBA,CAAIhL,QAAgB;EAAA,OAChDA,QAAQ,CAACoB,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG;AAAA;AAElD;;AAEG;AACI,IAAMgM,eAAe,GAAIvM,SAAnBuM,eAAeA,CAAIvM,MAAc;EAAA,OAC5C,CAACA,MAAM,IAAIA,MAAM,KAAK,GAAG,GACrB,EAAE,GACFA,MAAM,CAAC0B,UAAU,CAAC,GAAG,CAAC,GACtB1B,MAAM,GACN,GAAG,GAAGA,MAAM;AAAA;AAElB;;AAEG;AACI,IAAMwM,aAAa,GAAIvM,SAAjBuM,aAAaA,CAAIvM,IAAY;EAAA,OACxC,CAACA,IAAI,IAAIA,IAAI,KAAK,GAAG,GAAG,EAAE,GAAGA,IAAI,CAACyB,UAAU,CAAC,GAAG,CAAC,GAAGzB,IAAI,GAAG,GAAG,GAAGA,IAAI;AAAA;AAOvE;;;AAGG;AACI,IAAMgO,IAAI,GAAiB,SAArBA,IAAIA,CAAkBxH,IAAI,EAAEyH,IAAI,EAAS;EAAA,IAAbA,IAAI;IAAJA,IAAI,GAAG,EAAE;EAAA;EAChD,IAAIC,YAAY,GAAG,OAAOD,IAAI,KAAK,QAAQ,GAAG;IAAEE,MAAM,EAAEF;EAAI,CAAE,GAAGA,IAAI;EAErE,IAAIG,OAAO,GAAG,IAAIC,OAAO,CAACH,YAAY,CAACE,OAAO,CAAC;EAC/C,IAAI,CAACA,OAAO,CAACE,GAAG,CAAC,cAAc,CAAC,EAAE;IAChCF,OAAO,CAACG,GAAG,CAAC,cAAc,EAAE,iCAAiC,CAAC;EAC/D;EAED,OAAO,IAAIC,QAAQ,CAACnP,IAAI,CAACC,SAAS,CAACkH,IAAI,CAAC,eACnC0H,YAAY;IACfE;EAAO,EACR,CAAC;AACJ;AAAC,IAQYK,oBAAqB;EAAAC;EAAA;EAAA;IAAAC;IAAA;EAAA;EAAA;AAAA,iCAAQnM,KAAK;AAAA,IAElCoM,YAAY;EAWvBC,sBAAYrI,IAA6B,EAAE0H,YAA2B;IAAA;IAAAS;IAV9D,mBAAc,GAAgB,IAAIhK,GAAG,EAAU;IAI/C,gBAAW,GACjB,IAAIA,GAAG,EAAE;IAGX,IAAY,gBAAa,EAAE;IAGzBtC,SAAS,CACPmE,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAI,CAACsI,KAAK,CAACC,OAAO,CAACvI,IAAI,CAAC,EACxD,oCAAoC,CACrC;IAED;IACA;IACA,IAAIwI,MAAyC;IAC7C,IAAI,CAACC,YAAY,GAAG,IAAIC,OAAO,CAAC,UAACzD,CAAC,EAAE0D,CAAC;MAAA,OAAMH,MAAM,GAAGG,CAAE;IAAA,EAAC;IACvD,IAAI,CAACC,UAAU,GAAG,IAAIC,eAAe,EAAE;IACvC,IAAIC,OAAO,GAAGA,SAAVA,OAAOA;MAAA,OACTN,MAAM,CAAC,IAAIP,oBAAoB,CAAC,uBAAuB,CAAC,CAAC;IAAA;IAC3D,IAAI,CAACc,mBAAmB,GAAG;MAAA,OACzBC,KAAI,CAACJ,UAAU,CAACK,MAAM,CAACjL,mBAAmB,CAAC,OAAO,EAAE8K,OAAO,CAAC;IAAA;IAC9D,IAAI,CAACF,UAAU,CAACK,MAAM,CAAClL,gBAAgB,CAAC,OAAO,EAAE+K,OAAO,CAAC;IAEzD,IAAI,CAAC9I,IAAI,GAAGwD,MAAM,CAACnM,OAAO,CAAC2I,IAAI,CAAC,CAAC6C,MAAM,CACrC,UAACqG,GAAG;MAAA,2BAAcC;QAAX5Q,GAAG;QAAEuD,KAAK;MAAC,OAChB0H,MAAM,CAAC3F,MAAM,CAACqL,GAAG,sBACd3Q,GAAG,EAAGyQ,KAAI,CAACI,YAAY,CAAC7Q,GAAG,EAAEuD,KAAK,EACpC,CAAC;KACJ,IAAE,CACH;IAED,IAAI,IAAI,CAACuN,IAAI,EAAE;MACb;MACA,IAAI,CAACN,mBAAmB,EAAE;IAC3B;IAED,IAAI,CAACtB,IAAI,GAAGC,YAAY;EAC1B;EAAA4B;IAAA/Q;IAAAuD,OAEQsN,sBACN7Q,GAAW,EACXuD,KAAiC;MAAA;MAEjC,IAAI,EAAEA,KAAK,YAAY4M,OAAO,CAAC,EAAE;QAC/B,OAAO5M,KAAK;MACb;MAED,IAAI,CAACyN,YAAY,CAAC9P,IAAI,CAAClB,GAAG,CAAC;MAC3B,IAAI,CAACiR,cAAc,CAACC,GAAG,CAAClR,GAAG,CAAC;MAE5B;MACA;MACA,IAAImR,OAAO,GAAmBhB,OAAO,CAACiB,IAAI,CAAC,CAAC7N,KAAK,EAAE,IAAI,CAAC2M,YAAY,CAAC,CAAC,CAACmB,IAAI,CACxE5J,cAAI;QAAA,OAAK6J,MAAI,CAACC,QAAQ,CAACJ,OAAO,EAAEnR,GAAG,EAAEZ,SAAS,EAAEqI,IAAe,CAAC;MAAA,GAChEtC,eAAK;QAAA,OAAKmM,MAAI,CAACC,QAAQ,CAACJ,OAAO,EAAEnR,GAAG,EAAEmF,KAAgB,CAAC;MAAA,EACzD;MAED;MACA;MACAgM,OAAO,CAACK,KAAK,CAAC,YAAO,EAAC,CAAC;MAEvBvG,MAAM,CAACwG,cAAc,CAACN,OAAO,EAAE,UAAU,EAAE;QAAEO,GAAG,EAAEA;UAAAA,OAAM;QAAA;MAAI,CAAE,CAAC;MAC/D,OAAOP,OAAO;IAChB;EAAA;IAAAnR;IAAAuD,OAEQgO,kBACNJ,OAAuB,EACvBnR,GAAW,EACXmF,KAAc,EACdsC,IAAc;MAEd,IACE,IAAI,CAAC4I,UAAU,CAACK,MAAM,CAACiB,OAAO,IAC9BxM,KAAK,YAAYuK,oBAAoB,EACrC;QACA,IAAI,CAACc,mBAAmB,EAAE;QAC1BvF,MAAM,CAACwG,cAAc,CAACN,OAAO,EAAE,QAAQ,EAAE;UAAEO,GAAG,EAAEA;YAAAA,OAAMvM;UAAAA;QAAK,CAAE,CAAC;QAC9D,OAAOgL,OAAO,CAACF,MAAM,CAAC9K,KAAK,CAAC;MAC7B;MAED,IAAI,CAAC8L,cAAc,CAACW,MAAM,CAAC5R,GAAG,CAAC;MAE/B,IAAI,IAAI,CAAC8Q,IAAI,EAAE;QACb;QACA,IAAI,CAACN,mBAAmB,EAAE;MAC3B;MAED;MACA;MACA,IAAIrL,KAAK,KAAK/F,SAAS,IAAIqI,IAAI,KAAKrI,SAAS,EAAE;QAC7C,IAAIyS,cAAc,GAAG,IAAIpO,KAAK,CAC5B,0BAA0BzD,MAAG,gGACwB,CACtD;QACDiL,MAAM,CAACwG,cAAc,CAACN,OAAO,EAAE,QAAQ,EAAE;UAAEO,GAAG,EAAEA;YAAAA,OAAMG;UAAAA;QAAc,CAAE,CAAC;QACvE,IAAI,CAACC,IAAI,CAAC,KAAK,EAAE9R,GAAG,CAAC;QACrB,OAAOmQ,OAAO,CAACF,MAAM,CAAC4B,cAAc,CAAC;MACtC;MAED,IAAIpK,IAAI,KAAKrI,SAAS,EAAE;QACtB6L,MAAM,CAACwG,cAAc,CAACN,OAAO,EAAE,QAAQ,EAAE;UAAEO,GAAG,EAAEA;YAAAA,OAAMvM;UAAAA;QAAK,CAAE,CAAC;QAC9D,IAAI,CAAC2M,IAAI,CAAC,KAAK,EAAE9R,GAAG,CAAC;QACrB,OAAOmQ,OAAO,CAACF,MAAM,CAAC9K,KAAK,CAAC;MAC7B;MAED8F,MAAM,CAACwG,cAAc,CAACN,OAAO,EAAE,OAAO,EAAE;QAAEO,GAAG,EAAEA;UAAAA,OAAMjK;QAAAA;MAAI,CAAE,CAAC;MAC5D,IAAI,CAACqK,IAAI,CAAC,KAAK,EAAE9R,GAAG,CAAC;MACrB,OAAOyH,IAAI;IACb;EAAA;IAAAzH;IAAAuD,OAEQuO,cAAKH,OAAgB,EAAEI,UAAmB;MAChD,IAAI,CAACC,WAAW,CAAC1J,OAAO,CAAE2J,oBAAU;QAAA,OAAKA,UAAU,CAACN,OAAO,EAAEI,UAAU,CAAC;MAAA,EAAC;IAC3E;EAAA;IAAA/R;IAAAuD,OAEA2O,mBAAUtQ,EAAmD;MAAA;MAC3D,IAAI,CAACoQ,WAAW,CAACd,GAAG,CAACtP,EAAE,CAAC;MACxB,OAAO;QAAA,OAAMuQ,MAAI,CAACH,WAAW,CAACJ,MAAM,CAAChQ,EAAE,CAAC;MAAA;IAC1C;EAAA;IAAA5B;IAAAuD,OAEA6O,kBAAM;MAAA;MACJ,IAAI,CAAC/B,UAAU,CAACgC,KAAK,EAAE;MACvB,IAAI,CAACpB,cAAc,CAAC3I,OAAO,CAAC,UAACgK,CAAC,EAAEC,CAAC;QAAA,OAAKC,MAAI,CAACvB,cAAc,CAACW,MAAM,CAACW,CAAC,CAAC;MAAA,EAAC;MACpE,IAAI,CAACT,IAAI,CAAC,IAAI,CAAC;IACjB;EAAA;IAAA9R;IAAAuD;MAAA,4EAEA,iBAAkBmN,MAAmB;QAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAC/BiB,OAAO,GAAG,KAAK;gBAAA,IACd,IAAI,CAACb,IAAI;kBAAA2B;kBAAA;gBAAA;gBACRlC,OAAO,GAAGA,SAAVA,OAAOA;kBAAA,OAASmC,MAAI,CAACN,MAAM,EAAE;gBAAA;gBACjC1B,MAAM,CAAClL,gBAAgB,CAAC,OAAO,EAAE+K,OAAO,CAAC;gBAAAkC;gBAAA,OACzB,IAAItC,OAAO,CAAEwC,iBAAO,EAAI;kBACtCD,MAAI,CAACR,SAAS,CAAEP,iBAAO,EAAI;oBACzBjB,MAAM,CAACjL,mBAAmB,CAAC,OAAO,EAAE8K,OAAO,CAAC;oBAC5C,IAAIoB,OAAO,IAAIe,MAAI,CAAC5B,IAAI,EAAE;sBACxB6B,OAAO,CAAChB,OAAO,CAAC;oBACjB;kBACH,CAAC,CAAC;gBACJ,CAAC,CAAC;cAAA;gBAPFA,OAAO;cAAA;gBAAA,iCASFA,OAAO;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAChB;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA3R;IAAA0R,KAEA,eAAQ;MACN,OAAO,IAAI,CAACT,cAAc,CAAC2B,IAAI,KAAK,CAAC;IACvC;EAAA;IAAA5S;IAAA0R,KAEA,eAAiB;MACfpO,SAAS,CACP,IAAI,CAACmE,IAAI,KAAK,IAAI,IAAI,IAAI,CAACqJ,IAAI,EAC/B,2DAA2D,CAC5D;MAED,OAAO7F,MAAM,CAACnM,OAAO,CAAC,IAAI,CAAC2I,IAAI,CAAC,CAAC6C,MAAM,CACrC,UAACqG,GAAG;QAAA,2BAAckC;UAAX7S,GAAG;UAAEuD,KAAK;QAAC,OAChB0H,MAAM,CAAC3F,MAAM,CAACqL,GAAG,sBACd3Q,GAAG,EAAG8S,oBAAoB,CAACvP,KAAK,EAClC,CAAC;OACJ,IAAE,CACH;IACH;EAAA;IAAAvD;IAAA0R,KAEA,eAAe;MACb,OAAO3B,KAAK,CAACtB,IAAI,CAAC,IAAI,CAACwC,cAAc,CAAC;IACxC;EAAA;EAAA;AAAA;AAGF,SAAS8B,gBAAgBA,CAACxP,KAAU;EAClC,OACEA,KAAK,YAAY4M,OAAO,IAAK5M,KAAwB,CAACyP,QAAQ,KAAK,IAAI;AAE3E;AAEA,SAASF,oBAAoBA,CAACvP,KAAU;EACtC,IAAI,CAACwP,gBAAgB,CAACxP,KAAK,CAAC,EAAE;IAC5B,OAAOA,KAAK;EACb;EAED,IAAIA,KAAK,CAAC0P,MAAM,EAAE;IAChB,MAAM1P,KAAK,CAAC0P,MAAM;EACnB;EACD,OAAO1P,KAAK,CAAC2P,KAAK;AACpB;AAOO,IAAMC,KAAK,GAAkB,SAAvBA,KAAKA,CAAmB1L,IAAI,EAAEyH,IAAI,EAAS;EAAA,IAAbA,IAAI;IAAJA,IAAI,GAAG,EAAE;EAAA;EAClD,IAAIC,YAAY,GAAG,OAAOD,IAAI,KAAK,QAAQ,GAAG;IAAEE,MAAM,EAAEF;EAAI,CAAE,GAAGA,IAAI;EAErE,OAAO,IAAIW,YAAY,CAACpI,IAAI,EAAE0H,YAAY,CAAC;AAC7C;AAOA;;;AAGG;AACI,IAAMiE,QAAQ,GAAqB,SAA7BA,QAAQA,CAAsBnQ,GAAG,EAAEiM,IAAI,EAAU;EAAA,IAAdA,IAAI;IAAJA,IAAI,GAAG,GAAG;EAAA;EACxD,IAAIC,YAAY,GAAGD,IAAI;EACvB,IAAI,OAAOC,YAAY,KAAK,QAAQ,EAAE;IACpCA,YAAY,GAAG;MAAEC,MAAM,EAAED;KAAc;GACxC,MAAM,IAAI,OAAOA,YAAY,CAACC,MAAM,KAAK,WAAW,EAAE;IACrDD,YAAY,CAACC,MAAM,GAAG,GAAG;EAC1B;EAED,IAAIC,OAAO,GAAG,IAAIC,OAAO,CAACH,YAAY,CAACE,OAAO,CAAC;EAC/CA,OAAO,CAACG,GAAG,CAAC,UAAU,EAAEvM,GAAG,CAAC;EAE5B,OAAO,IAAIwM,QAAQ,CAAC,IAAI,eACnBN,YAAY;IACfE;EAAO,EACR,CAAC;AACJ;AAEA;;;;AAIG;IACUgE,gBAAgB,GAAqBA,SAArCA,gBAAgBA,CAAsBpQ,GAAG,EAAEiM,IAAI,EAAI;EAC9D,IAAIoE,QAAQ,GAAGF,QAAQ,CAACnQ,GAAG,EAAEiM,IAAI,CAAC;EAClCoE,QAAQ,CAACjE,OAAO,CAACG,GAAG,CAAC,yBAAyB,EAAE,MAAM,CAAC;EACvD,OAAO8D,QAAQ;AACjB;AAQA;;;;;;;AAOG;AAPH,IAQaC,iBAAiB,6BAO5BzD,2BACEV,MAAc,EACdoE,UAA8B,EAC9B/L,IAAS,EACTgM,QAAQ,EAAQ;EAAA7D;EAAA,IAAhB6D,QAAQ;IAARA,QAAQ,GAAG,KAAK;EAAA;EAEhB,IAAI,CAACrE,MAAM,GAAGA,MAAM;EACpB,IAAI,CAACoE,UAAU,GAAGA,UAAU,IAAI,EAAE;EAClC,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EACxB,IAAIhM,IAAI,YAAYhE,KAAK,EAAE;IACzB,IAAI,CAACgE,IAAI,GAAGA,IAAI,CAACzD,QAAQ,EAAE;IAC3B,IAAI,CAACmB,KAAK,GAAGsC,IAAI;EAClB,OAAM;IACL,IAAI,CAACA,IAAI,GAAGA,IAAI;EACjB;AACH;AAGF;;;AAGG;AACG,SAAUiM,oBAAoBA,CAACvO,KAAU;EAC7C,OACEA,KAAK,IAAI,IAAI,IACb,OAAOA,KAAK,CAACiK,MAAM,KAAK,QAAQ,IAChC,OAAOjK,KAAK,CAACqO,UAAU,KAAK,QAAQ,IACpC,OAAOrO,KAAK,CAACsO,QAAQ,KAAK,SAAS,IACnC,MAAM,IAAItO,KAAK;AAEnB;AC36BA,IAAMwO,uBAAuB,GAAyB,CACpD,MAAM,EACN,KAAK,EACL,OAAO,EACP,QAAQ,CACT;AACD,IAAMC,oBAAoB,GAAG,IAAIhO,GAAG,CAClC+N,uBAAuB,CACxB;AAED,IAAME,sBAAsB,IAC1B,KAAK,SACFF,uBAAuB,CAC3B;AACD,IAAMG,mBAAmB,GAAG,IAAIlO,GAAG,CAAaiO,sBAAsB,CAAC;AAEvE,IAAME,mBAAmB,GAAG,IAAInO,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AAC9D,IAAMoO,iCAAiC,GAAG,IAAIpO,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAEtD,IAAMqO,eAAe,GAA6B;EACvD9U,KAAK,EAAE,MAAM;EACbc,QAAQ,EAAEb,SAAS;EACnB8U,UAAU,EAAE9U,SAAS;EACrB+U,UAAU,EAAE/U,SAAS;EACrBgV,WAAW,EAAEhV,SAAS;EACtBiV,QAAQ,EAAEjV,SAAS;EACnB6P,IAAI,EAAE7P,SAAS;EACfkV,IAAI,EAAElV;;AAGD,IAAMmV,YAAY,GAA0B;EACjDpV,KAAK,EAAE,MAAM;EACbsI,IAAI,EAAErI,SAAS;EACf8U,UAAU,EAAE9U,SAAS;EACrB+U,UAAU,EAAE/U,SAAS;EACrBgV,WAAW,EAAEhV,SAAS;EACtBiV,QAAQ,EAAEjV,SAAS;EACnB6P,IAAI,EAAE7P,SAAS;EACfkV,IAAI,EAAElV;;AAGD,IAAMoV,YAAY,GAAqB;EAC5CrV,KAAK,EAAE,WAAW;EAClBsV,OAAO,EAAErV,SAAS;EAClBsV,KAAK,EAAEtV,SAAS;EAChBa,QAAQ,EAAEb;;AAGZ,IAAMuV,kBAAkB,GAAG,+BAA+B;AAE1D,IAAMC,yBAAyB,GAAgC9O,SAAzD8O,yBAAyBA,CAAgC9O,KAAK;EAAA,OAAM;IACxE+O,gBAAgB,EAAEC,OAAO,CAAChP,KAAK,CAAC+O,gBAAgB;EACjD;AAAA,CAAC;AAEF,IAAME,uBAAuB,GAAG,0BAA0B;AAE1D;AAEA;AACA;AACA;AAEA;;AAEG;AACG,SAAUC,YAAYA,CAAC9F,IAAgB;EAC3C,IAAM+F,YAAY,GAAG/F,IAAI,CAACnN,MAAM,GAC5BmN,IAAI,CAACnN,MAAM,GACX,OAAOA,MAAM,KAAK,WAAW,GAC7BA,MAAM,GACN3C,SAAS;EACb,IAAM8V,SAAS,GACb,OAAOD,YAAY,KAAK,WAAW,IACnC,OAAOA,YAAY,CAACpS,QAAQ,KAAK,WAAW,IAC5C,OAAOoS,YAAY,CAACpS,QAAQ,CAACsS,aAAa,KAAK,WAAW;EAC5D,IAAMC,QAAQ,GAAG,CAACF,SAAS;EAE3B5R,SAAS,CACP4L,IAAI,CAAClJ,MAAM,CAAC1G,MAAM,GAAG,CAAC,EACtB,2DAA2D,CAC5D;EAED,IAAI2G,kBAA8C;EAClD,IAAIiJ,IAAI,CAACjJ,kBAAkB,EAAE;IAC3BA,kBAAkB,GAAGiJ,IAAI,CAACjJ,kBAAkB;EAC7C,OAAM,IAAIiJ,IAAI,CAACmG,mBAAmB,EAAE;IACnC;IACA,IAAIA,mBAAmB,GAAGnG,IAAI,CAACmG,mBAAmB;IAClDpP,kBAAkB,GAAIH,iCAAK;MAAA,OAAM;QAC/B+O,gBAAgB,EAAEQ,mBAAmB,CAACvP,KAAK;MAC5C;IAAA,CAAC;EACH,OAAM;IACLG,kBAAkB,GAAG2O,yBAAyB;EAC/C;EAED;EACA,IAAIzO,QAAQ,GAAkB,EAAE;EAChC;EACA,IAAImP,UAAU,GAAGvP,yBAAyB,CACxCmJ,IAAI,CAAClJ,MAAM,EACXC,kBAAkB,EAClB7G,SAAS,EACT+G,QAAQ,CACT;EACD,IAAIoP,kBAAyD;EAC7D,IAAI3O,QAAQ,GAAGsI,IAAI,CAACtI,QAAQ,IAAI,GAAG;EACnC;EACA,IAAI4O,MAAM;IACRC,iBAAiB,EAAE,KAAK;IACxBC,sBAAsB,EAAE,KAAK;IAC7BC,mBAAmB,EAAE,KAAK;IAC1BC,kBAAkB,EAAE,KAAK;IACzB3H,oBAAoB,EAAE;GACnBiB,MAAI,CAACsG,MAAM,CACf;EACD;EACA,IAAIK,eAAe,GAAwB,IAAI;EAC/C;EACA,IAAI7D,WAAW,GAAG,IAAIpM,GAAG,EAAoB;EAC7C;EACA,IAAIkQ,oBAAoB,GAAkC,IAAI;EAC9D;EACA,IAAIC,uBAAuB,GAA2C,IAAI;EAC1E;EACA,IAAIC,iBAAiB,GAAqC,IAAI;EAC9D;EACA;EACA;EACA;EACA;EACA;EACA,IAAIC,qBAAqB,GAAG/G,IAAI,CAACgH,aAAa,IAAI,IAAI;EAEtD,IAAIC,cAAc,GAAGzP,WAAW,CAAC4O,UAAU,EAAEpG,IAAI,CAACxO,OAAO,CAACT,QAAQ,EAAE2G,QAAQ,CAAC;EAC7E,IAAIwP,aAAa,GAAqB,IAAI;EAE1C,IAAID,cAAc,IAAI,IAAI,EAAE;IAC1B;IACA;IACA,IAAIhR,KAAK,GAAGkR,sBAAsB,CAAC,GAAG,EAAE;MACtClW,QAAQ,EAAE+O,IAAI,CAACxO,OAAO,CAACT,QAAQ,CAACE;IACjC,EAAC;IACF,4BAAyBmW,sBAAsB,CAAChB,UAAU,CAAC;MAArDrO,OAAO,yBAAPA,OAAO;MAAEnB;IACfqQ,cAAc,GAAGlP,OAAO;IACxBmP,aAAa,uBAAMtQ,KAAK,CAACO,EAAE,EAAGlB,MAAO;EACtC;EAED,IAAIoR,WAAoB;EACxB,IAAIC,aAAa,GAAGL,cAAc,CAAC/L,IAAI,CAAEqM,WAAC;IAAA,OAAKA,CAAC,CAAC3Q,KAAK,CAAC4Q,IAAI;EAAA,EAAC;EAC5D,IAAIC,UAAU,GAAGR,cAAc,CAAC/L,IAAI,CAAEqM,WAAC;IAAA,OAAKA,CAAC,CAAC3Q,KAAK,CAAC8Q,MAAM;EAAA,EAAC;EAC3D,IAAIJ,aAAa,EAAE;IACjB;IACA;IACAD,WAAW,GAAG,KAAK;EACpB,OAAM,IAAI,CAACI,UAAU,EAAE;IACtB;IACAJ,WAAW,GAAG,IAAI;EACnB,OAAM,IAAIf,MAAM,CAACG,mBAAmB,EAAE;IACrC;IACA;IACA;IACA,IAAIpO,UAAU,GAAG2H,IAAI,CAACgH,aAAa,GAAGhH,IAAI,CAACgH,aAAa,CAAC3O,UAAU,GAAG,IAAI;IAC1E,IAAIsP,MAAM,GAAG3H,IAAI,CAACgH,aAAa,GAAGhH,IAAI,CAACgH,aAAa,CAACW,MAAM,GAAG,IAAI;IAClEN,WAAW,GAAGJ,cAAc,CAACzL,KAAK,CAC/B+L,WAAC;MAAA,OACAA,CAAC,CAAC3Q,KAAK,CAAC8Q,MAAM,IACdH,CAAC,CAAC3Q,KAAK,CAAC8Q,MAAM,CAACE,OAAO,KAAK,IAAI,KAC7BvP,UAAU,IAAIA,UAAU,CAACkP,CAAC,CAAC3Q,KAAK,CAACO,EAAE,CAAC,KAAKjH,SAAS,IACjDyX,MAAM,IAAIA,MAAM,CAACJ,CAAC,CAAC3Q,KAAK,CAACO,EAAE,CAAC,KAAKjH,SAAU,CAAC;IAAA,EAClD;EACF,OAAM;IACL;IACA;IACAmX,WAAW,GAAGrH,IAAI,CAACgH,aAAa,IAAI,IAAI;EACzC;EAED,IAAIa,MAAc;EAClB,IAAI5X,KAAK,GAAgB;IACvB6X,aAAa,EAAE9H,IAAI,CAACxO,OAAO,CAACnB,MAAM;IAClCU,QAAQ,EAAEiP,IAAI,CAACxO,OAAO,CAACT,QAAQ;IAC/BgH,OAAO,EAAEkP,cAAc;IACvBI,WAAW,EAAXA,WAAW;IACXU,UAAU,EAAEhD,eAAe;IAC3B;IACAiD,qBAAqB,EAAEhI,IAAI,CAACgH,aAAa,IAAI,IAAI,GAAG,KAAK,GAAG,IAAI;IAChEiB,kBAAkB,EAAE,KAAK;IACzBC,YAAY,EAAE,MAAM;IACpB7P,UAAU,EAAG2H,IAAI,CAACgH,aAAa,IAAIhH,IAAI,CAACgH,aAAa,CAAC3O,UAAU,IAAK,EAAE;IACvE8P,UAAU,EAAGnI,IAAI,CAACgH,aAAa,IAAIhH,IAAI,CAACgH,aAAa,CAACmB,UAAU,IAAK,IAAI;IACzER,MAAM,EAAG3H,IAAI,CAACgH,aAAa,IAAIhH,IAAI,CAACgH,aAAa,CAACW,MAAM,IAAKT,aAAa;IAC1EkB,QAAQ,EAAE,IAAIC,GAAG,EAAE;IACnBC,QAAQ,EAAE,IAAID,GAAG;GAClB;EAED;EACA;EACA,IAAIE,aAAa,GAAkBC,MAAa,CAAClY,GAAG;EAEpD;EACA;EACA,IAAImY,yBAAyB,GAAG,KAAK;EAErC;EACA,IAAIC,2BAAmD;EAEvD;EACA,IAAIC,4BAA4B,GAAG,KAAK;EAExC;EACA,IAAIC,sBAAsB,GAA6B,IAAIP,GAAG,EAG3D;EAEH;EACA,IAAIQ,2BAA2B,GAAwB,IAAI;EAE3D;EACA;EACA,IAAIC,2BAA2B,GAAG,KAAK;EAEvC;EACA;EACA;EACA;EACA,IAAIC,sBAAsB,GAAG,KAAK;EAElC;EACA;EACA,IAAIC,uBAAuB,GAAa,EAAE;EAE1C;EACA;EACA,IAAIC,qBAAqB,GAAa,EAAE;EAExC;EACA,IAAIC,gBAAgB,GAAG,IAAIb,GAAG,EAA2B;EAEzD;EACA,IAAIc,kBAAkB,GAAG,CAAC;EAE1B;EACA;EACA;EACA,IAAIC,uBAAuB,GAAG,CAAC,CAAC;EAEhC;EACA,IAAIC,cAAc,GAAG,IAAIhB,GAAG,EAAkB;EAE9C;EACA,IAAIiB,gBAAgB,GAAG,IAAI5S,GAAG,EAAU;EAExC;EACA,IAAI6S,gBAAgB,GAAG,IAAIlB,GAAG,EAA0B;EAExD;EACA,IAAImB,cAAc,GAAG,IAAInB,GAAG,EAAkB;EAE9C;EACA;EACA,IAAIoB,eAAe,GAAG,IAAI/S,GAAG,EAAU;EAEvC;EACA;EACA;EACA;EACA,IAAIgT,eAAe,GAAG,IAAIrB,GAAG,EAAwB;EAErD;EACA;EACA,IAAIsB,gBAAgB,GAAG,IAAItB,GAAG,EAA2B;EAEzD;EACA;EACA,IAAIuB,uBAAuB,GAAG,KAAK;EAEnC;EACA;EACA;EACA,SAASC,UAAUA;IACjB;IACA;IACAlD,eAAe,GAAG3G,IAAI,CAACxO,OAAO,CAACiB,MAAM,CACnC0C,gBAA+C;MAAA,IAApC2S,aAAa,GAAmB3S,KAAxC9E,MAAM;QAAiBU,QAAQ,GAASoE,KAAjBpE,QAAQ;QAAEqB,QAAO+C,KAAP/C;MAClC;MACA;MACA,IAAIwX,uBAAuB,EAAE;QAC3BA,uBAAuB,GAAG,KAAK;QAC/B;MACD;MAED1Y,OAAO,CACLyY,gBAAgB,CAACjG,IAAI,KAAK,CAAC,IAAItR,KAAK,IAAI,IAAI,EAC5C,oEAAoE,GAClE,wEAAwE,GACxE,uEAAuE,GACvE,yEAAyE,GACzE,iEAAiE,GACjE,yDAAyD,CAC5D;MAED,IAAI0X,UAAU,GAAGC,qBAAqB,CAAC;QACrCC,eAAe,EAAE/Z,KAAK,CAACc,QAAQ;QAC/BmB,YAAY,EAAEnB,QAAQ;QACtB+W;MACD,EAAC;MAEF,IAAIgC,UAAU,IAAI1X,KAAK,IAAI,IAAI,EAAE;QAC/B;QACAwX,uBAAuB,GAAG,IAAI;QAC9B5J,IAAI,CAACxO,OAAO,CAACe,EAAE,CAACH,KAAK,GAAG,CAAC,CAAC,CAAC;QAE3B;QACA6X,aAAa,CAACH,UAAU,EAAE;UACxB7Z,KAAK,EAAE,SAAS;UAChBc,QAAQ,EAARA,QAAQ;UACRwU,OAAOA;YACL0E,aAAa,CAACH,UAAW,EAAE;cACzB7Z,KAAK,EAAE,YAAY;cACnBsV,OAAO,EAAErV,SAAS;cAClBsV,KAAK,EAAEtV,SAAS;cAChBa;YACD,EAAC;YACF;YACAiP,IAAI,CAACxO,OAAO,CAACe,EAAE,CAACH,KAAK,CAAC;WACvB;UACDoT,KAAKA;YACH,IAAI8C,QAAQ,GAAG,IAAID,GAAG,CAACpY,KAAK,CAACqY,QAAQ,CAAC;YACtCA,QAAQ,CAAChI,GAAG,CAACwJ,UAAW,EAAExE,YAAY,CAAC;YACvC4E,WAAW,CAAC;cAAE5B;YAAQ,CAAE,CAAC;UAC3B;QACD,EAAC;QACF;MACD;MAED,OAAO6B,eAAe,CAACrC,aAAa,EAAE/W,QAAQ,CAAC;IACjD,CAAC,CACF;IAED,IAAIiV,SAAS,EAAE;MACb;MACA;MACAoE,yBAAyB,CAACrE,YAAY,EAAE6C,sBAAsB,CAAC;MAC/D,IAAIyB,uBAAuB,GAAGA,SAA1BA,uBAAuBA;QAAA,OACzBC,yBAAyB,CAACvE,YAAY,EAAE6C,sBAAsB,CAAC;MAAA;MACjE7C,YAAY,CAACzP,gBAAgB,CAAC,UAAU,EAAE+T,uBAAuB,CAAC;MAClExB,2BAA2B,GAAGA;QAAAA,OAC5B9C,YAAY,CAACxP,mBAAmB,CAAC,UAAU,EAAE8T,uBAAuB,CAAC;MAAA;IACxE;IAED;IACA;IACA;IACA;IACA;IACA,IAAI,CAACpa,KAAK,CAACoX,WAAW,EAAE;MACtB8C,eAAe,CAAC3B,MAAa,CAAClY,GAAG,EAAEL,KAAK,CAACc,QAAQ,EAAE;QACjDwZ,gBAAgB,EAAE;MACnB,EAAC;IACH;IAED,OAAO1C,MAAM;EACf;EAEA;EACA,SAAS2C,OAAOA;IACd,IAAI7D,eAAe,EAAE;MACnBA,eAAe,EAAE;IAClB;IACD,IAAIkC,2BAA2B,EAAE;MAC/BA,2BAA2B,EAAE;IAC9B;IACD/F,WAAW,CAAC2H,KAAK,EAAE;IACnB/B,2BAA2B,IAAIA,2BAA2B,CAACvF,KAAK,EAAE;IAClElT,KAAK,CAACmY,QAAQ,CAAChP,OAAO,CAAC,UAACoE,CAAC,EAAE1M,GAAG;MAAA,OAAK4Z,aAAa,CAAC5Z,GAAG,CAAC;IAAA,EAAC;IACtDb,KAAK,CAACqY,QAAQ,CAAClP,OAAO,CAAC,UAACoE,CAAC,EAAE1M,GAAG;MAAA,OAAK6Z,aAAa,CAAC7Z,GAAG,CAAC;IAAA,EAAC;EACxD;EAEA;EACA,SAASkS,SAASA,CAACtQ,EAAoB;IACrCoQ,WAAW,CAACd,GAAG,CAACtP,EAAE,CAAC;IACnB,OAAO;MAAA,OAAMoQ,WAAW,CAACJ,MAAM,CAAChQ,EAAE,CAAC;IAAA;EACrC;EAEA;EACA,SAASwX,WAAWA,CAClBU,QAA8B,EAC9BC,MAGM;IAAA,IAHNA;MAAAA,OAGI,EAAE;IAAA;IAEN5a,KAAK,gBACAA,KAAK,EACL2a,QAAQ,CACZ;IAED;IACA;IACA,IAAIE,iBAAiB,GAAa,EAAE;IACpC,IAAIC,mBAAmB,GAAa,EAAE;IAEtC,IAAIzE,MAAM,CAACC,iBAAiB,EAAE;MAC5BtW,KAAK,CAACmY,QAAQ,CAAChP,OAAO,CAAC,UAAC4R,OAAO,EAAEla,GAAG,EAAI;QACtC,IAAIka,OAAO,CAAC/a,KAAK,KAAK,MAAM,EAAE;UAC5B,IAAIwZ,eAAe,CAACpJ,GAAG,CAACvP,GAAG,CAAC,EAAE;YAC5B;YACAia,mBAAmB,CAAC/Y,IAAI,CAAClB,GAAG,CAAC;UAC9B,OAAM;YACL;YACA;YACAga,iBAAiB,CAAC9Y,IAAI,CAAClB,GAAG,CAAC;UAC5B;QACF;MACH,CAAC,CAAC;IACH;IAED;IACA;IACA;IACAma,mBAAInI,WAAW,EAAE1J,OAAO,CAAE2J,oBAAU;MAAA,OAClCA,UAAU,CAAC9S,KAAK,EAAE;QAChBwZ,eAAe,EAAEsB,mBAAmB;QACpCG,2BAA2B,EAAEL,IAAI,CAACM,kBAAkB;QACpDC,kBAAkB,EAAEP,IAAI,CAACQ,SAAS,KAAK;MACxC,EAAC;IAAA,EACH;IAED;IACA,IAAI/E,MAAM,CAACC,iBAAiB,EAAE;MAC5BuE,iBAAiB,CAAC1R,OAAO,CAAEtI,aAAG;QAAA,OAAKb,KAAK,CAACmY,QAAQ,CAAC1F,MAAM,CAAC5R,GAAG,CAAC;MAAA,EAAC;MAC9Dia,mBAAmB,CAAC3R,OAAO,CAAEtI,aAAG;QAAA,OAAK4Z,aAAa,CAAC5Z,GAAG,CAAC;MAAA,EAAC;IACzD;EACH;EAEA;EACA;EACA;EACA;EACA;EACA,SAASwa,kBAAkBA,CACzBva,QAAkB,EAClB6Z,QAA0E,SAC/B;IAAA;IAAA,YAAhCW,mBAA8B,EAAE;MAAzCF;IAEF;IACA;IACA;IACA;IACA;IACA,IAAIG,cAAc,GAChBvb,KAAK,CAACkY,UAAU,IAAI,IAAI,IACxBlY,KAAK,CAAC8X,UAAU,CAAC/C,UAAU,IAAI,IAAI,IACnCyG,gBAAgB,CAACxb,KAAK,CAAC8X,UAAU,CAAC/C,UAAU,CAAC,IAC7C/U,KAAK,CAAC8X,UAAU,CAAC9X,KAAK,KAAK,SAAS,IACpC,4BAAQ,CAACA,KAAK,qBAAdyb,gBAAgBC,WAAW,MAAK,IAAI;IAEtC,IAAIxD,UAA4B;IAChC,IAAIyC,QAAQ,CAACzC,UAAU,EAAE;MACvB,IAAIpM,MAAM,CAAC6P,IAAI,CAAChB,QAAQ,CAACzC,UAAU,CAAC,CAAC/X,MAAM,GAAG,CAAC,EAAE;QAC/C+X,UAAU,GAAGyC,QAAQ,CAACzC,UAAU;MACjC,OAAM;QACL;QACAA,UAAU,GAAG,IAAI;MAClB;KACF,MAAM,IAAIqD,cAAc,EAAE;MACzB;MACArD,UAAU,GAAGlY,KAAK,CAACkY,UAAU;IAC9B,OAAM;MACL;MACAA,UAAU,GAAG,IAAI;IAClB;IAED;IACA,IAAI9P,UAAU,GAAGuS,QAAQ,CAACvS,UAAU,GAChCwT,eAAe,CACb5b,KAAK,CAACoI,UAAU,EAChBuS,QAAQ,CAACvS,UAAU,EACnBuS,QAAQ,CAAC7S,OAAO,IAAI,EAAE,EACtB6S,QAAQ,CAACjD,MAAM,CAChB,GACD1X,KAAK,CAACoI,UAAU;IAEpB;IACA;IACA,IAAIiQ,QAAQ,GAAGrY,KAAK,CAACqY,QAAQ;IAC7B,IAAIA,QAAQ,CAAC5E,IAAI,GAAG,CAAC,EAAE;MACrB4E,QAAQ,GAAG,IAAID,GAAG,CAACC,QAAQ,CAAC;MAC5BA,QAAQ,CAAClP,OAAO,CAAC,UAACoE,CAAC,EAAE6F,CAAC;QAAA,OAAKiF,QAAQ,CAAChI,GAAG,CAAC+C,CAAC,EAAEiC,YAAY,CAAC;MAAA,EAAC;IAC1D;IAED;IACA;IACA,IAAI2C,kBAAkB,GACpBQ,yBAAyB,KAAK,IAAI,IACjCxY,KAAK,CAAC8X,UAAU,CAAC/C,UAAU,IAAI,IAAI,IAClCyG,gBAAgB,CAACxb,KAAK,CAAC8X,UAAU,CAAC/C,UAAU,CAAC,IAC7C,6BAAQ,CAAC/U,KAAK,KAAd6b,iCAAgBH,WAAW,MAAK,IAAK;IAEzC,IAAItF,kBAAkB,EAAE;MACtBD,UAAU,GAAGC,kBAAkB;MAC/BA,kBAAkB,GAAGnW,SAAS;IAC/B;IAED,IAAI4Y,2BAA2B,EAAE,CAEhC,KAAM,IAAIP,aAAa,KAAKC,MAAa,CAAClY,GAAG,EAAE,CAE/C,KAAM,IAAIiY,aAAa,KAAKC,MAAa,CAACvW,IAAI,EAAE;MAC/C+N,IAAI,CAACxO,OAAO,CAACQ,IAAI,CAACjB,QAAQ,EAAEA,QAAQ,CAACd,KAAK,CAAC;IAC5C,OAAM,IAAIsY,aAAa,KAAKC,MAAa,CAAClW,OAAO,EAAE;MAClD0N,IAAI,CAACxO,OAAO,CAACa,OAAO,CAACtB,QAAQ,EAAEA,QAAQ,CAACd,KAAK,CAAC;IAC/C;IAED,IAAIkb,kBAAkD;IAEtD;IACA,IAAI5C,aAAa,KAAKC,MAAa,CAAClY,GAAG,EAAE;MACvC;MACA,IAAIyb,UAAU,GAAGnD,sBAAsB,CAACpG,GAAG,CAACvS,KAAK,CAACc,QAAQ,CAACE,QAAQ,CAAC;MACpE,IAAI8a,UAAU,IAAIA,UAAU,CAAC1L,GAAG,CAACtP,QAAQ,CAACE,QAAQ,CAAC,EAAE;QACnDka,kBAAkB,GAAG;UACnBnB,eAAe,EAAE/Z,KAAK,CAACc,QAAQ;UAC/BmB,YAAY,EAAEnB;SACf;OACF,MAAM,IAAI6X,sBAAsB,CAACvI,GAAG,CAACtP,QAAQ,CAACE,QAAQ,CAAC,EAAE;QACxD;QACA;QACAka,kBAAkB,GAAG;UACnBnB,eAAe,EAAEjZ,QAAQ;UACzBmB,YAAY,EAAEjC,KAAK,CAACc;SACrB;MACF;KACF,MAAM,IAAI4X,4BAA4B,EAAE;MACvC;MACA,IAAIqD,OAAO,GAAGpD,sBAAsB,CAACpG,GAAG,CAACvS,KAAK,CAACc,QAAQ,CAACE,QAAQ,CAAC;MACjE,IAAI+a,OAAO,EAAE;QACXA,OAAO,CAAChK,GAAG,CAACjR,QAAQ,CAACE,QAAQ,CAAC;MAC/B,OAAM;QACL+a,OAAO,GAAG,IAAItV,GAAG,CAAS,CAAC3F,QAAQ,CAACE,QAAQ,CAAC,CAAC;QAC9C2X,sBAAsB,CAACtI,GAAG,CAACrQ,KAAK,CAACc,QAAQ,CAACE,QAAQ,EAAE+a,OAAO,CAAC;MAC7D;MACDb,kBAAkB,GAAG;QACnBnB,eAAe,EAAE/Z,KAAK,CAACc,QAAQ;QAC/BmB,YAAY,EAAEnB;OACf;IACF;IAEDmZ,WAAW,cAEJU,QAAQ;MACXzC,UAAU,EAAVA,UAAU;MACV9P,UAAU,EAAVA,UAAU;MACVyP,aAAa,EAAES,aAAa;MAC5BxX,QAAQ,EAARA,QAAQ;MACRsW,WAAW,EAAE,IAAI;MACjBU,UAAU,EAAEhD,eAAe;MAC3BmD,YAAY,EAAE,MAAM;MACpBF,qBAAqB,EAAEiE,sBAAsB,CAC3Clb,QAAQ,EACR6Z,QAAQ,CAAC7S,OAAO,IAAI9H,KAAK,CAAC8H,OAAO,CAClC;MACDkQ,kBAAkB,EAAlBA,kBAAkB;MAClBK;KAEF;MACE6C,kBAAkB,EAAlBA,kBAAkB;MAClBE,SAAS,EAAEA,SAAS,KAAK;IAC1B,EACF;IAED;IACA9C,aAAa,GAAGC,MAAa,CAAClY,GAAG;IACjCmY,yBAAyB,GAAG,KAAK;IACjCE,4BAA4B,GAAG,KAAK;IACpCG,2BAA2B,GAAG,KAAK;IACnCC,sBAAsB,GAAG,KAAK;IAC9BC,uBAAuB,GAAG,EAAE;IAC5BC,qBAAqB,GAAG,EAAE;EAC5B;EAEA;EACA;EAAA,SACeiD,QAAQA;IAAAA;EAAAA,EA4GvB;EACA;EACA;EAAA;IAAAC,qEA9GA,kBACEtb,EAAsB,EACtBga,IAA4B;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,MAExB,OAAOha,EAAE,KAAK,QAAQ;gBAAAub;gBAAA;cAAA;cACxBpM,IAAI,CAACxO,OAAO,CAACe,EAAE,CAAC1B,EAAE,CAAC;cAAA;YAAA;cAIjBwb,cAAc,GAAGC,WAAW,CAC9Brc,KAAK,CAACc,QAAQ,EACdd,KAAK,CAAC8H,OAAO,EACbL,QAAQ,EACR4O,MAAM,CAACI,kBAAkB,EACzB7V,EAAE,EACFyV,MAAM,CAACvH,oBAAoB,EAC3B8L,IAAI,IAAJA,oBAAI,CAAE0B,WAAW,EACjB1B,IAAI,oBAAJA,IAAI,CAAE2B,QAAQ,CACf;cAAAC,yBACiCC,wBAAwB,CACxDpG,MAAM,CAACE,sBAAsB,EAC7B,KAAK,EACL6F,cAAc,EACdxB,IAAI,CACL,EALKjZ,IAAI,0BAAJA,IAAI,EAAE+a,UAAU,0BAAVA,UAAU,EAAE1W;cAOpB+T,eAAe,GAAG/Z,KAAK,CAACc,QAAQ;cAChCmB,YAAY,GAAGlB,cAAc,CAACf,KAAK,CAACc,QAAQ,EAAEa,IAAI,EAAEiZ,IAAI,IAAIA,IAAI,CAAC5a,KAAK,CAAC,EAE3E;cACA;cACA;cACA;cACA;cACAiC,YAAY,YACPA,gBAAY,EACZ8N,IAAI,CAACxO,OAAO,CAACG,cAAc,CAACO,YAAY,CAAC,CAC7C;cAEG0a,WAAW,GAAG/B,IAAI,IAAIA,IAAI,CAACxY,OAAO,IAAI,IAAI,GAAGwY,IAAI,CAACxY,OAAO,GAAGnC,SAAS;cAErE4X,aAAa,GAAGU,MAAa,CAACvW,IAAI;cAEtC,IAAI2a,WAAW,KAAK,IAAI,EAAE;gBACxB9E,aAAa,GAAGU,MAAa,CAAClW,OAAO;cACtC,OAAM,IAAIsa,WAAW,KAAK,KAAK,EAAE,CAEjC,KAAM,IACLD,UAAU,IAAI,IAAI,IAClBlB,gBAAgB,CAACkB,UAAU,CAAC3H,UAAU,CAAC,IACvC2H,UAAU,CAAC1H,UAAU,KAAKhV,KAAK,CAACc,QAAQ,CAACE,QAAQ,GAAGhB,KAAK,CAACc,QAAQ,CAACe,MAAM,EACzE;gBACA;gBACA;gBACA;gBACA;gBACAgW,aAAa,GAAGU,MAAa,CAAClW,OAAO;cACtC;cAEG2V,kBAAkB,GACpB4C,IAAI,IAAI,oBAAoB,IAAIA,IAAI,GAChCA,IAAI,CAAC5C,kBAAkB,KAAK,IAAI,GAChC/X,SAAS;cAEXmb,SAAS,GAAG,CAACR,IAAI,IAAIA,IAAI,CAACO,kBAAkB,MAAM,IAAI;cAEtDtB,UAAU,GAAGC,qBAAqB,CAAC;gBACrCC,eAAe,EAAfA,eAAe;gBACf9X,YAAY,EAAZA,YAAY;gBACZ4V;cACD,EAAC;cAAA,KAEEgC,UAAU;gBAAAsC;gBAAA;cAAA;cACZ;cACAnC,aAAa,CAACH,UAAU,EAAE;gBACxB7Z,KAAK,EAAE,SAAS;gBAChBc,QAAQ,EAAEmB,YAAY;gBACtBqT,OAAOA;kBACL0E,aAAa,CAACH,UAAW,EAAE;oBACzB7Z,KAAK,EAAE,YAAY;oBACnBsV,OAAO,EAAErV,SAAS;oBAClBsV,KAAK,EAAEtV,SAAS;oBAChBa,QAAQ,EAAEmB;kBACX,EAAC;kBACF;kBACAga,QAAQ,CAACrb,EAAE,EAAEga,IAAI,CAAC;iBACnB;gBACDrF,KAAKA;kBACH,IAAI8C,QAAQ,GAAG,IAAID,GAAG,CAACpY,KAAK,CAACqY,QAAQ,CAAC;kBACtCA,QAAQ,CAAChI,GAAG,CAACwJ,UAAW,EAAExE,YAAY,CAAC;kBACvC4E,WAAW,CAAC;oBAAE5B;kBAAQ,CAAE,CAAC;gBAC3B;cACD,EAAC;cAAA;YAAA;cAAA8D;cAAA,OAISjC,eAAe,CAACrC,aAAa,EAAE5V,YAAY,EAAE;gBACxDya,UAAU,EAAVA,UAAU;gBACV;gBACA;gBACAE,YAAY,EAAE5W,KAAK;gBACnBgS,kBAAkB,EAAlBA,kBAAkB;gBAClB5V,OAAO,EAAEwY,IAAI,IAAIA,IAAI,CAACxY,OAAO;gBAC7Bya,oBAAoB,EAAEjC,IAAI,IAAIA,IAAI,CAACkC,uBAAuB;gBAC1D1B;cACD,EAAC;YAAA;cAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACJ;IAAA;EAAA;EAKA,SAAS2B,UAAUA;IACjBC,oBAAoB,EAAE;IACtB/C,WAAW,CAAC;MAAEhC,YAAY,EAAE;IAAS,CAAE,CAAC;IAExC;IACA;IACA,IAAIjY,KAAK,CAAC8X,UAAU,CAAC9X,KAAK,KAAK,YAAY,EAAE;MAC3C;IACD;IAED;IACA;IACA;IACA,IAAIA,KAAK,CAAC8X,UAAU,CAAC9X,KAAK,KAAK,MAAM,EAAE;MACrCka,eAAe,CAACla,KAAK,CAAC6X,aAAa,EAAE7X,KAAK,CAACc,QAAQ,EAAE;QACnDmc,8BAA8B,EAAE;MACjC,EAAC;MACF;IACD;IAED;IACA;IACA;IACA/C,eAAe,CACb5B,aAAa,IAAItY,KAAK,CAAC6X,aAAa,EACpC7X,KAAK,CAAC8X,UAAU,CAAChX,QAAQ,EACzB;MAAEoc,kBAAkB,EAAEld,KAAK,CAAC8X;IAAY,EACzC;EACH;EAEA;EACA;EACA;EAAA,SACeoC,eAAeA;IAAAA;EAAAA,EAwJ9B;EACA;EAAA;IAAAiD,4EAzJA,kBACEtF,aAA4B,EAC5B/W,QAAkB,EAClB8Z,IAWC;MAAA;MAAA;QAAA;UAAA;YAAA;cAED;cACA;cACA;cACAnC,2BAA2B,IAAIA,2BAA2B,CAACvF,KAAK,EAAE;cAClEuF,2BAA2B,GAAG,IAAI;cAClCH,aAAa,GAAGT,aAAa;cAC7BgB,2BAA2B,GACzB,CAAC+B,IAAI,IAAIA,IAAI,CAACqC,8BAA8B,MAAM,IAAI;cAExD;cACA;cACAG,kBAAkB,CAACpd,KAAK,CAACc,QAAQ,EAAEd,KAAK,CAAC8H,OAAO,CAAC;cACjD0Q,yBAAyB,GAAG,CAACoC,IAAI,IAAIA,IAAI,CAAC5C,kBAAkB,MAAM,IAAI;cAEtEU,4BAA4B,GAAG,CAACkC,IAAI,IAAIA,IAAI,CAACiC,oBAAoB,MAAM,IAAI;cAEvEQ,WAAW,GAAGjH,kBAAkB,IAAID,UAAU;cAC9CmH,iBAAiB,GAAG1C,IAAI,IAAIA,IAAI,CAACsC,kBAAkB;cACnDpV,OAAO,GAAGP,WAAW,CAAC8V,WAAW,EAAEvc,QAAQ,EAAE2G,QAAQ,CAAC;cACtD2T,SAAS,GAAG,CAACR,IAAI,IAAIA,IAAI,CAACQ,SAAS,MAAM,IAAI,EAEjD;cAAA,IACKtT,OAAO;gBAAAyV;gBAAA;cAAA;cACNvX,MAAK,GAAGkR,sBAAsB,CAAC,GAAG,EAAE;gBAAElW,QAAQ,EAAEF,QAAQ,CAACE;cAAQ,CAAE,CAAC;cAAAwc,yBAEtErG,sBAAsB,CAACkG,WAAW,CAAC,EADtBI,eAAe,0BAAxB3V,OAAO,EAAmBnB,uCAEhC;cACA+W,qBAAqB,EAAE;cACvBrC,kBAAkB,CAChBva,QAAQ,EACR;gBACEgH,OAAO,EAAE2V,eAAe;gBACxBrV,UAAU,EAAE,EAAE;gBACdsP,MAAM,sBACH/Q,MAAK,CAACO,EAAE,EAAGlB;cAEf,GACD;gBAAEoV;cAAW,EACd;cAAA;YAAA;cAAA,MAWDpb,KAAK,CAACoX,WAAW,IACjB,CAAC0B,sBAAsB,IACvB6E,gBAAgB,CAAC3d,KAAK,CAACc,QAAQ,EAAEA,QAAQ,CAAC,IAC1C,EAAE8Z,IAAI,IAAIA,IAAI,CAAC8B,UAAU,IAAIlB,gBAAgB,CAACZ,IAAI,CAAC8B,UAAU,CAAC3H,UAAU,CAAC,CAAC;gBAAAwI;gBAAA;cAAA;cAE1ElC,kBAAkB,CAACva,QAAQ,EAAE;gBAAEgH;cAAS,GAAE;gBAAEsT;cAAW,EAAC;cAAA;YAAA;cAI1D;cACA3C,2BAA2B,GAAG,IAAItH,eAAe,EAAE;cAC/CyM,OAAO,GAAGC,uBAAuB,CACnC9N,IAAI,CAACxO,OAAO,EACZT,QAAQ,EACR2X,2BAA2B,CAAClH,MAAM,EAClCqJ,IAAI,IAAIA,IAAI,CAAC8B,UAAU,CACxB;cAAA,MAIG9B,IAAI,IAAIA,IAAI,CAACgC,YAAY;gBAAAW;gBAAA;cAAA;cAC3B;cACA;cACA;cACA;cACAX,YAAY,uBACTkB,mBAAmB,CAAChW,OAAO,CAAC,CAACnB,KAAK,CAACO,EAAE,EAAG0T,IAAI,CAACgC,aAC/C;cAAAW;cAAA;YAAA;cAAA,MAED3C,IAAI,IACJA,IAAI,CAAC8B,UAAU,IACflB,gBAAgB,CAACZ,IAAI,CAAC8B,UAAU,CAAC3H,UAAU,CAAC;gBAAAwI;gBAAA;cAAA;cAAAA;cAAA,OAGnBQ,YAAY,CACnCH,OAAO,EACP9c,QAAQ,EACR8Z,IAAI,CAAC8B,UAAU,EACf5U,OAAO,EACP;gBAAE1F,OAAO,EAAEwY,IAAI,CAACxY,OAAO;gBAAEgZ;cAAW,EACrC;YAAA;cANG4C,YAAY;cAAA,KAQZA,YAAY,CAACC,cAAc;gBAAAV;gBAAA;cAAA;cAAA;YAAA;cAI/BW,iBAAiB,GAAGF,YAAY,CAACE,iBAAiB;cAClDtB,YAAY,GAAGoB,YAAY,CAACG,kBAAkB;cAC9Cb,iBAAiB,GAAGc,oBAAoB,CAACtd,QAAQ,EAAE8Z,IAAI,CAAC8B,UAAU,CAAC;cACnEtB,SAAS,GAAG,KAAK;cAEjB;cACAwC,OAAO,GAAG,IAAIS,OAAO,CAACT,OAAO,CAAC9Z,GAAG,EAAE;gBAAEyN,MAAM,EAAEqM,OAAO,CAACrM;cAAM,CAAE,CAAC;YAAA;cAAAgM;cAAA,OAIbe,aAAa,CAC9DV,OAAO,EACP9c,QAAQ,EACRgH,OAAO,EACPwV,iBAAiB,EACjB1C,IAAI,IAAIA,IAAI,CAAC8B,UAAU,EACvB9B,IAAI,IAAIA,IAAI,CAAC2D,iBAAiB,EAC9B3D,IAAI,IAAIA,IAAI,CAACxY,OAAO,EACpBwY,IAAI,IAAIA,IAAI,CAACN,gBAAgB,KAAK,IAAI,EACtCc,SAAS,EACT8C,iBAAiB,EACjBtB,YAAY,CACb;YAAA;cAAA4B;cAZKP,cAAc,wBAAdA,cAAc;cAAE7V,UAAU,wBAAVA,UAAU;cAAEsP;cAAAA,KAc9BuG,cAAc;gBAAAV;gBAAA;cAAA;cAAA;YAAA;cAIlB;cACA;cACA;cACA9E,2BAA2B,GAAG,IAAI;cAElC4C,kBAAkB,CAACva,QAAQ;gBACzBgH;cAAO,GACHoW,iBAAiB,GAAG;gBAAEhG,UAAU,EAAEgG;eAAmB,GAAG,EAAE;gBAC9D9V,UAAU,EAAVA,UAAU;gBACVsP;cAAM,EACP,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACJ;IAAA;EAAA;EAAA,SAIeqG,YAAYA;IAAAA;EAAAA,EAuF3B;EACA;EAAA;IAAAU,yEAxFA,kBACEb,OAAgB,EAChB9c,QAAkB,EAClB4b,UAAsB,EACtB5U,OAAiC,EACjC8S;MAAA;MAAA;QAAA;UAAA;YAAA;cAAqD,IAArDA;gBAAAA,OAAmD,EAAE;cAAA;cAErDoC,oBAAoB,EAAE;cAEtB;cACIlF,UAAU,GAAG4G,uBAAuB,CAAC5d,QAAQ,EAAE4b,UAAU,CAAC;cAC9DzC,WAAW,CAAC;gBAAEnC;cAAU,CAAE,EAAE;gBAAEsD,SAAS,EAAER,IAAI,CAACQ,SAAS,KAAK;cAAI,CAAE,CAAC;cAEnE;cAEIuD,WAAW,GAAGC,cAAc,CAAC9W,OAAO,EAAEhH,QAAQ,CAAC;cAAA,MAE/C,CAAC6d,WAAW,CAAChY,KAAK,CAACvG,MAAM,IAAI,CAACue,WAAW,CAAChY,KAAK,CAAC4Q,IAAI;gBAAAsH;gBAAA;cAAA;cACtD3U,MAAM,GAAG;gBACP4U,IAAI,EAAEvY,UAAU,CAACP,KAAK;gBACtBA,KAAK,EAAEkR,sBAAsB,CAAC,GAAG,EAAE;kBACjC6H,MAAM,EAAEnB,OAAO,CAACmB,MAAM;kBACtB/d,QAAQ,EAAEF,QAAQ,CAACE,QAAQ;kBAC3Bge,OAAO,EAAEL,WAAW,CAAChY,KAAK,CAACO;iBAC5B;eACF;cAAA2X;cAAA;YAAA;cAAAA;cAAA,OAEcI,kBAAkB,CAC/B,QAAQ,EACRrB,OAAO,EACPe,WAAW,EACX7W,OAAO,EACPd,QAAQ,EACRF,kBAAkB,EAClBW,QAAQ,EACR4O,MAAM,CAACvH,oBAAoB,CAC5B;YAAA;cATD5E,MAAM;cAAA,KAWF0T,OAAO,CAACrM,MAAM,CAACiB,OAAO;gBAAAqM;gBAAA;cAAA;cAAA,kCACjB;gBAAEZ,cAAc,EAAE;eAAM;YAAA;cAAA,KAI/BiB,gBAAgB,CAAChV,MAAM,CAAC;gBAAA2U;gBAAA;cAAA;cAE1B,IAAIjE,IAAI,IAAIA,IAAI,CAACxY,OAAO,IAAI,IAAI,EAAE;gBAChCA,OAAO,GAAGwY,IAAI,CAACxY,OAAO;cACvB,OAAM;gBACL;gBACA;gBACA;gBACAA,OAAO,GACL8H,MAAM,CAACpJ,QAAQ,KAAKd,KAAK,CAACc,QAAQ,CAACE,QAAQ,GAAGhB,KAAK,CAACc,QAAQ,CAACe,MAAM;cACtE;cAAAgd;cAAA,OACKM,uBAAuB,CAACnf,KAAK,EAAEkK,MAAM,EAAE;gBAAEwS,UAAU,EAAVA,UAAU;gBAAEta;cAAS,EAAC;YAAA;cAAA,kCAC9D;gBAAE6b,cAAc,EAAE;eAAM;YAAA;cAAA,KAG7BmB,aAAa,CAAClV,MAAM,CAAC;gBAAA2U;gBAAA;cAAA;cACvB;cACA;cACIQ,aAAa,GAAGvB,mBAAmB,CAAChW,OAAO,EAAE6W,WAAW,CAAChY,KAAK,CAACO,EAAE,CAAC,EAEtE;cACA;cACA;cACA;cACA,IAAI,CAAC0T,IAAI,IAAIA,IAAI,CAACxY,OAAO,MAAM,IAAI,EAAE;gBACnCkW,aAAa,GAAGC,MAAa,CAACvW,IAAI;cACnC;cAAA,kCAEM;gBACL;gBACAkc,iBAAiB,EAAE,EAAE;gBACrBC,kBAAkB,sBAAKkB,aAAa,CAAC1Y,KAAK,CAACO,EAAE,EAAGgD,MAAM,CAAClE;eACxD;YAAA;cAAA,KAGCsZ,gBAAgB,CAACpV,MAAM,CAAC;gBAAA2U;gBAAA;cAAA;cAAA,MACpB3H,sBAAsB,CAAC,GAAG,EAAE;gBAAE4H,IAAI,EAAE;cAAgB,EAAC;YAAA;cAAA,kCAGtD;gBACLZ,iBAAiB,sBAAKS,WAAW,CAAChY,KAAK,CAACO,EAAE,EAAGgD,MAAM,CAAC5B;eACrD;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACH;IAAA;EAAA;EAAA,SAIegW,aAAaA;IAAAA;EAAAA,EA+M5B;EAAA;IAAAiB,0EA/MA,kBACE3B,OAAgB,EAChB9c,QAAkB,EAClBgH,OAAiC,EACjCoV,kBAA+B,EAC/BR,UAAuB,EACvB6B,iBAA8B,EAC9Bnc,OAAiB,EACjBkY,gBAA0B,EAC1Bc,SAAmB,EACnB8C,iBAA6B,EAC7BtB,YAAwB;MAAA;MAAA;QAAA;UAAA;YAAA;cAExB;cACIU,iBAAiB,GACnBJ,kBAAkB,IAAIkB,oBAAoB,CAACtd,QAAQ,EAAE4b,UAAU,CAAC,EAElE;cACA;cACI8C,gBAAgB,GAClB9C,UAAU,IACV6B,iBAAiB,IACjBkB,2BAA2B,CAACnC,iBAAiB,CAAC;cAE5CD,WAAW,GAAGjH,kBAAkB,IAAID,UAAU;cAAAuJ,oBACNC,gBAAgB,CAC1D5P,IAAI,CAACxO,OAAO,EACZvB,KAAK,EACL8H,OAAO,EACP0X,gBAAgB,EAChB1e,QAAQ,EACRuV,MAAM,CAACG,mBAAmB,IAAI8D,gBAAgB,KAAK,IAAI,EACvDxB,sBAAsB,EACtBC,uBAAuB,EACvBC,qBAAqB,EACrBQ,eAAe,EACfF,gBAAgB,EAChBD,gBAAgB,EAChBgE,WAAW,EACX5V,QAAQ,EACRyW,iBAAiB,EACjBtB,YAAY,CACb,6DAjBIgD,aAAa,0BAAEC,oBAAoB,0BAmBxC;cACA;cACA;cACAnC,qBAAqB,CAClBsB,iBAAO;gBAAA,OACN,EAAElX,OAAO,IAAIA,OAAO,CAACmD,IAAI,CAAEqM,WAAC;kBAAA,OAAKA,CAAC,CAAC3Q,KAAK,CAACO,EAAE,KAAK8X,OAAO;gBAAA,EAAC,CAAC,IACxDY,aAAa,IAAIA,aAAa,CAAC3U,IAAI,CAAEqM,WAAC;kBAAA,OAAKA,CAAC,CAAC3Q,KAAK,CAACO,EAAE,KAAK8X,OAAO;gBAAA,EAAE;cAAA,EACvE;cAED7F,uBAAuB,GAAG,EAAED,kBAAkB;cAE9C;cAAA,MACI0G,aAAa,CAACzf,MAAM,KAAK,CAAC,IAAI0f,oBAAoB,CAAC1f,MAAM,KAAK,CAAC;gBAAA2f;gBAAA;cAAA;cAC7DC,gBAAe,GAAGC,sBAAsB,EAAE;cAC9C3E,kBAAkB,CAChBva,QAAQ;gBAENgH,OAAO,EAAPA,OAAO;gBACPM,UAAU,EAAE,EAAE;gBACd;gBACAsP,MAAM,EAAEkF,YAAY,IAAI;cAAI,GACxBsB,iBAAiB,GAAG;gBAAEhG,UAAU,EAAEgG;cAAmB,IAAG,EAAE,EAC1D6B,gBAAe,GAAG;gBAAE5H,QAAQ,EAAE,IAAIC,GAAG,CAACpY,KAAK,CAACmY,QAAQ;eAAG,GAAG,EAAE,CAElE;gBAAEiD;cAAW,EACd;cAAA,kCACM;gBAAE6C,cAAc,EAAE;eAAM;YAAA;cAGjC;cACA;cACA;cACA;cACA;cACA;cACA,IACE,CAACpF,2BAA2B,KAC3B,CAACxC,MAAM,CAACG,mBAAmB,IAAI,CAAC8D,gBAAgB,CAAC,EAClD;gBACAuF,oBAAoB,CAAC1W,OAAO,CAAE8W,YAAE,EAAI;kBAClC,IAAIlF,OAAO,GAAG/a,KAAK,CAACmY,QAAQ,CAAC5F,GAAG,CAAC0N,EAAE,CAACpf,GAAG,CAAC;kBACxC,IAAIqf,mBAAmB,GAAGC,iBAAiB,CACzClgB,SAAS,EACT8a,OAAO,GAAGA,OAAO,CAACzS,IAAI,GAAGrI,SAAS,CACnC;kBACDD,KAAK,CAACmY,QAAQ,CAAC9H,GAAG,CAAC4P,EAAE,CAACpf,GAAG,EAAEqf,mBAAmB,CAAC;gBACjD,CAAC,CAAC;gBACEhI,UAAU,GAAGgG,iBAAiB,IAAIle,KAAK,CAACkY,UAAU;gBACtD+B,WAAW;kBAEPnC,UAAU,EAAEwF;gBAAiB,GACzBpF,UAAU,GACVpM,MAAM,CAAC6P,IAAI,CAACzD,UAAU,CAAC,CAAC/X,MAAM,KAAK,CAAC,GAClC;kBAAE+X,UAAU,EAAE;gBAAM,IACpB;kBAAEA;iBAAY,GAChB,EAAE,EACF2H,oBAAoB,CAAC1f,MAAM,GAAG,CAAC,GAC/B;kBAAEgY,QAAQ,EAAE,IAAIC,GAAG,CAACpY,KAAK,CAACmY,QAAQ;iBAAG,GACrC,EAAE,CAER;kBACEiD;gBACD,EACF;cACF;cAEDyE,oBAAoB,CAAC1W,OAAO,CAAE8W,YAAE,EAAI;gBAClC,IAAIhH,gBAAgB,CAAC7I,GAAG,CAAC6P,EAAE,CAACpf,GAAG,CAAC,EAAE;kBAChCuf,YAAY,CAACH,EAAE,CAACpf,GAAG,CAAC;gBACrB;gBACD,IAAIof,EAAE,CAAC/O,UAAU,EAAE;kBACjB;kBACA;kBACA;kBACA+H,gBAAgB,CAAC5I,GAAG,CAAC4P,EAAE,CAACpf,GAAG,EAAEof,EAAE,CAAC/O,UAAU,CAAC;gBAC5C;cACH,CAAC,CAAC;cAEF;cACImP,8BAA8B,GAAGA,SAAjCA,8BAA8BA;gBAAA,OAChCR,oBAAoB,CAAC1W,OAAO,CAAEmX,WAAC;kBAAA,OAAKF,YAAY,CAACE,CAAC,CAACzf,GAAG,CAAC;gBAAA,EAAC;cAAA;cAC1D,IAAI4X,2BAA2B,EAAE;gBAC/BA,2BAA2B,CAAClH,MAAM,CAAClL,gBAAgB,CACjD,OAAO,EACPga,8BAA8B,CAC/B;cACF;cAAAP;cAAA,OAGOS,8BAA8B,CAClCvgB,KAAK,CAAC8H,OAAO,EACbA,OAAO,EACP8X,aAAa,EACbC,oBAAoB,EACpBjC,OAAO,CACR;YAAA;cAAA4C;cAPGC,OAAO,yBAAPA,OAAO;cAAEC,aAAa,yBAAbA,aAAa;cAAEC;cAAAA,KAS1B/C,OAAO,CAACrM,MAAM,CAACiB,OAAO;gBAAAsN;gBAAA;cAAA;cAAA,kCACjB;gBAAE7B,cAAc,EAAE;eAAM;YAAA;cAGjC;cACA;cACA;cACA,IAAIxF,2BAA2B,EAAE;gBAC/BA,2BAA2B,CAAClH,MAAM,CAACjL,mBAAmB,CACpD,OAAO,EACP+Z,8BAA8B,CAC/B;cACF;cACDR,oBAAoB,CAAC1W,OAAO,CAAE8W,YAAE;gBAAA,OAAKhH,gBAAgB,CAACxG,MAAM,CAACwN,EAAE,CAACpf,GAAG,CAAC;cAAA,EAAC;cAErE;cACIoT,QAAQ,GAAG2M,YAAY,CAACH,OAAO,CAAC;cAAA,KAChCxM,QAAQ;gBAAA6L;gBAAA;cAAA;cACV,IAAI7L,QAAQ,CAAClP,GAAG,IAAI6a,aAAa,CAACzf,MAAM,EAAE;gBACxC;gBACA;gBACA;gBACI0gB,UAAU,GACZhB,oBAAoB,CAAC5L,QAAQ,CAAClP,GAAG,GAAG6a,aAAa,CAACzf,MAAM,CAAC,CAACU,GAAG;gBAC/DwY,gBAAgB,CAACtH,GAAG,CAAC8O,UAAU,CAAC;cACjC;cAAAf;cAAA,OACKX,uBAAuB,CAACnf,KAAK,EAAEiU,QAAQ,CAAC/J,MAAM,EAAE;gBAAE9H;cAAS,EAAC;YAAA;cAAA,kCAC3D;gBAAE6b,cAAc,EAAE;eAAM;YAAA;cAGjC;cAAA6C,qBAC6BC,iBAAiB,CAC5C/gB,KAAK,EACL8H,OAAO,EACP8X,aAAa,EACbc,aAAa,EACb9D,YAAY,EACZiD,oBAAoB,EACpBc,cAAc,EACdlH,eAAe,CAChB,EATKrR,UAAU,sBAAVA,UAAU,EAAEsP,oCAWlB;cACA+B,eAAe,CAACtQ,OAAO,CAAC,UAAC6X,YAAY,EAAEhC,OAAO,EAAI;gBAChDgC,YAAY,CAACjO,SAAS,CAAEP,iBAAO,EAAI;kBACjC;kBACA;kBACA;kBACA,IAAIA,OAAO,IAAIwO,YAAY,CAACrP,IAAI,EAAE;oBAChC8H,eAAe,CAAChH,MAAM,CAACuM,OAAO,CAAC;kBAChC;gBACH,CAAC,CAAC;cACJ,CAAC,CAAC;cAEEe,eAAe,GAAGC,sBAAsB,EAAE;cAC1CiB,kBAAkB,GAAGC,oBAAoB,CAAC/H,uBAAuB,CAAC;cAClEgI,oBAAoB,GACtBpB,eAAe,IAAIkB,kBAAkB,IAAIpB,oBAAoB,CAAC1f,MAAM,GAAG,CAAC;cAAA,kCAE1EihB;gBACEhZ,UAAU,EAAVA,UAAU;gBACVsP;cAAM,GACFyJ,oBAAoB,GAAG;gBAAEhJ,QAAQ,EAAE,IAAIC,GAAG,CAACpY,KAAK,CAACmY,QAAQ;eAAG,GAAG,EAAE;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAEzE;IAAA;EAAA;EAGA,SAASkJ,KAAKA,CACZxgB,GAAW,EACXme,OAAe,EACfpb,IAAmB,EACnBgX,IAAyB;IAEzB,IAAI3E,QAAQ,EAAE;MACZ,MAAM,IAAI3R,KAAK,CACb,2EAA2E,GACzE,8EAA8E,GAC9E,6CAA6C,CAChD;IACF;IAED,IAAI2U,gBAAgB,CAAC7I,GAAG,CAACvP,GAAG,CAAC,EAAEuf,YAAY,CAACvf,GAAG,CAAC;IAChD,IAAIua,SAAS,GAAG,CAACR,IAAI,IAAIA,IAAI,CAACO,kBAAkB,MAAM,IAAI;IAE1D,IAAIkC,WAAW,GAAGjH,kBAAkB,IAAID,UAAU;IAClD,IAAIiG,cAAc,GAAGC,WAAW,CAC9Brc,KAAK,CAACc,QAAQ,EACdd,KAAK,CAAC8H,OAAO,EACbL,QAAQ,EACR4O,MAAM,CAACI,kBAAkB,EACzB7S,IAAI,EACJyS,MAAM,CAACvH,oBAAoB,EAC3BkQ,OAAO,EACPpE,IAAI,oBAAJA,IAAI,CAAE2B,QAAQ,CACf;IACD,IAAIzU,OAAO,GAAGP,WAAW,CAAC8V,WAAW,EAAEjB,cAAc,EAAE3U,QAAQ,CAAC;IAEhE,IAAI,CAACK,OAAO,EAAE;MACZwZ,eAAe,CACbzgB,GAAG,EACHme,OAAO,EACP9H,sBAAsB,CAAC,GAAG,EAAE;QAAElW,QAAQ,EAAEob;OAAgB,CAAC,EACzD;QAAEhB;MAAS,CAAE,CACd;MACD;IACD;IAED,4BAAkCqB,wBAAwB,CACxDpG,MAAM,CAACE,sBAAsB,EAC7B,IAAI,EACJ6F,cAAc,EACdxB,IAAI,CACL;MALKjZ,IAAI,yBAAJA,IAAI;MAAE+a,UAAU,yBAAVA,UAAU;MAAE1W;IAOxB,IAAIA,KAAK,EAAE;MACTsb,eAAe,CAACzgB,GAAG,EAAEme,OAAO,EAAEhZ,KAAK,EAAE;QAAEoV;MAAW,EAAC;MACnD;IACD;IAED,IAAIjT,KAAK,GAAGyW,cAAc,CAAC9W,OAAO,EAAEnG,IAAI,CAAC;IAEzC6W,yBAAyB,GAAG,CAACoC,IAAI,IAAIA,IAAI,CAAC5C,kBAAkB,MAAM,IAAI;IAEtE,IAAI0E,UAAU,IAAIlB,gBAAgB,CAACkB,UAAU,CAAC3H,UAAU,CAAC,EAAE;MACzDwM,mBAAmB,CACjB1gB,GAAG,EACHme,OAAO,EACPrd,IAAI,EACJwG,KAAK,EACLL,OAAO,EACPsT,SAAS,EACTsB,UAAU,CACX;MACD;IACD;IAED;IACA;IACApD,gBAAgB,CAACjJ,GAAG,CAACxP,GAAG,EAAE;MAAEme,OAAO,EAAPA,OAAO;MAAErd;IAAM,EAAC;IAC5C6f,mBAAmB,CACjB3gB,GAAG,EACHme,OAAO,EACPrd,IAAI,EACJwG,KAAK,EACLL,OAAO,EACPsT,SAAS,EACTsB,UAAU,CACX;EACH;EAEA;EACA;EAAA,SACe6E,mBAAmBA;IAAAA;EAAAA,EAoQlC;EAAA;IAAAE,gFApQA,kBACE5gB,GAAW,EACXme,OAAe,EACfrd,IAAY,EACZwG,KAA6B,EAC7BuZ,cAAwC,EACxCtG,SAAkB,EAClBsB,UAAsB;MAAA;MAAA;QAAA;UAAA;YAAA;cAEtBM,oBAAoB,EAAE;cACtB1D,gBAAgB,CAAC7G,MAAM,CAAC5R,GAAG,CAAC;cAAA,MAExB,CAACsH,KAAK,CAACxB,KAAK,CAACvG,MAAM,IAAI,CAAC+H,KAAK,CAACxB,KAAK,CAAC4Q,IAAI;gBAAAoK;gBAAA;cAAA;cACtC3b,OAAK,GAAGkR,sBAAsB,CAAC,GAAG,EAAE;gBACtC6H,MAAM,EAAErC,UAAU,CAAC3H,UAAU;gBAC7B/T,QAAQ,EAAEW,IAAI;gBACdqd,OAAO,EAAEA;cACV,EAAC;cACFsC,eAAe,CAACzgB,GAAG,EAAEme,OAAO,EAAEhZ,OAAK,EAAE;gBAAEoV;cAAW,EAAC;cAAA;YAAA;cAIrD;cACIwG,eAAe,GAAG5hB,KAAK,CAACmY,QAAQ,CAAC5F,GAAG,CAAC1R,GAAG,CAAC;cAC7CghB,kBAAkB,CAAChhB,GAAG,EAAEihB,oBAAoB,CAACpF,UAAU,EAAEkF,eAAe,CAAC,EAAE;gBACzExG;cACD,EAAC;cAEF;cACI2G,eAAe,GAAG,IAAI5Q,eAAe,EAAE;cACvC6Q,YAAY,GAAGnE,uBAAuB,CACxC9N,IAAI,CAACxO,OAAO,EACZI,IAAI,EACJogB,eAAe,CAACxQ,MAAM,EACtBmL,UAAU,CACX;cACDzD,gBAAgB,CAAC5I,GAAG,CAACxP,GAAG,EAAEkhB,eAAe,CAAC;cAEtCE,iBAAiB,GAAG/I,kBAAkB;cAAAyI;cAAA,OACjB1C,kBAAkB,CACzC,QAAQ,EACR+C,YAAY,EACZ7Z,KAAK,EACLuZ,cAAc,EACd1a,QAAQ,EACRF,kBAAkB,EAClBW,QAAQ,EACR4O,MAAM,CAACvH,oBAAoB,CAC5B;YAAA;cATGoT,YAAY;cAAA,KAWZF,YAAY,CAACzQ,MAAM,CAACiB,OAAO;gBAAAmP;gBAAA;cAAA;cAC7B;cACA;cACA,IAAI1I,gBAAgB,CAAC1G,GAAG,CAAC1R,GAAG,CAAC,KAAKkhB,eAAe,EAAE;gBACjD9I,gBAAgB,CAACxG,MAAM,CAAC5R,GAAG,CAAC;cAC7B;cAAA;YAAA;cAAA,MAOCwV,MAAM,CAACC,iBAAiB,IAAIkD,eAAe,CAACpJ,GAAG,CAACvP,GAAG,CAAC;gBAAA8gB;gBAAA;cAAA;cAAA,MAClDzC,gBAAgB,CAACgD,YAAY,CAAC,IAAI9C,aAAa,CAAC8C,YAAY,CAAC;gBAAAP;gBAAA;cAAA;cAC/DE,kBAAkB,CAAChhB,GAAG,EAAEshB,cAAc,CAACliB,SAAS,CAAC,CAAC;cAAA;YAAA;cAAA0hB;cAAA;YAAA;cAAA,KAKhDzC,gBAAgB,CAACgD,YAAY,CAAC;gBAAAP;gBAAA;cAAA;cAChC1I,gBAAgB,CAACxG,MAAM,CAAC5R,GAAG,CAAC;cAAA,MACxBsY,uBAAuB,GAAG8I,iBAAiB;gBAAAN;gBAAA;cAAA;cAC7C;cACA;cACA;cACA;cACAE,kBAAkB,CAAChhB,GAAG,EAAEshB,cAAc,CAACliB,SAAS,CAAC,CAAC;cAAA;YAAA;cAGlDoZ,gBAAgB,CAACtH,GAAG,CAAClR,GAAG,CAAC;cACzBghB,kBAAkB,CAAChhB,GAAG,EAAEsf,iBAAiB,CAACzD,UAAU,CAAC,CAAC;cAAA,kCAC/CyC,uBAAuB,CAACnf,KAAK,EAAEkiB,YAAY,EAAE;gBAClD3D,iBAAiB,EAAE7B;cACpB,EAAC;YAAA;cAAA,KAKF0C,aAAa,CAAC8C,YAAY,CAAC;gBAAAP;gBAAA;cAAA;cAC7BL,eAAe,CAACzgB,GAAG,EAAEme,OAAO,EAAEkD,YAAY,CAAClc,KAAK,CAAC;cAAA;YAAA;cAAA,KAKjDsZ,gBAAgB,CAAC4C,YAAY,CAAC;gBAAAP;gBAAA;cAAA;cAAA,MAC1BzK,sBAAsB,CAAC,GAAG,EAAE;gBAAE4H,IAAI,EAAE;cAAgB,EAAC;YAAA;cAG7D;cACA;cACI7c,YAAY,GAAGjC,KAAK,CAAC8X,UAAU,CAAChX,QAAQ,IAAId,KAAK,CAACc,QAAQ;cAC1DshB,mBAAmB,GAAGvE,uBAAuB,CAC/C9N,IAAI,CAACxO,OAAO,EACZU,YAAY,EACZ8f,eAAe,CAACxQ,MAAM,CACvB;cACG8L,WAAW,GAAGjH,kBAAkB,IAAID,UAAU;cAC9CrO,OAAO,GACT9H,KAAK,CAAC8X,UAAU,CAAC9X,KAAK,KAAK,MAAM,GAC7BuH,WAAW,CAAC8V,WAAW,EAAErd,KAAK,CAAC8X,UAAU,CAAChX,QAAQ,EAAE2G,QAAQ,CAAC,GAC7DzH,KAAK,CAAC8H,OAAO;cAEnB3D,SAAS,CAAC2D,OAAO,EAAE,8CAA8C,CAAC;cAE9Dua,MAAM,GAAG,EAAEnJ,kBAAkB;cACjCE,cAAc,CAAC/I,GAAG,CAACxP,GAAG,EAAEwhB,MAAM,CAAC;cAE3BC,WAAW,GAAGnC,iBAAiB,CAACzD,UAAU,EAAEwF,YAAY,CAAC5Z,IAAI,CAAC;cAClEtI,KAAK,CAACmY,QAAQ,CAAC9H,GAAG,CAACxP,GAAG,EAAEyhB,WAAW,CAAC;cAAAC,qBAEQ5C,gBAAgB,CAC1D5P,IAAI,CAACxO,OAAO,EACZvB,KAAK,EACL8H,OAAO,EACP4U,UAAU,EACVza,YAAY,EACZ,KAAK,EACL6W,sBAAsB,EACtBC,uBAAuB,EACvBC,qBAAqB,EACrBQ,eAAe,EACfF,gBAAgB,EAChBD,gBAAgB,EAChBgE,WAAW,EACX5V,QAAQ,sBACLU,KAAK,CAACxB,KAAK,CAACO,EAAE,EAAGgb,YAAY,CAAC5Z,OACjCrI,SAAS;eACV,8DAjBI2f,aAAa,0BAAEC,oBAAoB,0BAmBxC;cACA;cACA;cACAA,oBAAoB,CACjB3U,MAAM,CAAE+U,YAAE;gBAAA,OAAKA,EAAE,CAACpf,GAAG,KAAKA,GAAG;cAAA,EAAC,CAC9BsI,OAAO,CAAE8W,YAAE,EAAI;gBACd,IAAIuC,QAAQ,GAAGvC,EAAE,CAACpf,GAAG;gBACrB,IAAI+gB,eAAe,GAAG5hB,KAAK,CAACmY,QAAQ,CAAC5F,GAAG,CAACiQ,QAAQ,CAAC;gBAClD,IAAItC,mBAAmB,GAAGC,iBAAiB,CACzClgB,SAAS,EACT2hB,eAAe,GAAGA,eAAe,CAACtZ,IAAI,GAAGrI,SAAS,CACnD;gBACDD,KAAK,CAACmY,QAAQ,CAAC9H,GAAG,CAACmS,QAAQ,EAAEtC,mBAAmB,CAAC;gBACjD,IAAIjH,gBAAgB,CAAC7I,GAAG,CAACoS,QAAQ,CAAC,EAAE;kBAClCpC,YAAY,CAACoC,QAAQ,CAAC;gBACvB;gBACD,IAAIvC,EAAE,CAAC/O,UAAU,EAAE;kBACjB+H,gBAAgB,CAAC5I,GAAG,CAACmS,QAAQ,EAAEvC,EAAE,CAAC/O,UAAU,CAAC;gBAC9C;cACH,CAAC,CAAC;cAEJ+I,WAAW,CAAC;gBAAE9B,QAAQ,EAAE,IAAIC,GAAG,CAACpY,KAAK,CAACmY,QAAQ;cAAC,CAAE,CAAC;cAE9CkI,8BAA8B,GAAGA,SAAjCA,8BAA8BA;gBAAA,OAChCR,oBAAoB,CAAC1W,OAAO,CAAE8W,YAAE;kBAAA,OAAKG,YAAY,CAACH,EAAE,CAACpf,GAAG,CAAC;gBAAA,EAAC;cAAA;cAE5DkhB,eAAe,CAACxQ,MAAM,CAAClL,gBAAgB,CACrC,OAAO,EACPga,8BAA8B,CAC/B;cAAAsB;cAAA,OAGOpB,8BAA8B,CAClCvgB,KAAK,CAAC8H,OAAO,EACbA,OAAO,EACP8X,aAAa,EACbC,oBAAoB,EACpBuC,mBAAmB,CACpB;YAAA;cAAAK;cAPGhC,OAAO,0BAAPA,OAAO;cAAEC,aAAa,0BAAbA,aAAa;cAAEC;cAAAA,KAS1BoB,eAAe,CAACxQ,MAAM,CAACiB,OAAO;gBAAAmP;gBAAA;cAAA;cAAA;YAAA;cAIlCI,eAAe,CAACxQ,MAAM,CAACjL,mBAAmB,CACxC,OAAO,EACP+Z,8BAA8B,CAC/B;cAEDjH,cAAc,CAAC3G,MAAM,CAAC5R,GAAG,CAAC;cAC1BoY,gBAAgB,CAACxG,MAAM,CAAC5R,GAAG,CAAC;cAC5Bgf,oBAAoB,CAAC1W,OAAO,CAAE8H,WAAC;gBAAA,OAAKgI,gBAAgB,CAACxG,MAAM,CAACxB,CAAC,CAACpQ,GAAG,CAAC;cAAA,EAAC;cAE/DoT,QAAQ,GAAG2M,YAAY,CAACH,OAAO,CAAC;cAAA,KAChCxM,QAAQ;gBAAA0N;gBAAA;cAAA;cACV,IAAI1N,QAAQ,CAAClP,GAAG,IAAI6a,aAAa,CAACzf,MAAM,EAAE;gBACxC;gBACA;gBACA;gBACI0gB,UAAU,GACZhB,oBAAoB,CAAC5L,QAAQ,CAAClP,GAAG,GAAG6a,aAAa,CAACzf,MAAM,CAAC,CAACU,GAAG;gBAC/DwY,gBAAgB,CAACtH,GAAG,CAAC8O,UAAU,CAAC;cACjC;cAAA,kCACM1B,uBAAuB,CAACnf,KAAK,EAAEiU,QAAQ,CAAC/J,MAAM,CAAC;YAAA;cAGxD;cAAAwY,sBAC6B3B,iBAAiB,CAC5C/gB,KAAK,EACLA,KAAK,CAAC8H,OAAO,EACb8X,aAAa,EACbc,aAAa,EACbzgB,SAAS,EACT4f,oBAAoB,EACpBc,cAAc,EACdlH,eAAe,CAChB,EATKrR,UAAU,uBAAVA,UAAU,EAAEsP,qCAWlB;cACA;cACA,IAAI1X,KAAK,CAACmY,QAAQ,CAAC/H,GAAG,CAACvP,GAAG,CAAC,EAAE;gBACvB8hB,WAAW,GAAGR,cAAc,CAACD,YAAY,CAAC5Z,IAAI,CAAC;gBACnDtI,KAAK,CAACmY,QAAQ,CAAC9H,GAAG,CAACxP,GAAG,EAAE8hB,WAAW,CAAC;cACrC;cAEDzB,oBAAoB,CAACmB,MAAM,CAAC;cAE5B;cACA;cACA;cACA,IACEriB,KAAK,CAAC8X,UAAU,CAAC9X,KAAK,KAAK,SAAS,IACpCqiB,MAAM,GAAGlJ,uBAAuB,EAChC;gBACAhV,SAAS,CAACmU,aAAa,EAAE,yBAAyB,CAAC;gBACnDG,2BAA2B,IAAIA,2BAA2B,CAACvF,KAAK,EAAE;gBAElEmI,kBAAkB,CAACrb,KAAK,CAAC8X,UAAU,CAAChX,QAAQ,EAAE;kBAC5CgH,OAAO,EAAPA,OAAO;kBACPM,UAAU,EAAVA,UAAU;kBACVsP,MAAM,EAANA,MAAM;kBACNS,QAAQ,EAAE,IAAIC,GAAG,CAACpY,KAAK,CAACmY,QAAQ;gBACjC,EAAC;cACH,OAAM;gBACL;gBACA;gBACA;gBACA8B,WAAW,CAAC;kBACVvC,MAAM,EAANA,MAAM;kBACNtP,UAAU,EAAEwT,eAAe,CACzB5b,KAAK,CAACoI,UAAU,EAChBA,UAAU,EACVN,OAAO,EACP4P,MAAM,CACP;kBACDS,QAAQ,EAAE,IAAIC,GAAG,CAACpY,KAAK,CAACmY,QAAQ;gBACjC,EAAC;gBACFW,sBAAsB,GAAG,KAAK;cAC/B;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACH;IAAA;EAAA;EAAA,SAGe0I,mBAAmBA;IAAAA;EAAAA;EA6FlC;;;;;;;;;;;;;;;;;;AAkBG;EAlBH;IAAAoB,gFA7FA,kBACE/hB,GAAW,EACXme,OAAe,EACfrd,IAAY,EACZwG,KAA6B,EAC7BL,OAAiC,EACjCsT,SAAkB,EAClBsB,UAAuB;MAAA;MAAA;QAAA;UAAA;YAAA;cAEnBkF,eAAe,GAAG5hB,KAAK,CAACmY,QAAQ,CAAC5F,GAAG,CAAC1R,GAAG,CAAC;cAC7CghB,kBAAkB,CAChBhhB,GAAG,EACHsf,iBAAiB,CACfzD,UAAU,EACVkF,eAAe,GAAGA,eAAe,CAACtZ,IAAI,GAAGrI,SAAS,CACnD,EACD;gBAAEmb;cAAW,EACd;cAED;cACI2G,eAAe,GAAG,IAAI5Q,eAAe,EAAE;cACvC6Q,YAAY,GAAGnE,uBAAuB,CACxC9N,IAAI,CAACxO,OAAO,EACZI,IAAI,EACJogB,eAAe,CAACxQ,MAAM,CACvB;cACD0H,gBAAgB,CAAC5I,GAAG,CAACxP,GAAG,EAAEkhB,eAAe,CAAC;cAEtCE,iBAAiB,GAAG/I,kBAAkB;cAAA2J;cAAA,OACX5D,kBAAkB,CAC/C,QAAQ,EACR+C,YAAY,EACZ7Z,KAAK,EACLL,OAAO,EACPd,QAAQ,EACRF,kBAAkB,EAClBW,QAAQ,EACR4O,MAAM,CAACvH,oBAAoB,CAC5B;YAAA;cATG5E,MAAM;cAAA,KAeNoV,gBAAgB,CAACpV,MAAM,CAAC;gBAAA2Y;gBAAA;cAAA;cAAAA;cAAA,OAEjBC,mBAAmB,CAAC5Y,MAAM,EAAE8X,YAAY,CAACzQ,MAAM,EAAE,IAAI,CAAC;YAAA;cAAAsR;cAAA;gBAAAA;gBAAA;cAAA;cAAAA,eAC7D3Y,MAAM;YAAA;cAFRA,MAAM;YAAA;cAKR;cACA;cACA,IAAI+O,gBAAgB,CAAC1G,GAAG,CAAC1R,GAAG,CAAC,KAAKkhB,eAAe,EAAE;gBACjD9I,gBAAgB,CAACxG,MAAM,CAAC5R,GAAG,CAAC;cAC7B;cAAA,KAEGmhB,YAAY,CAACzQ,MAAM,CAACiB,OAAO;gBAAAqQ;gBAAA;cAAA;cAAA;YAAA;cAAA,KAM3BrJ,eAAe,CAACpJ,GAAG,CAACvP,GAAG,CAAC;gBAAAgiB;gBAAA;cAAA;cAC1BhB,kBAAkB,CAAChhB,GAAG,EAAEshB,cAAc,CAACliB,SAAS,CAAC,CAAC;cAAA;YAAA;cAAA,KAKhDif,gBAAgB,CAAChV,MAAM,CAAC;gBAAA2Y;gBAAA;cAAA;cAAA,MACtB1J,uBAAuB,GAAG8I,iBAAiB;gBAAAY;gBAAA;cAAA;cAC7C;cACA;cACAhB,kBAAkB,CAAChhB,GAAG,EAAEshB,cAAc,CAACliB,SAAS,CAAC,CAAC;cAAA;YAAA;cAGlDoZ,gBAAgB,CAACtH,GAAG,CAAClR,GAAG,CAAC;cAAAgiB;cAAA,OACnB1D,uBAAuB,CAACnf,KAAK,EAAEkK,MAAM,CAAC;YAAA;cAAA;YAAA;cAAA,KAM5CkV,aAAa,CAAClV,MAAM,CAAC;gBAAA2Y;gBAAA;cAAA;cACvBvB,eAAe,CAACzgB,GAAG,EAAEme,OAAO,EAAE9U,MAAM,CAAClE,KAAK,CAAC;cAAA;YAAA;cAI7C7B,SAAS,CAAC,CAACmb,gBAAgB,CAACpV,MAAM,CAAC,EAAE,iCAAiC,CAAC;cAEvE;cACA2X,kBAAkB,CAAChhB,GAAG,EAAEshB,cAAc,CAACjY,MAAM,CAAC5B,IAAI,CAAC,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACtD;IAAA;EAAA;EAAA,SAqBe6W,uBAAuBA;IAAAA;EAAAA;EAAAA;IAAAA,oFAAtC,kBACEnf,KAAkB,EAClBiU,QAAwB;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA8O,4BASpB,EAAE,WAPJrG,UAAU,SAAVA,UAAU,EACV6B,iBAAiB,SAAjBA,iBAAiB,EACjBnc;cAOF,IAAI6R,QAAQ,CAAC8I,UAAU,EAAE;gBACvBjE,sBAAsB,GAAG,IAAI;cAC9B;cAEGkK,gBAAgB,GAAGjiB,cAAc,CAACf,KAAK,CAACc,QAAQ,EAAEmT,QAAQ,CAACnT,QAAQ,EAAE;gBACvE4a,WAAW,EAAE;cACd,EAAC;cACFvX,SAAS,CACP6e,gBAAgB,EAChB,gDAAgD,CACjD;cAAA,KAEGjN,SAAS;gBAAAkN;gBAAA;cAAA;cACPC,gBAAgB,GAAG,KAAK;cAE5B,IAAIjP,QAAQ,CAACkP,cAAc,EAAE;gBAC3B;gBACAD,gBAAgB,GAAG,IAAI;eACxB,MAAM,IAAI1N,kBAAkB,CAACnK,IAAI,CAAC4I,QAAQ,CAACnT,QAAQ,CAAC,EAAE;gBAC/CgD,GAAG,GAAGiM,IAAI,CAACxO,OAAO,CAACC,SAAS,CAACyS,QAAQ,CAACnT,QAAQ,CAAC;gBACrDoiB,gBAAgB;gBACd;gBACApf,GAAG,CAACsC,MAAM,KAAK0P,YAAY,CAAChV,QAAQ,CAACsF,MAAM;gBAC3C;gBACAsB,aAAa,CAAC5D,GAAG,CAAC9C,QAAQ,EAAEyG,QAAQ,CAAC,IAAI,IAAI;cAChD;cAAA,KAEGyb,gBAAgB;gBAAAD;gBAAA;cAAA;cAClB,IAAI7gB,OAAO,EAAE;gBACX0T,YAAY,CAAChV,QAAQ,CAACsB,OAAO,CAAC6R,QAAQ,CAACnT,QAAQ,CAAC;cACjD,OAAM;gBACLgV,YAAY,CAAChV,QAAQ,CAACqF,MAAM,CAAC8N,QAAQ,CAACnT,QAAQ,CAAC;cAChD;cAAA;YAAA;cAKL;cACA;cACA2X,2BAA2B,GAAG,IAAI;cAE9B2K,qBAAqB,GACvBhhB,OAAO,KAAK,IAAI,GAAGmW,MAAa,CAAClW,OAAO,GAAGkW,MAAa,CAACvW,IAAI,EAE/D;cACA;cAAAqhB,oBAC8CrjB,KAAK,CAAC8X,UAAU,EAAxD/C,UAAU,qBAAVA,UAAU,EAAEC,UAAU,qBAAVA,UAAU,EAAEC;cAC9B,IACE,CAACyH,UAAU,IACX,CAAC6B,iBAAiB,IAClBxJ,UAAU,IACVC,UAAU,IACVC,WAAW,EACX;gBACAyH,UAAU,GAAG+C,2BAA2B,CAACzf,KAAK,CAAC8X,UAAU,CAAC;cAC3D;cAED;cACA;cACA;cACI0H,gBAAgB,GAAG9C,UAAU,IAAI6B,iBAAiB;cAAA,MAEpD1J,iCAAiC,CAACzE,GAAG,CAAC6D,QAAQ,CAAChE,MAAM,CAAC,IACtDuP,gBAAgB,IAChBhE,gBAAgB,CAACgE,gBAAgB,CAACzK,UAAU,CAAC;gBAAAkO;gBAAA;cAAA;cAAAA;cAAA,OAEvC/I,eAAe,CAACkJ,qBAAqB,EAAEJ,gBAAgB,EAAE;gBAC7DtG,UAAU,eACL8C,gBAAgB;kBACnBxK,UAAU,EAAEf,QAAQ,CAACnT;iBACtB;gBACD;gBACAkX,kBAAkB,EAAEQ;cACrB,EAAC;YAAA;cAAAyK;cAAA;YAAA;cAEF;cACA;cACI/F,kBAAkB,GAAGkB,oBAAoB,CAC3C4E,gBAAgB,EAChBtG,UAAU,CACX;cAAAuG;cAAA,OACK/I,eAAe,CAACkJ,qBAAqB,EAAEJ,gBAAgB,EAAE;gBAC7D9F,kBAAkB,EAAlBA,kBAAkB;gBAClB;gBACAqB,iBAAiB,EAAjBA,iBAAiB;gBACjB;gBACAvG,kBAAkB,EAAEQ;cACrB,EAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAEN;IAAA;EAAA;EAAA,SAEe+H,8BAA8BA;IAAAA;EAAAA;EAAAA;IAAAA,2FAA7C,kBACE+C,cAAwC,EACxCxb,OAAiC,EACjC8X,aAAuC,EACvC2D,cAAqC,EACrC3F,OAAgB;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA4F;cAAA,OAKIxS,OAAO,CAACyS,GAAG,8BAC1B7D,aAAa,CAAChgB,GAAG,CAAEuI,eAAK;gBAAA,OACzB8W,kBAAkB,CAChB,QAAQ,EACRrB,OAAO,EACPzV,KAAK,EACLL,OAAO,EACPd,QAAQ,EACRF,kBAAkB,EAClBW,QAAQ,EACR4O,MAAM,CAACvH,oBAAoB,CAC5B;cAAA,EACF,sBACEyU,cAAc,CAAC3jB,GAAG,CAAE0gB,WAAC,EAAI;gBAC1B,IAAIA,CAAC,CAACxY,OAAO,IAAIwY,CAAC,CAACnY,KAAK,IAAImY,CAAC,CAACpP,UAAU,EAAE;kBACxC,OAAO+N,kBAAkB,CACvB,QAAQ,EACRpB,uBAAuB,CAAC9N,IAAI,CAACxO,OAAO,EAAE+e,CAAC,CAAC3e,IAAI,EAAE2e,CAAC,CAACpP,UAAU,CAACK,MAAM,CAAC,EAClE+O,CAAC,CAACnY,KAAK,EACPmY,CAAC,CAACxY,OAAO,EACTd,QAAQ,EACRF,kBAAkB,EAClBW,QAAQ,EACR4O,MAAM,CAACvH,oBAAoB,CAC5B;gBACF,OAAM;kBACL,IAAI9I,OAAK,GAAgB;oBACvB8Y,IAAI,EAAEvY,UAAU,CAACP,KAAK;oBACtBA,KAAK,EAAEkR,sBAAsB,CAAC,GAAG,EAAE;sBAAElW,QAAQ,EAAEsf,CAAC,CAAC3e;qBAAM;mBACxD;kBACD,OAAOqE,OAAK;gBACb;eACF,CAAC,EACH,CAAC;YAAA;cAjCEya,OAAO;cAkCPC,aAAa,GAAGD,OAAO,CAACxc,KAAK,CAAC,CAAC,EAAE2b,aAAa,CAACzf,MAAM,CAAC;cACtDwgB,cAAc,GAAGF,OAAO,CAACxc,KAAK,CAAC2b,aAAa,CAACzf,MAAM,CAAC;cAAAqjB;cAAA,OAElDxS,OAAO,CAACyS,GAAG,CAAC,CAChBC,sBAAsB,CACpBJ,cAAc,EACd1D,aAAa,EACbc,aAAa,EACbA,aAAa,CAAC9gB,GAAG,CAAC;gBAAA,OAAMge,OAAO,CAACrM,MAAM;cAAA,EAAC,EACvC,KAAK,EACLvR,KAAK,CAACoI,UAAU,CACjB,EACDsb,sBAAsB,CACpBJ,cAAc,EACdC,cAAc,CAAC3jB,GAAG,CAAE0gB,WAAC;gBAAA,OAAKA,CAAC,CAACnY,KAAK;cAAA,EAAC,EAClCwY,cAAc,EACd4C,cAAc,CAAC3jB,GAAG,CAAE0gB,WAAC;gBAAA,OAAMA,CAAC,CAACpP,UAAU,GAAGoP,CAAC,CAACpP,UAAU,CAACK,MAAM,GAAG,IAAK;cAAA,EAAC,EACtE,IAAI,CACL,CACF,CAAC;YAAA;cAAA,kCAEK;gBAAEkP,OAAO,EAAPA,OAAO;gBAAEC,aAAa,EAAbA,aAAa;gBAAEC;eAAgB;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACnD;IAAA;EAAA;EAEA,SAAS3D,oBAAoBA;IAAA;IAC3B;IACAlE,sBAAsB,GAAG,IAAI;IAE7B;IACA;IACAC,gDAAuB,EAAChX,IAAI,iDAAI2b,qBAAqB,EAAE,EAAC;IAExD;IACApE,gBAAgB,CAACnQ,OAAO,CAAC,UAACoE,CAAC,EAAE1M,GAAG,EAAI;MAClC,IAAIoY,gBAAgB,CAAC7I,GAAG,CAACvP,GAAG,CAAC,EAAE;QAC7BmY,qBAAqB,CAACjX,IAAI,CAAClB,GAAG,CAAC;QAC/Buf,YAAY,CAACvf,GAAG,CAAC;MAClB;IACH,CAAC,CAAC;EACJ;EAEA,SAASghB,kBAAkBA,CACzBhhB,GAAW,EACXka,OAAgB,EAChBH,MAAkC;IAAA,IAAlCA;MAAAA,OAAgC,EAAE;IAAA;IAElC5a,KAAK,CAACmY,QAAQ,CAAC9H,GAAG,CAACxP,GAAG,EAAEka,OAAO,CAAC;IAChCd,WAAW,CACT;MAAE9B,QAAQ,EAAE,IAAIC,GAAG,CAACpY,KAAK,CAACmY,QAAQ;IAAG,GACrC;MAAEiD,SAAS,EAAE,CAACR,IAAI,IAAIA,IAAI,CAACQ,SAAS,MAAM;IAAM,EACjD;EACH;EAEA,SAASkG,eAAeA,CACtBzgB,GAAW,EACXme,OAAe,EACfhZ,KAAU,EACV4U,MAAkC;IAAA,IAAlCA;MAAAA,OAAgC,EAAE;IAAA;IAElC,IAAIyE,aAAa,GAAGvB,mBAAmB,CAAC9d,KAAK,CAAC8H,OAAO,EAAEkX,OAAO,CAAC;IAC/DvE,aAAa,CAAC5Z,GAAG,CAAC;IAClBoZ,WAAW,CACT;MACEvC,MAAM,sBACH2H,aAAa,CAAC1Y,KAAK,CAACO,EAAE,EAAGlB,MAC3B;MACDmS,QAAQ,EAAE,IAAIC,GAAG,CAACpY,KAAK,CAACmY,QAAQ;IACjC,GACD;MAAEiD,SAAS,EAAE,CAACR,IAAI,IAAIA,IAAI,CAACQ,SAAS,MAAM;IAAI,CAAE,CACjD;EACH;EAEA,SAASuI,UAAUA,CAAc9iB,GAAW;IAC1C,IAAIwV,MAAM,CAACC,iBAAiB,EAAE;MAC5BiD,cAAc,CAAClJ,GAAG,CAACxP,GAAG,EAAE,CAAC0Y,cAAc,CAAChH,GAAG,CAAC1R,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;MAC3D;MACA;MACA,IAAI2Y,eAAe,CAACpJ,GAAG,CAACvP,GAAG,CAAC,EAAE;QAC5B2Y,eAAe,CAAC/G,MAAM,CAAC5R,GAAG,CAAC;MAC5B;IACF;IACD,OAAOb,KAAK,CAACmY,QAAQ,CAAC5F,GAAG,CAAC1R,GAAG,CAAC,IAAIuU,YAAY;EAChD;EAEA,SAASqF,aAAaA,CAAC5Z,GAAW;IAChC,IAAIka,OAAO,GAAG/a,KAAK,CAACmY,QAAQ,CAAC5F,GAAG,CAAC1R,GAAG,CAAC;IACrC;IACA;IACA;IACA,IACEoY,gBAAgB,CAAC7I,GAAG,CAACvP,GAAG,CAAC,IACzB,EAAEka,OAAO,IAAIA,OAAO,CAAC/a,KAAK,KAAK,SAAS,IAAIoZ,cAAc,CAAChJ,GAAG,CAACvP,GAAG,CAAC,CAAC,EACpE;MACAuf,YAAY,CAACvf,GAAG,CAAC;IAClB;IACDyY,gBAAgB,CAAC7G,MAAM,CAAC5R,GAAG,CAAC;IAC5BuY,cAAc,CAAC3G,MAAM,CAAC5R,GAAG,CAAC;IAC1BwY,gBAAgB,CAAC5G,MAAM,CAAC5R,GAAG,CAAC;IAC5B2Y,eAAe,CAAC/G,MAAM,CAAC5R,GAAG,CAAC;IAC3Bb,KAAK,CAACmY,QAAQ,CAAC1F,MAAM,CAAC5R,GAAG,CAAC;EAC5B;EAEA,SAAS+iB,2BAA2BA,CAAC/iB,GAAW;IAC9C,IAAIwV,MAAM,CAACC,iBAAiB,EAAE;MAC5B,IAAIuN,KAAK,GAAG,CAACtK,cAAc,CAAChH,GAAG,CAAC1R,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;MAC9C,IAAIgjB,KAAK,IAAI,CAAC,EAAE;QACdtK,cAAc,CAAC9G,MAAM,CAAC5R,GAAG,CAAC;QAC1B2Y,eAAe,CAACzH,GAAG,CAAClR,GAAG,CAAC;MACzB,OAAM;QACL0Y,cAAc,CAAClJ,GAAG,CAACxP,GAAG,EAAEgjB,KAAK,CAAC;MAC/B;IACF,OAAM;MACLpJ,aAAa,CAAC5Z,GAAG,CAAC;IACnB;IACDoZ,WAAW,CAAC;MAAE9B,QAAQ,EAAE,IAAIC,GAAG,CAACpY,KAAK,CAACmY,QAAQ;IAAC,CAAE,CAAC;EACpD;EAEA,SAASiI,YAAYA,CAACvf,GAAW;IAC/B,IAAIqQ,UAAU,GAAG+H,gBAAgB,CAAC1G,GAAG,CAAC1R,GAAG,CAAC;IAC1CsD,SAAS,CAAC+M,UAAU,EAAgCrQ,mCAAK,CAAC;IAC1DqQ,UAAU,CAACgC,KAAK,EAAE;IAClB+F,gBAAgB,CAACxG,MAAM,CAAC5R,GAAG,CAAC;EAC9B;EAEA,SAASijB,gBAAgBA,CAACnI,IAAc;IAAA,4CACtBA,IAAI;MAAAoI;IAAA;MAApB,uDAAsB;QAAA,IAAbljB,GAAG;QACV,IAAIka,OAAO,GAAG4I,UAAU,CAAC9iB,GAAG,CAAC;QAC7B,IAAI8hB,WAAW,GAAGR,cAAc,CAACpH,OAAO,CAACzS,IAAI,CAAC;QAC9CtI,KAAK,CAACmY,QAAQ,CAAC9H,GAAG,CAACxP,GAAG,EAAE8hB,WAAW,CAAC;MACrC;IAAA;MAAAqB;IAAA;MAAAA;IAAA;EACH;EAEA,SAAShE,sBAAsBA;IAC7B,IAAIiE,QAAQ,GAAG,EAAE;IACjB,IAAIlE,eAAe,GAAG,KAAK;IAAA,4CACX1G,gBAAgB;MAAA6K;IAAA;MAAhC,uDAAkC;QAAA,IAAzBrjB,GAAG;QACV,IAAIka,OAAO,GAAG/a,KAAK,CAACmY,QAAQ,CAAC5F,GAAG,CAAC1R,GAAG,CAAC;QACrCsD,SAAS,CAAC4W,OAAO,EAAuBla,0BAAK,CAAC;QAC9C,IAAIka,OAAO,CAAC/a,KAAK,KAAK,SAAS,EAAE;UAC/BqZ,gBAAgB,CAAC5G,MAAM,CAAC5R,GAAG,CAAC;UAC5BojB,QAAQ,CAACliB,IAAI,CAAClB,GAAG,CAAC;UAClBkf,eAAe,GAAG,IAAI;QACvB;MACF;IAAA;MAAAoE;IAAA;MAAAA;IAAA;IACDL,gBAAgB,CAACG,QAAQ,CAAC;IAC1B,OAAOlE,eAAe;EACxB;EAEA,SAASmB,oBAAoBA,CAACkD,QAAgB;IAC5C,IAAIC,UAAU,GAAG,EAAE;IAAA,4CACGjL,cAAc;MAAAkL;IAAA;MAApC,uDAAsC;QAAA;UAA5BzjB,GAAG;UAAEqG,EAAE;QACf,IAAIA,EAAE,GAAGkd,QAAQ,EAAE;UACjB,IAAIrJ,OAAO,GAAG/a,KAAK,CAACmY,QAAQ,CAAC5F,GAAG,CAAC1R,GAAG,CAAC;UACrCsD,SAAS,CAAC4W,OAAO,EAAuBla,0BAAK,CAAC;UAC9C,IAAIka,OAAO,CAAC/a,KAAK,KAAK,SAAS,EAAE;YAC/BogB,YAAY,CAACvf,GAAG,CAAC;YACjBuY,cAAc,CAAC3G,MAAM,CAAC5R,GAAG,CAAC;YAC1BwjB,UAAU,CAACtiB,IAAI,CAAClB,GAAG,CAAC;UACrB;QACF;MACF;IAAA;MAAA0jB;IAAA;MAAAA;IAAA;IACDT,gBAAgB,CAACO,UAAU,CAAC;IAC5B,OAAOA,UAAU,CAAClkB,MAAM,GAAG,CAAC;EAC9B;EAEA,SAASqkB,UAAUA,CAAC3jB,GAAW,EAAE4B,EAAmB;IAClD,IAAIgiB,OAAO,GAAYzkB,KAAK,CAACqY,QAAQ,CAAC9F,GAAG,CAAC1R,GAAG,CAAC,IAAIwU,YAAY;IAE9D,IAAIqE,gBAAgB,CAACnH,GAAG,CAAC1R,GAAG,CAAC,KAAK4B,EAAE,EAAE;MACpCiX,gBAAgB,CAACrJ,GAAG,CAACxP,GAAG,EAAE4B,EAAE,CAAC;IAC9B;IAED,OAAOgiB,OAAO;EAChB;EAEA,SAAS/J,aAAaA,CAAC7Z,GAAW;IAChCb,KAAK,CAACqY,QAAQ,CAAC5F,MAAM,CAAC5R,GAAG,CAAC;IAC1B6Y,gBAAgB,CAACjH,MAAM,CAAC5R,GAAG,CAAC;EAC9B;EAEA;EACA,SAASmZ,aAAaA,CAACnZ,GAAW,EAAE6jB,UAAmB;IACrD,IAAID,OAAO,GAAGzkB,KAAK,CAACqY,QAAQ,CAAC9F,GAAG,CAAC1R,GAAG,CAAC,IAAIwU,YAAY;IAErD;IACA;IACAlR,SAAS,CACNsgB,OAAO,CAACzkB,KAAK,KAAK,WAAW,IAAI0kB,UAAU,CAAC1kB,KAAK,KAAK,SAAS,IAC7DykB,OAAO,CAACzkB,KAAK,KAAK,SAAS,IAAI0kB,UAAU,CAAC1kB,KAAK,KAAK,SAAU,IAC9DykB,OAAO,CAACzkB,KAAK,KAAK,SAAS,IAAI0kB,UAAU,CAAC1kB,KAAK,KAAK,YAAa,IACjEykB,OAAO,CAACzkB,KAAK,KAAK,SAAS,IAAI0kB,UAAU,CAAC1kB,KAAK,KAAK,WAAY,IAChEykB,OAAO,CAACzkB,KAAK,KAAK,YAAY,IAAI0kB,UAAU,CAAC1kB,KAAK,KAAK,WAAY,yCACjCykB,OAAO,CAACzkB,KAAK,YAAO0kB,UAAU,CAAC1kB,KAAO,CAC5E;IAED,IAAIqY,QAAQ,GAAG,IAAID,GAAG,CAACpY,KAAK,CAACqY,QAAQ,CAAC;IACtCA,QAAQ,CAAChI,GAAG,CAACxP,GAAG,EAAE6jB,UAAU,CAAC;IAC7BzK,WAAW,CAAC;MAAE5B;IAAQ,CAAE,CAAC;EAC3B;EAEA,SAASyB,qBAAqBA,QAQ7B;IAAA,IAPCC,eAAe,GAOhBtI,MAPCsI,eAAe;MACf9X,YAAY,GAMbwP,MANCxP,YAAY;MACZ4V,gBAKDpG,MALCoG;IAMA,IAAI6B,gBAAgB,CAACjG,IAAI,KAAK,CAAC,EAAE;MAC/B;IACD;IAED;IACA;IACA,IAAIiG,gBAAgB,CAACjG,IAAI,GAAG,CAAC,EAAE;MAC7BxS,OAAO,CAAC,KAAK,EAAE,8CAA8C,CAAC;IAC/D;IAED,IAAItB,OAAO,GAAGiR,KAAK,CAACtB,IAAI,CAACoK,gBAAgB,CAAC/Z,OAAO,EAAE,CAAC;IACpD,8BAAoCA,OAAO,CAACA,OAAO,CAACQ,MAAM,GAAG,CAAC,CAAC;MAA1D0Z,UAAU;MAAE8K,eAAe;IAChC,IAAIF,OAAO,GAAGzkB,KAAK,CAACqY,QAAQ,CAAC9F,GAAG,CAACsH,UAAU,CAAC;IAE5C,IAAI4K,OAAO,IAAIA,OAAO,CAACzkB,KAAK,KAAK,YAAY,EAAE;MAC7C;MACA;MACA;IACD;IAED;IACA;IACA,IAAI2kB,eAAe,CAAC;MAAE5K,eAAe,EAAfA,eAAe;MAAE9X,YAAY,EAAZA,YAAY;MAAE4V;IAAe,EAAC,EAAE;MACrE,OAAOgC,UAAU;IAClB;EACH;EAEA,SAAS6D,qBAAqBA,CAC5BkH,SAAwC;IAExC,IAAIC,iBAAiB,GAAa,EAAE;IACpCpL,eAAe,CAACtQ,OAAO,CAAC,UAAC2b,GAAG,EAAE9F,OAAO,EAAI;MACvC,IAAI,CAAC4F,SAAS,IAAIA,SAAS,CAAC5F,OAAO,CAAC,EAAE;QACpC;QACA;QACA;QACA8F,GAAG,CAAC7R,MAAM,EAAE;QACZ4R,iBAAiB,CAAC9iB,IAAI,CAACid,OAAO,CAAC;QAC/BvF,eAAe,CAAChH,MAAM,CAACuM,OAAO,CAAC;MAChC;IACH,CAAC,CAAC;IACF,OAAO6F,iBAAiB;EAC1B;EAEA;EACA;EACA,SAASE,uBAAuBA,CAC9BC,SAAiC,EACjCC,WAAsC,EACtCC,MAAwC;IAExCvO,oBAAoB,GAAGqO,SAAS;IAChCnO,iBAAiB,GAAGoO,WAAW;IAC/BrO,uBAAuB,GAAGsO,MAAM,IAAI,IAAI;IAExC;IACA;IACA;IACA,IAAI,CAACpO,qBAAqB,IAAI9W,KAAK,CAAC8X,UAAU,KAAKhD,eAAe,EAAE;MAClEgC,qBAAqB,GAAG,IAAI;MAC5B,IAAIqO,CAAC,GAAGnJ,sBAAsB,CAAChc,KAAK,CAACc,QAAQ,EAAEd,KAAK,CAAC8H,OAAO,CAAC;MAC7D,IAAIqd,CAAC,IAAI,IAAI,EAAE;QACblL,WAAW,CAAC;UAAElC,qBAAqB,EAAEoN;QAAC,CAAE,CAAC;MAC1C;IACF;IAED,OAAO,YAAK;MACVxO,oBAAoB,GAAG,IAAI;MAC3BE,iBAAiB,GAAG,IAAI;MACxBD,uBAAuB,GAAG,IAAI;KAC/B;EACH;EAEA,SAASwO,YAAYA,CAACtkB,QAAkB,EAAEgH,OAAiC;IACzE,IAAI8O,uBAAuB,EAAE;MAC3B,IAAI/V,GAAG,GAAG+V,uBAAuB,CAC/B9V,QAAQ,EACRgH,OAAO,CAAClI,GAAG,CAAE0X,WAAC;QAAA,OAAKpP,0BAA0B,CAACoP,CAAC,EAAEtX,KAAK,CAACoI,UAAU,CAAC;MAAA,EAAC,CACpE;MACD,OAAOvH,GAAG,IAAIC,QAAQ,CAACD,GAAG;IAC3B;IACD,OAAOC,QAAQ,CAACD,GAAG;EACrB;EAEA,SAASuc,kBAAkBA,CACzBtc,QAAkB,EAClBgH,OAAiC;IAEjC,IAAI6O,oBAAoB,IAAIE,iBAAiB,EAAE;MAC7C,IAAIhW,GAAG,GAAGukB,YAAY,CAACtkB,QAAQ,EAAEgH,OAAO,CAAC;MACzC6O,oBAAoB,CAAC9V,GAAG,CAAC,GAAGgW,iBAAiB,EAAE;IAChD;EACH;EAEA,SAASmF,sBAAsBA,CAC7Blb,QAAkB,EAClBgH,OAAiC;IAEjC,IAAI6O,oBAAoB,EAAE;MACxB,IAAI9V,GAAG,GAAGukB,YAAY,CAACtkB,QAAQ,EAAEgH,OAAO,CAAC;MACzC,IAAIqd,CAAC,GAAGxO,oBAAoB,CAAC9V,GAAG,CAAC;MACjC,IAAI,OAAOskB,CAAC,KAAK,QAAQ,EAAE;QACzB,OAAOA,CAAC;MACT;IACF;IACD,OAAO,IAAI;EACb;EAEA,SAASE,kBAAkBA,CAACC,SAAoC;IAC9Dte,QAAQ,GAAG,EAAE;IACboP,kBAAkB,GAAGxP,yBAAyB,CAC5C0e,SAAS,EACTxe,kBAAkB,EAClB7G,SAAS,EACT+G,QAAQ,CACT;EACH;EAEA4Q,MAAM,GAAG;IACP,IAAInQ,QAAQA;MACV,OAAOA,QAAQ;KAChB;IACD,IAAI4O,MAAMA;MACR,OAAOA,MAAM;KACd;IACD,IAAIrW,KAAKA;MACP,OAAOA,KAAK;KACb;IACD,IAAI6G,MAAMA;MACR,OAAOsP,UAAU;KAClB;IACD,IAAIvT,MAAMA;MACR,OAAOkT,YAAY;KACpB;IACD8D,UAAU,EAAVA,UAAU;IACV7G,SAAS,EAATA,SAAS;IACTgS,uBAAuB,EAAvBA,uBAAuB;IACvB9I,QAAQ,EAARA,QAAQ;IACRoF,KAAK,EAALA,KAAK;IACLtE,UAAU,EAAVA,UAAU;IACV;IACA;IACA1b,UAAU,EAAGT,sBAAM;MAAA,OAAKmP,IAAI,CAACxO,OAAO,CAACF,UAAU,CAACT,EAAE,CAAC;IAAA;IACnDc,cAAc,EAAGd,0BAAM;MAAA,OAAKmP,IAAI,CAACxO,OAAO,CAACG,cAAc,CAACd,EAAE,CAAC;IAAA;IAC3D+iB,UAAU,EAAVA,UAAU;IACVlJ,aAAa,EAAEmJ,2BAA2B;IAC1CrJ,OAAO,EAAPA,OAAO;IACPiK,UAAU,EAAVA,UAAU;IACV9J,aAAa,EAAbA,aAAa;IACb6K,yBAAyB,EAAEtM,gBAAgB;IAC3CuM,wBAAwB,EAAE/L,eAAe;IACzC;IACA;IACA4L;GACD;EAED,OAAOzN,MAAM;AACf;AACA;AAEA;AACA;AACA;IAEa6N,sBAAsB,GAAGC,MAAM,CAAC,UAAU;AAmBvC,4BAAmBC,CACjC9e,MAA6B,EAC7B+T,IAAiC;EAEjCzW,SAAS,CACP0C,MAAM,CAAC1G,MAAM,GAAG,CAAC,EACjB,kEAAkE,CACnE;EAED,IAAI6G,QAAQ,GAAkB,EAAE;EAChC,IAAIS,QAAQ,GAAG,CAACmT,IAAI,GAAGA,IAAI,CAACnT,QAAQ,GAAG,IAAI,KAAK,GAAG;EACnD,IAAIX,kBAA8C;EAClD,IAAI8T,IAAI,YAAJA,IAAI,CAAE9T,kBAAkB,EAAE;IAC5BA,kBAAkB,GAAG8T,IAAI,CAAC9T,kBAAkB;EAC7C,OAAM,IAAI8T,IAAI,YAAJA,IAAI,CAAE1E,mBAAmB,EAAE;IACpC;IACA,IAAIA,mBAAmB,GAAG0E,IAAI,CAAC1E,mBAAmB;IAClDpP,kBAAkB,GAAIH,iCAAK;MAAA,OAAM;QAC/B+O,gBAAgB,EAAEQ,mBAAmB,CAACvP,KAAK;MAC5C;IAAA,CAAC;EACH,OAAM;IACLG,kBAAkB,GAAG2O,yBAAyB;EAC/C;EACD;EACA,IAAIY,MAAM;IACRvH,oBAAoB,EAAE;EAAK,GACvB8L,IAAI,GAAGA,IAAI,CAACvE,MAAM,GAAG,IAAI,CAC9B;EAED,IAAIF,UAAU,GAAGvP,yBAAyB,CACxCC,MAAM,EACNC,kBAAkB,EAClB7G,SAAS,EACT+G,QAAQ,CACT;EAED;;;;;;;;;;;;;;;;;;AAkBG;EAlBH,SAmBe4e,KAAKA;IAAAA;EAAAA;EA2DpB;;;;;;;;;;;;;;;;;;;AAmBG;EAnBH;IAAAC,kEA3DA,mBACEjI,OAAgB;MAAA;MAAA;QAAA;UAAA;YAAA;cAAAkI,4BACmC,EAAE,WAAnDC;cAEEjiB,GAAG,GAAG,IAAIrC,GAAG,CAACmc,OAAO,CAAC9Z,GAAG,CAAC;cAC1Bib,MAAM,GAAGnB,OAAO,CAACmB,MAAM;cACvBje,QAAQ,GAAGC,cAAc,CAAC,EAAE,EAAEO,UAAU,CAACwC,GAAG,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC;cAC/DgE,OAAO,GAAGP,WAAW,CAAC4O,UAAU,EAAErV,QAAQ,EAAE2G,QAAQ,CAAC,EAEzD;cAAA,MACI,CAACue,aAAa,CAACjH,MAAM,CAAC,IAAIA,MAAM,KAAK,MAAM;gBAAAkH;gBAAA;cAAA;cACzCjgB,KAAK,GAAGkR,sBAAsB,CAAC,GAAG,EAAE;gBAAE6H;cAAQ,EAAC;cAAAmH,yBAEjD/O,sBAAsB,CAAChB,UAAU,CAAC,EADrBgQ,uBAAuB,0BAAhCre,OAAO,EAA2BnB;cAAAA,mCAEjC;gBACLc,QAAQ,EAARA,QAAQ;gBACR3G,QAAQ,EAARA,QAAQ;gBACRgH,OAAO,EAAEqe,uBAAuB;gBAChC/d,UAAU,EAAE,EAAE;gBACd8P,UAAU,EAAE,IAAI;gBAChBR,MAAM,sBACH/Q,KAAK,CAACO,EAAE,EAAGlB,MACb;gBACDogB,UAAU,EAAEpgB,KAAK,CAACiK,MAAM;gBACxBoW,aAAa,EAAE,EAAE;gBACjBC,aAAa,EAAE,EAAE;gBACjB7M,eAAe,EAAE;eAClB;YAAA;cAAA,IACS3R,OAAO;gBAAAme;gBAAA;cAAA;cACbjgB,OAAK,GAAGkR,sBAAsB,CAAC,GAAG,EAAE;gBAAElW,QAAQ,EAAEF,QAAQ,CAACE;cAAQ,CAAE,CAAC;cAAAulB,yBAEtEpP,sBAAsB,CAAChB,UAAU,CAAC,EADrBsH,eAAe,0BAAxB3V,OAAO,EAAmBnB;cAAAA,mCAEzB;gBACLc,QAAQ,EAARA,QAAQ;gBACR3G,QAAQ,EAARA,QAAQ;gBACRgH,OAAO,EAAE2V,eAAe;gBACxBrV,UAAU,EAAE,EAAE;gBACd8P,UAAU,EAAE,IAAI;gBAChBR,MAAM,sBACH/Q,OAAK,CAACO,EAAE,EAAGlB,QACb;gBACDogB,UAAU,EAAEpgB,OAAK,CAACiK,MAAM;gBACxBoW,aAAa,EAAE,EAAE;gBACjBC,aAAa,EAAE,EAAE;gBACjB7M,eAAe,EAAE;eAClB;YAAA;cAAAwM;cAAA,OAGgBO,SAAS,CAAC5I,OAAO,EAAE9c,QAAQ,EAAEgH,OAAO,EAAEie,cAAc,CAAC;YAAA;cAApE7b,MAAM;cAAA,KACNuc,UAAU,CAACvc,MAAM,CAAC;gBAAA+b;gBAAA;cAAA;cAAA,mCACb/b,MAAM;YAAA;cAAA,mCAMfkX;gBAAStgB,QAAQ,EAARA,QAAQ;gBAAE2G;cAAQ,GAAKyC,MAAM;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACxC;IAAA;EAAA;EAAA,SAsBewc,UAAUA;IAAAA;EAAAA;EAAAA;IAAAA,uEAAzB,mBACE9I,OAAgB;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA+I,SAGAC,oBACoC,EAAE,WAFpD5H,OAAO,UAAPA,OAAO,EACP+G;cAGEjiB,GAAG,GAAG,IAAIrC,GAAG,CAACmc,OAAO,CAAC9Z,GAAG,CAAC;cAC1Bib,MAAM,GAAGnB,OAAO,CAACmB,MAAM;cACvBje,QAAQ,GAAGC,cAAc,CAAC,EAAE,EAAEO,UAAU,CAACwC,GAAG,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC;cAC/DgE,OAAO,GAAGP,WAAW,CAAC4O,UAAU,EAAErV,QAAQ,EAAE2G,QAAQ,CAAC,EAEzD;cAAA,MACI,CAACue,aAAa,CAACjH,MAAM,CAAC,IAAIA,MAAM,KAAK,MAAM,IAAIA,MAAM,KAAK,SAAS;gBAAA8H;gBAAA;cAAA;cAAA,MAC/D3P,sBAAsB,CAAC,GAAG,EAAE;gBAAE6H;cAAM,CAAE,CAAC;YAAA;cAAA,IACnCjX,OAAO;gBAAA+e;gBAAA;cAAA;cAAA,MACX3P,sBAAsB,CAAC,GAAG,EAAE;gBAAElW,QAAQ,EAAEF,QAAQ,CAACE;cAAU,EAAC;YAAA;cAGhEmH,KAAK,GAAG6W,OAAO,GACflX,OAAO,CAACgf,IAAI,CAAExP,WAAC;gBAAA,OAAKA,CAAC,CAAC3Q,KAAK,CAACO,EAAE,KAAK8X,OAAO;cAAA,EAAC,GAC3CJ,cAAc,CAAC9W,OAAO,EAAEhH,QAAQ,CAAC;cAAA,MAEjCke,OAAO,IAAI,CAAC7W,KAAK;gBAAA0e;gBAAA;cAAA;cAAA,MACb3P,sBAAsB,CAAC,GAAG,EAAE;gBAChClW,QAAQ,EAAEF,QAAQ,CAACE,QAAQ;gBAC3Bge;cACD,EAAC;YAAA;cAAA,IACQ7W,KAAK;gBAAA0e;gBAAA;cAAA;cAAA,MAET3P,sBAAsB,CAAC,GAAG,EAAE;gBAAElW,QAAQ,EAAEF,QAAQ,CAACE;cAAU,EAAC;YAAA;cAAA6lB;cAAA,OAGjDL,SAAS,CAC1B5I,OAAO,EACP9c,QAAQ,EACRgH,OAAO,EACPie,cAAc,EACd5d,KAAK,CACN;YAAA;cANG+B,MAAM;cAAA,KAONuc,UAAU,CAACvc,MAAM,CAAC;gBAAA2c;gBAAA;cAAA;cAAA,mCACb3c,MAAM;YAAA;cAGXlE,KAAK,GAAGkE,MAAM,CAACwN,MAAM,GAAG5L,MAAM,CAACib,MAAM,CAAC7c,MAAM,CAACwN,MAAM,CAAC,CAAC,CAAC,CAAC,GAAGzX,SAAS;cAAA,MACnE+F,KAAK,KAAK/F,SAAS;gBAAA4mB;gBAAA;cAAA;cAAA,MAKf7gB,KAAK;YAAA;cAAA,KAITkE,MAAM,CAACgO,UAAU;gBAAA2O;gBAAA;cAAA;cAAA,mCACZ/a,MAAM,CAACib,MAAM,CAAC7c,MAAM,CAACgO,UAAU,CAAC,CAAC,CAAC,CAAC;YAAA;cAAA,KAGxChO,MAAM,CAAC9B,UAAU;gBAAAye;gBAAA;cAAA;cACfve,IAAI,GAAGwD,MAAM,CAACib,MAAM,CAAC7c,MAAM,CAAC9B,UAAU,CAAC,CAAC,CAAC,CAAC;cAC9C,6BAAI8B,MAAM,CAACuP,eAAe,KAAtBuN,8BAAyB7e,KAAK,CAACxB,KAAK,CAACO,EAAE,CAAC,EAAE;gBAC5CoB,IAAI,CAACmd,sBAAsB,CAAC,GAAGvb,MAAM,CAACuP,eAAe,CAACtR,KAAK,CAACxB,KAAK,CAACO,EAAE,CAAC;cACtE;cAAA,mCACMoB,IAAI;YAAA;cAAA,mCAGNrI,SAAS;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAClB;IAAA;EAAA;EAAA,SAEeumB,SAASA;IAAAA;EAAAA;EAAAA;IAAAA,sEAAxB,mBACE5I,OAAgB,EAChB9c,QAAkB,EAClBgH,OAAiC,EACjCie,cAAuB,EACvBkB,UAAmC;MAAA;MAAA;QAAA;UAAA;YAAA;cAEnC9iB,SAAS,CACPyZ,OAAO,CAACrM,MAAM,EACd,sEAAsE,CACvE;cAAA2V;cAAA,KAGK1L,gBAAgB,CAACoC,OAAO,CAACmB,MAAM,CAACpR,WAAW,EAAE,CAAC;gBAAAuZ;gBAAA;cAAA;cAAAA;cAAA,OAC7BC,MAAM,CACvBvJ,OAAO,EACP9V,OAAO,EACPmf,UAAU,IAAIrI,cAAc,CAAC9W,OAAO,EAAEhH,QAAQ,CAAC,EAC/CilB,cAAc,EACdkB,UAAU,IAAI,IAAI,CACnB;YAAA;cANG/c,OAAM;cAAA,mCAOHA,OAAM;YAAA;cAAAgd;cAAA,OAGIE,aAAa,CAC9BxJ,OAAO,EACP9V,OAAO,EACPie,cAAc,EACdkB,UAAU,CACX;YAAA;cALG/c,MAAM;cAAA,mCAMHuc,UAAU,CAACvc,MAAM,CAAC,GACrBA,MAAM,gBAEDA,MAAM;gBACTgO,UAAU,EAAE,IAAI;gBAChBoO,aAAa,EAAE;eAChB;YAAA;cAAAY;cAAAA;cAAA,KAKDG,oBAAoB,cAAE,CAAC;gBAAAH;gBAAA;cAAA;cAAA,MACrBxiB,cAAEoa,IAAI,KAAKvY,UAAU,CAACP,KAAK;gBAAAkhB;gBAAA;cAAA;cAAA,MACvBxiB,cAAEyP,QAAQ;YAAA;cAAA,mCAEXzP,cAAEyP,QAAQ;YAAA;cAAA,KAIfmT,kBAAkB,cAAE,CAAC;gBAAAJ;gBAAA;cAAA;cAAA;YAAA;cAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAK7B;IAAA;EAAA;EAAA,SAEeC,MAAMA;IAAAA;EAAAA;EAAAA;IAAAA,mEAArB,mBACEvJ,OAAgB,EAChB9V,OAAiC,EACjC6W,WAAmC,EACnCoH,cAAuB,EACvBwB,cAAuB;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,MAInB,CAAC5I,WAAW,CAAChY,KAAK,CAACvG,MAAM,IAAI,CAACue,WAAW,CAAChY,KAAK,CAAC4Q,IAAI;gBAAAiQ;gBAAA;cAAA;cAClDxhB,KAAK,GAAGkR,sBAAsB,CAAC,GAAG,EAAE;gBACtC6H,MAAM,EAAEnB,OAAO,CAACmB,MAAM;gBACtB/d,QAAQ,EAAE,IAAIS,GAAG,CAACmc,OAAO,CAAC9Z,GAAG,CAAC,CAAC9C,QAAQ;gBACvCge,OAAO,EAAEL,WAAW,CAAChY,KAAK,CAACO;cAC5B,EAAC;cAAA,KACEqgB,cAAc;gBAAAC;gBAAA;cAAA;cAAA,MACVxhB,KAAK;YAAA;cAEbkE,MAAM,GAAG;gBACP4U,IAAI,EAAEvY,UAAU,CAACP,KAAK;gBACtBA;eACD;cAAAwhB;cAAA;YAAA;cAAAA;cAAA,OAEcvI,kBAAkB,CAC/B,QAAQ,EACRrB,OAAO,EACPe,WAAW,EACX7W,OAAO,EACPd,QAAQ,EACRF,kBAAkB,EAClBW,QAAQ,EACR4O,MAAM,CAACvH,oBAAoB,EAC3B;gBAAE2Y,eAAe,EAAE,IAAI;gBAAEF,cAAc,EAAdA,cAAc;gBAAExB;cAAc,CAAE,CAC1D;YAAA;cAVD7b,MAAM;cAAA,KAYF0T,OAAO,CAACrM,MAAM,CAACiB,OAAO;gBAAAgV;gBAAA;cAAA;cACpBzI,MAAM,GAAGwI,cAAc,GAAG,YAAY,GAAG,OAAO;cAAA,MAC9C,IAAIjjB,KAAK,CACVya,MAAM,GAAoBnB,6BAAO,CAACmB,MAAM,GAAInB,aAAO,CAAC9Z,GAAK,CAC7D;YAAA;cAAA,KAIDob,gBAAgB,CAAChV,MAAM,CAAC;gBAAAsd;gBAAA;cAAA;cAAA,MAKpB,IAAIlX,QAAQ,CAAC,IAAI,EAAE;gBACvBL,MAAM,EAAE/F,MAAM,CAAC+F,MAAM;gBACrBC,OAAO,EAAE;kBACPwX,QAAQ,EAAExd,MAAM,CAACpJ;gBAClB;cACF,EAAC;YAAA;cAAA,KAGAwe,gBAAgB,CAACpV,MAAM,CAAC;gBAAAsd;gBAAA;cAAA;cACtBxhB,OAAK,GAAGkR,sBAAsB,CAAC,GAAG,EAAE;gBAAE4H,IAAI,EAAE;cAAgB,EAAC;cAAA,KAC7DyI,cAAc;gBAAAC;gBAAA;cAAA;cAAA,MACVxhB,OAAK;YAAA;cAEbkE,MAAM,GAAG;gBACP4U,IAAI,EAAEvY,UAAU,CAACP,KAAK;gBACtBA;eACD;YAAA;cAAA,KAGCuhB,cAAc;gBAAAC;gBAAA;cAAA;cAAA,KAGZpI,aAAa,CAAClV,MAAM,CAAC;gBAAAsd;gBAAA;cAAA;cAAA,MACjBtd,MAAM,CAAClE,KAAK;YAAA;cAAA,mCAGb;gBACL8B,OAAO,EAAE,CAAC6W,WAAW,CAAC;gBACtBvW,UAAU,EAAE,EAAE;gBACd8P,UAAU,sBAAKyG,WAAW,CAAChY,KAAK,CAACO,EAAE,EAAGgD,MAAM,CAAC5B,KAAM;gBACnDoP,MAAM,EAAE,IAAI;gBACZ;gBACA;gBACA0O,UAAU,EAAE,GAAG;gBACfC,aAAa,EAAE,EAAE;gBACjBC,aAAa,EAAE,EAAE;gBACjB7M,eAAe,EAAE;eAClB;YAAA;cAAA,KAGC2F,aAAa,CAAClV,MAAM,CAAC;gBAAAsd;gBAAA;cAAA;cACvB;cACA;cACInI,aAAa,GAAGvB,mBAAmB,CAAChW,OAAO,EAAE6W,WAAW,CAAChY,KAAK,CAACO,EAAE,CAAC;cAAAsgB;cAAA,OAClDJ,aAAa,CAC/BxJ,OAAO,EACP9V,OAAO,EACPie,cAAc,EACd9lB,SAAS,sBAENof,aAAa,CAAC1Y,KAAK,CAACO,EAAE,EAAGgD,MAAM,CAAClE,MAClC,CACF;YAAA;cARG2hB,UAAO;cAAA,mCAWXvG,aACKuG,UAAO;gBACVvB,UAAU,EAAE7R,oBAAoB,CAACrK,MAAM,CAAClE,KAAK,CAAC,GAC1CkE,MAAM,CAAClE,KAAK,CAACiK,MAAM,GACnB,GAAG;gBACPiI,UAAU,EAAE,IAAI;gBAChBoO,aAAa,eACPpc,MAAM,CAACgG,OAAO,uBAAMyO,WAAW,CAAChY,KAAK,CAACO,EAAE,EAAGgD,MAAM,CAACgG,WAAY,EAAE;cACrE;YAAA;cAIL;cACI0X,aAAa,GAAG,IAAIvJ,OAAO,CAACT,OAAO,CAAC9Z,GAAG,EAAE;gBAC3CoM,OAAO,EAAE0N,OAAO,CAAC1N,OAAO;gBACxB+D,QAAQ,EAAE2J,OAAO,CAAC3J,QAAQ;gBAC1B1C,MAAM,EAAEqM,OAAO,CAACrM;cACjB,EAAC;cAAAiW;cAAA,OACkBJ,aAAa,CAACQ,aAAa,EAAE9f,OAAO,EAAEie,cAAc,CAAC;YAAA;cAArE4B,OAAO;cAAA,mCAEXvG,SACKuG,WAAO,EAENzd,MAAM,CAACkc,UAAU,GAAG;gBAAEA,UAAU,EAAElc,MAAM,CAACkc;eAAY,GAAG,EAAE;gBAC9DlO,UAAU,sBACPyG,WAAW,CAAChY,KAAK,CAACO,EAAE,EAAGgD,MAAM,CAAC5B,KAChC;gBACDge,aAAa,eACPpc,MAAM,CAACgG,OAAO,uBAAMyO,WAAW,CAAChY,KAAK,CAACO,EAAE,EAAGgD,MAAM,CAACgG,WAAY,EAAE;cACrE;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAEL;IAAA;EAAA;EAAA,SAEekX,aAAaA;IAAAA;EAAAA;EAAAA;IAAAA,0EAA5B,mBACExJ,OAAgB,EAChB9V,OAAiC,EACjCie,cAAuB,EACvBkB,UAAmC,EACnC9I,kBAA8B;MAAA;MAAA;QAAA;UAAA;YAAA;cAQ1BoJ,cAAc,GAAGN,UAAU,IAAI,IAAI,EAEvC;cAAA,MAEEM,cAAc,IACd,EAACN,UAAU,IAAVA,kBAAU,CAAEtgB,KAAK,CAAC8Q,MAAM,CACzB,MAACwP,UAAU,IAAVA,kBAAU,CAAEtgB,KAAK,CAAC4Q,IAAI,CACvB;gBAAAsQ;gBAAA;cAAA;cAAA,MACM3Q,sBAAsB,CAAC,GAAG,EAAE;gBAChC6H,MAAM,EAAEnB,OAAO,CAACmB,MAAM;gBACtB/d,QAAQ,EAAE,IAAIS,GAAG,CAACmc,OAAO,CAAC9Z,GAAG,CAAC,CAAC9C,QAAQ;gBACvCge,OAAO,EAAEiI,UAAU,oBAAVA,UAAU,CAAEtgB,KAAK,CAACO;cAC5B,EAAC;YAAA;cAGAwa,cAAc,GAAGuF,UAAU,GAC3B,CAACA,UAAU,CAAC,GACZa,6BAA6B,CAC3BhgB,OAAO,EACPgE,MAAM,CAAC6P,IAAI,CAACwC,kBAAkB,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CACzC;cACDyB,aAAa,GAAG8B,cAAc,CAACxW,MAAM,CACtCoM,WAAC;gBAAA,OAAKA,CAAC,CAAC3Q,KAAK,CAAC8Q,MAAM,IAAIH,CAAC,CAAC3Q,KAAK,CAAC4Q,IAAI;cAAA,EACtC,EAED;cAAA,MACIqI,aAAa,CAACzf,MAAM,KAAK,CAAC;gBAAA0nB;gBAAA;cAAA;cAAA,mCACrB;gBACL/f,OAAO,EAAPA,OAAO;gBACP;gBACAM,UAAU,EAAEN,OAAO,CAACqD,MAAM,CACxB,UAACqG,GAAG,EAAE8F,CAAC;kBAAA,OAAKxL,MAAM,CAAC3F,MAAM,CAACqL,GAAG,sBAAK8F,CAAC,CAAC3Q,KAAK,CAACO,EAAE,EAAG,KAAM,CAAC;gBAAA,GACtD,EAAE,CACH;gBACDwQ,MAAM,EAAEyG,kBAAkB,IAAI,IAAI;gBAClCiI,UAAU,EAAE,GAAG;gBACfC,aAAa,EAAE,EAAE;gBACjB5M,eAAe,EAAE;eAClB;YAAA;cAAAoO;cAAA,OAGiB7W,OAAO,CAACyS,GAAG,oBAC1B7D,aAAa,CAAChgB,GAAG,CAAEuI,eAAK;gBAAA,OACzB8W,kBAAkB,CAChB,QAAQ,EACRrB,OAAO,EACPzV,KAAK,EACLL,OAAO,EACPd,QAAQ,EACRF,kBAAkB,EAClBW,QAAQ,EACR4O,MAAM,CAACvH,oBAAoB,EAC3B;kBAAE2Y,eAAe,EAAE,IAAI;kBAAEF,cAAc,EAAdA,cAAc;kBAAExB;iBAAgB,CAC1D;cAAA,EACF,CACF,CAAC;YAAA;cAdEtF,OAAO;cAAA,KAgBP7C,OAAO,CAACrM,MAAM,CAACiB,OAAO;gBAAAqV;gBAAA;cAAA;cACpB9I,MAAM,GAAGwI,cAAc,GAAG,YAAY,GAAG,OAAO;cAAA,MAC9C,IAAIjjB,KAAK,CACVya,MAAM,GAAoBnB,6BAAO,CAACmB,MAAM,GAAInB,aAAO,CAAC9Z,GAAK,CAC7D;YAAA;cAGH;cACI2V,eAAe,GAAG,IAAIrB,GAAG,EAAwB;cACjDuP,OAAO,GAAGI,sBAAsB,CAClCjgB,OAAO,EACP8X,aAAa,EACba,OAAO,EACPtC,kBAAkB,EAClB1E,eAAe,CAChB,EAED;cACIuO,eAAe,GAAG,IAAIvhB,GAAG,CAC3BmZ,aAAa,CAAChgB,GAAG,CAAEuI,eAAK;gBAAA,OAAKA,KAAK,CAACxB,KAAK,CAACO,EAAE;cAAA,EAAC,CAC7C;cACDY,OAAO,CAACqB,OAAO,CAAEhB,eAAK,EAAI;gBACxB,IAAI,CAAC6f,eAAe,CAAC5X,GAAG,CAACjI,KAAK,CAACxB,KAAK,CAACO,EAAE,CAAC,EAAE;kBACxCygB,OAAO,CAACvf,UAAU,CAACD,KAAK,CAACxB,KAAK,CAACO,EAAE,CAAC,GAAG,IAAI;gBAC1C;cACH,CAAC,CAAC;cAAA,mCAEFka,aACKuG,OAAO;gBACV7f,OAAO,EAAPA,OAAO;gBACP2R,eAAe,EACbA,eAAe,CAAChG,IAAI,GAAG,CAAC,GACpB3H,MAAM,CAACmc,WAAW,CAACxO,eAAe,CAAC9Z,OAAO,EAAE,CAAC,GAC7C;cAAI;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAEd;IAAA;EAAA;EAEA,OAAO;IACLwW,UAAU,EAAVA,UAAU;IACVyP,KAAK,EAALA,KAAK;IACLc;GACD;AACH;AAEA;AAEA;AACA;AACA;AAEA;;;AAGG;SACawB,yBAAyBA,CACvCrhB,MAAiC,EACjC8gB,OAA6B,EAC7B3hB,KAAU;EAEV,IAAImiB,UAAU,gBACTR,OAAO;IACVvB,UAAU,EAAE,GAAG;IACf1O,MAAM,sBACHiQ,OAAO,CAACS,0BAA0B,IAAIvhB,MAAM,CAAC,CAAC,CAAC,CAACK,EAAE,EAAGlB;GAEzD;EACD,OAAOmiB,UAAU;AACnB;AAEA,SAASE,sBAAsBA,CAC7BzN,IAAgC;EAEhC,OACEA,IAAI,IAAI,IAAI,KACV,UAAU,IAAIA,IAAI,IAAIA,IAAI,CAAC1F,QAAQ,IAAI,IAAI,IAC1C,MAAM,IAAI0F,IAAI,IAAIA,IAAI,CAAC0N,IAAI,KAAKroB,SAAU,CAAC;AAElD;AAEA,SAASoc,WAAWA,CAClBvb,QAAc,EACdgH,OAAiC,EACjCL,QAAgB,EAChB8gB,eAAwB,EACxB3nB,EAAa,EACbkO,oBAA6B,EAC7BwN,WAAoB,EACpBC,QAA8B;EAE9B,IAAIiM,iBAA2C;EAC/C,IAAIC,gBAAoD;EACxD,IAAInM,WAAW,EAAE;IACf;IACA;IACAkM,iBAAiB,GAAG,EAAE;IAAA,4CACJ1gB,OAAO;MAAA4gB;IAAA;MAAzB,uDAA2B;QAAA,IAAlBvgB,KAAK;QACZqgB,iBAAiB,CAACzmB,IAAI,CAACoG,KAAK,CAAC;QAC7B,IAAIA,KAAK,CAACxB,KAAK,CAACO,EAAE,KAAKoV,WAAW,EAAE;UAClCmM,gBAAgB,GAAGtgB,KAAK;UACxB;QACD;MACF;IAAA;MAAAwgB;IAAA;MAAAA;IAAA;EACF,OAAM;IACLH,iBAAiB,GAAG1gB,OAAO;IAC3B2gB,gBAAgB,GAAG3gB,OAAO,CAACA,OAAO,CAAC3H,MAAM,GAAG,CAAC,CAAC;EAC/C;EAED;EACA,IAAIwB,IAAI,GAAGqN,SAAS,CAClBpO,EAAE,GAAGA,EAAE,GAAG,GAAG,EACbiO,mBAAmB,CAAC2Z,iBAAiB,EAAE1Z,oBAAoB,CAAC,EAC5DpH,aAAa,CAAC5G,QAAQ,CAACE,QAAQ,EAAEyG,QAAQ,CAAC,IAAI3G,QAAQ,CAACE,QAAQ,EAC/Dub,QAAQ,KAAK,MAAM,CACpB;EAED;EACA;EACA;EACA,IAAI3b,EAAE,IAAI,IAAI,EAAE;IACde,IAAI,CAACE,MAAM,GAAGf,QAAQ,CAACe,MAAM;IAC7BF,IAAI,CAACG,IAAI,GAAGhB,QAAQ,CAACgB,IAAI;EAC1B;EAED;EACA,IACE,CAAClB,EAAE,IAAI,IAAI,IAAIA,EAAE,KAAK,EAAE,IAAIA,EAAE,KAAK,GAAG,KACtC6nB,gBAAgB,IAChBA,gBAAgB,CAAC9hB,KAAK,CAAC7G,KAAK,IAC5B,CAAC8oB,kBAAkB,CAACjnB,IAAI,CAACE,MAAM,CAAC,EAChC;IACAF,IAAI,CAACE,MAAM,GAAGF,IAAI,CAACE,MAAM,GACrBF,IAAI,CAACE,MAAM,CAACO,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,GACrC,QAAQ;EACb;EAED;EACA;EACA;EACA;EACA,IAAImmB,eAAe,IAAI9gB,QAAQ,KAAK,GAAG,EAAE;IACvC9F,IAAI,CAACX,QAAQ,GACXW,IAAI,CAACX,QAAQ,KAAK,GAAG,GAAGyG,QAAQ,GAAGqB,SAAS,CAAC,CAACrB,QAAQ,EAAE9F,IAAI,CAACX,QAAQ,CAAC,CAAC;EAC1E;EAED,OAAOM,UAAU,CAACK,IAAI,CAAC;AACzB;AAEA;AACA;AACA,SAAS8a,wBAAwBA,CAC/BoM,mBAA4B,EAC5BC,SAAkB,EAClBnnB,IAAY,EACZiZ,IAAiC;EAMjC;EACA,IAAI,CAACA,IAAI,IAAI,CAACyN,sBAAsB,CAACzN,IAAI,CAAC,EAAE;IAC1C,OAAO;MAAEjZ;KAAM;EAChB;EAED,IAAIiZ,IAAI,CAAC7F,UAAU,IAAI,CAACiR,aAAa,CAACpL,IAAI,CAAC7F,UAAU,CAAC,EAAE;IACtD,OAAO;MACLpT,IAAI,EAAJA,IAAI;MACJqE,KAAK,EAAEkR,sBAAsB,CAAC,GAAG,EAAE;QAAE6H,MAAM,EAAEnE,IAAI,CAAC7F;OAAY;KAC/D;EACF;EAED,IAAIgU,mBAAmB,GAAGA,SAAtBA,mBAAmBA;IAAA,OAAU;MAC/BpnB,IAAI,EAAJA,IAAI;MACJqE,KAAK,EAAEkR,sBAAsB,CAAC,GAAG,EAAE;QAAE4H,IAAI,EAAE;OAAgB;IAC5D;EAAA,CAAC;EAEF;EACA,IAAIkK,aAAa,GAAGpO,IAAI,CAAC7F,UAAU,IAAI,KAAK;EAC5C,IAAIA,UAAU,GAAG8T,mBAAmB,GAC/BG,aAAa,CAACC,WAAW,EAAoB,GAC7CD,aAAa,CAACrb,WAAW,EAAiB;EAC/C,IAAIqH,UAAU,GAAGkU,iBAAiB,CAACvnB,IAAI,CAAC;EAExC,IAAIiZ,IAAI,CAAC0N,IAAI,KAAKroB,SAAS,EAAE;IAC3B,IAAI2a,IAAI,CAAC3F,WAAW,KAAK,YAAY,EAAE;MACrC;MACA,IAAI,CAACuG,gBAAgB,CAACzG,UAAU,CAAC,EAAE;QACjC,OAAOgU,mBAAmB,EAAE;MAC7B;MAED,IAAI5T,IAAI,GACN,OAAOyF,IAAI,CAAC0N,IAAI,KAAK,QAAQ,GACzB1N,IAAI,CAAC0N,IAAI,GACT1N,IAAI,CAAC0N,IAAI,YAAYa,QAAQ,IAC7BvO,IAAI,CAAC0N,IAAI,YAAYc,eAAe;MACpC;MACAxY,KAAK,CAACtB,IAAI,CAACsL,IAAI,CAAC0N,IAAI,CAAC3oB,OAAO,EAAE,CAAC,CAACwL,MAAM,CACpC,UAACqG,GAAG;QAAA,4BAAekC;UAAZxN,IAAI;UAAE9B,KAAK;QAAC,YAAQoN,GAAG,GAAGtL,IAAI,SAAI9B,KAAK;OAAI,EAClD,EAAE,CACH,GACDiI,MAAM,CAACuO,IAAI,CAAC0N,IAAI,CAAC;MAEvB,OAAO;QACL3mB,IAAI,EAAJA,IAAI;QACJ+a,UAAU,EAAE;UACV3H,UAAU,EAAVA,UAAU;UACVC,UAAU,EAAVA,UAAU;UACVC,WAAW,EAAE2F,IAAI,CAAC3F,WAAW;UAC7BC,QAAQ,EAAEjV,SAAS;UACnB6P,IAAI,EAAE7P,SAAS;UACfkV;QACD;OACF;IACF,OAAM,IAAIyF,IAAI,CAAC3F,WAAW,KAAK,kBAAkB,EAAE;MAClD;MACA,IAAI,CAACuG,gBAAgB,CAACzG,UAAU,CAAC,EAAE;QACjC,OAAOgU,mBAAmB,EAAE;MAC7B;MAED,IAAI;QACF,IAAIjZ,KAAI,GACN,OAAO8K,IAAI,CAAC0N,IAAI,KAAK,QAAQ,GAAGnnB,IAAI,CAACkoB,KAAK,CAACzO,IAAI,CAAC0N,IAAI,CAAC,GAAG1N,IAAI,CAAC0N,IAAI;QAEnE,OAAO;UACL3mB,IAAI,EAAJA,IAAI;UACJ+a,UAAU,EAAE;YACV3H,UAAU,EAAVA,UAAU;YACVC,UAAU,EAAVA,UAAU;YACVC,WAAW,EAAE2F,IAAI,CAAC3F,WAAW;YAC7BC,QAAQ,EAAEjV,SAAS;YACnB6P,IAAI,EAAJA,KAAI;YACJqF,IAAI,EAAElV;UACP;SACF;OACF,CAAC,OAAOyE,CAAC,EAAE;QACV,OAAOqkB,mBAAmB,EAAE;MAC7B;IACF;EACF;EAED5kB,SAAS,CACP,OAAOglB,QAAQ,KAAK,UAAU,EAC9B,+CAA+C,CAChD;EAED,IAAIG,YAA6B;EACjC,IAAIpU,QAAkB;EAEtB,IAAI0F,IAAI,CAAC1F,QAAQ,EAAE;IACjBoU,YAAY,GAAGC,6BAA6B,CAAC3O,IAAI,CAAC1F,QAAQ,CAAC;IAC3DA,QAAQ,GAAG0F,IAAI,CAAC1F,QAAQ;EACzB,OAAM,IAAI0F,IAAI,CAAC0N,IAAI,YAAYa,QAAQ,EAAE;IACxCG,YAAY,GAAGC,6BAA6B,CAAC3O,IAAI,CAAC0N,IAAI,CAAC;IACvDpT,QAAQ,GAAG0F,IAAI,CAAC0N,IAAI;EACrB,OAAM,IAAI1N,IAAI,CAAC0N,IAAI,YAAYc,eAAe,EAAE;IAC/CE,YAAY,GAAG1O,IAAI,CAAC0N,IAAI;IACxBpT,QAAQ,GAAGsU,6BAA6B,CAACF,YAAY,CAAC;EACvD,OAAM,IAAI1O,IAAI,CAAC0N,IAAI,IAAI,IAAI,EAAE;IAC5BgB,YAAY,GAAG,IAAIF,eAAe,EAAE;IACpClU,QAAQ,GAAG,IAAIiU,QAAQ,EAAE;EAC1B,OAAM;IACL,IAAI;MACFG,YAAY,GAAG,IAAIF,eAAe,CAACxO,IAAI,CAAC0N,IAAI,CAAC;MAC7CpT,QAAQ,GAAGsU,6BAA6B,CAACF,YAAY,CAAC;KACvD,CAAC,OAAO5kB,CAAC,EAAE;MACV,OAAOqkB,mBAAmB,EAAE;IAC7B;EACF;EAED,IAAIrM,UAAU,GAAe;IAC3B3H,UAAU,EAAVA,UAAU;IACVC,UAAU,EAAVA,UAAU;IACVC,WAAW,EACR2F,IAAI,IAAIA,IAAI,CAAC3F,WAAW,IAAK,mCAAmC;IACnEC,QAAQ,EAARA,QAAQ;IACRpF,IAAI,EAAE7P,SAAS;IACfkV,IAAI,EAAElV;GACP;EAED,IAAIub,gBAAgB,CAACkB,UAAU,CAAC3H,UAAU,CAAC,EAAE;IAC3C,OAAO;MAAEpT,IAAI,EAAJA,IAAI;MAAE+a;KAAY;EAC5B;EAED;EACA,IAAItX,UAAU,GAAGxD,SAAS,CAACD,IAAI,CAAC;EAChC;EACA;EACA;EACA,IAAImnB,SAAS,IAAI1jB,UAAU,CAACvD,MAAM,IAAI+mB,kBAAkB,CAACxjB,UAAU,CAACvD,MAAM,CAAC,EAAE;IAC3EynB,YAAY,CAACG,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC;EACjC;EACDrkB,UAAU,CAACvD,MAAM,SAAOynB,YAAc;EAEtC,OAAO;IAAE3nB,IAAI,EAAEL,UAAU,CAAC8D,UAAU,CAAC;IAAEsX;GAAY;AACrD;AAEA;AACA;AACA,SAASoL,6BAA6BA,CACpChgB,OAAiC,EACjC4hB,UAAmB;EAEnB,IAAIC,eAAe,GAAG7hB,OAAO;EAC7B,IAAI4hB,UAAU,EAAE;IACd,IAAI5pB,KAAK,GAAGgI,OAAO,CAAC8hB,SAAS,CAAEtS,WAAC;MAAA,OAAKA,CAAC,CAAC3Q,KAAK,CAACO,EAAE,KAAKwiB,UAAU;IAAA,EAAC;IAC/D,IAAI5pB,KAAK,IAAI,CAAC,EAAE;MACd6pB,eAAe,GAAG7hB,OAAO,CAAC7D,KAAK,CAAC,CAAC,EAAEnE,KAAK,CAAC;IAC1C;EACF;EACD,OAAO6pB,eAAe;AACxB;AAEA,SAAShK,gBAAgBA,CACvBpe,OAAgB,EAChBvB,KAAkB,EAClB8H,OAAiC,EACjC4U,UAAkC,EAClC5b,QAAkB,EAClB+oB,aAAsB,EACtB/Q,sBAA+B,EAC/BC,uBAAiC,EACjCC,qBAA+B,EAC/BQ,eAA4B,EAC5BF,gBAA6C,EAC7CD,gBAA6B,EAC7BgE,WAAsC,EACtC5V,QAA4B,EAC5ByW,iBAA6B,EAC7BtB,YAAwB;EAExB,IAAIsF,YAAY,GAAGtF,YAAY,GAC3B9Q,MAAM,CAACib,MAAM,CAACnK,YAAY,CAAC,CAAC,CAAC,CAAC,GAC9BsB,iBAAiB,GACjBpS,MAAM,CAACib,MAAM,CAAC7I,iBAAiB,CAAC,CAAC,CAAC,CAAC,GACnCje,SAAS;EAEb,IAAI6pB,UAAU,GAAGvoB,OAAO,CAACC,SAAS,CAACxB,KAAK,CAACc,QAAQ,CAAC;EAClD,IAAIipB,OAAO,GAAGxoB,OAAO,CAACC,SAAS,CAACV,QAAQ,CAAC;EAEzC;EACA,IAAI4oB,UAAU,GAAG9M,YAAY,GAAG9Q,MAAM,CAAC6P,IAAI,CAACiB,YAAY,CAAC,CAAC,CAAC,CAAC,GAAG3c,SAAS;EACxE,IAAI0pB,eAAe,GAAG7B,6BAA6B,CAAChgB,OAAO,EAAE4hB,UAAU,CAAC;EAExE,IAAIM,iBAAiB,GAAGL,eAAe,CAACze,MAAM,CAAC,UAAC/C,KAAK,EAAErI,KAAK,EAAI;IAC9D,IAAM6G,QAAUwB,KAAK,CAAfxB;IACN,IAAIA,KAAK,CAAC4Q,IAAI,EAAE;MACd;MACA,OAAO,IAAI;IACZ;IAED,IAAI5Q,KAAK,CAAC8Q,MAAM,IAAI,IAAI,EAAE;MACxB,OAAO,KAAK;IACb;IAED,IAAIoS,aAAa,EAAE;MACjB,IAAIljB,KAAK,CAAC8Q,MAAM,CAACE,OAAO,EAAE;QACxB,OAAO,IAAI;MACZ;MACD,OACE3X,KAAK,CAACoI,UAAU,CAACzB,KAAK,CAACO,EAAE,CAAC,KAAKjH,SAAS;MACxC;MACC,CAACD,KAAK,CAAC0X,MAAM,IAAI1X,KAAK,CAAC0X,MAAM,CAAC/Q,KAAK,CAACO,EAAE,CAAC,KAAKjH,SAAS,CAAC;IAE1D;IAED;IACA,IACEgqB,WAAW,CAACjqB,KAAK,CAACoI,UAAU,EAAEpI,KAAK,CAAC8H,OAAO,CAAChI,KAAK,CAAC,EAAEqI,KAAK,CAAC,IAC1D4Q,uBAAuB,CAAC9N,IAAI,CAAE/D,YAAE;MAAA,OAAKA,EAAE,KAAKiB,KAAK,CAACxB,KAAK,CAACO,EAAE;IAAA,EAAC,EAC3D;MACA,OAAO,IAAI;IACZ;IAED;IACA;IACA;IACA;IACA,IAAIgjB,iBAAiB,GAAGlqB,KAAK,CAAC8H,OAAO,CAAChI,KAAK,CAAC;IAC5C,IAAIqqB,cAAc,GAAGhiB,KAAK;IAE1B,OAAOiiB,sBAAsB,CAACjiB,KAAK;MACjC2hB,UAAU,EAAVA,UAAU;MACVO,aAAa,EAAEH,iBAAiB,CAAC7hB,MAAM;MACvC0hB,OAAO,EAAPA,OAAO;MACPO,UAAU,EAAEH,cAAc,CAAC9hB;IAAM,GAC9BqU,UAAU;MACbwF,YAAY,EAAZA,YAAY;MACZqI,uBAAuB;MACrB;MACAzR,sBAAsB;MACtB;MACAgR,UAAU,CAAC9oB,QAAQ,GAAG8oB,UAAU,CAACjoB,MAAM,KACrCkoB,OAAO,CAAC/oB,QAAQ,GAAG+oB,OAAO,CAACloB,MAAM;MACnC;MACAioB,UAAU,CAACjoB,MAAM,KAAKkoB,OAAO,CAACloB,MAAM,IACpC2oB,kBAAkB,CAACN,iBAAiB,EAAEC,cAAc;IAAC,EACxD,CAAC;EACJ,CAAC,CAAC;EAEF;EACA,IAAItK,oBAAoB,GAA0B,EAAE;EACpDvG,gBAAgB,CAACnQ,OAAO,CAAC,UAACmX,CAAC,EAAEzf,GAAG,EAAI;IAClC;IACA;IACA;IACA;IACA;IACA,IACEgpB,aAAa,IACb,CAAC/hB,OAAO,CAACmD,IAAI,CAAEqM,WAAC;MAAA,OAAKA,CAAC,CAAC3Q,KAAK,CAACO,EAAE,KAAKoZ,CAAC,CAACtB,OAAO;IAAA,EAAC,IAC9CxF,eAAe,CAACpJ,GAAG,CAACvP,GAAG,CAAC,EACxB;MACA;IACD;IAED,IAAI4pB,cAAc,GAAGljB,WAAW,CAAC8V,WAAW,EAAEiD,CAAC,CAAC3e,IAAI,EAAE8F,QAAQ,CAAC;IAE/D;IACA;IACA;IACA;IACA,IAAI,CAACgjB,cAAc,EAAE;MACnB5K,oBAAoB,CAAC9d,IAAI,CAAC;QACxBlB,GAAG,EAAHA,GAAG;QACHme,OAAO,EAAEsB,CAAC,CAACtB,OAAO;QAClBrd,IAAI,EAAE2e,CAAC,CAAC3e,IAAI;QACZmG,OAAO,EAAE,IAAI;QACbK,KAAK,EAAE,IAAI;QACX+I,UAAU,EAAE;MACb,EAAC;MACF;IACD;IAED;IACA;IACA;IACA,IAAI6J,OAAO,GAAG/a,KAAK,CAACmY,QAAQ,CAAC5F,GAAG,CAAC1R,GAAG,CAAC;IACrC,IAAI6pB,YAAY,GAAG9L,cAAc,CAAC6L,cAAc,EAAEnK,CAAC,CAAC3e,IAAI,CAAC;IAEzD,IAAIgpB,gBAAgB,GAAG,KAAK;IAC5B,IAAItR,gBAAgB,CAACjJ,GAAG,CAACvP,GAAG,CAAC,EAAE;MAC7B;MACA8pB,gBAAgB,GAAG,KAAK;KACzB,MAAM,IAAI3R,qBAAqB,CAAC3P,QAAQ,CAACxI,GAAG,CAAC,EAAE;MAC9C;MACA8pB,gBAAgB,GAAG,IAAI;IACxB,OAAM,IACL5P,OAAO,IACPA,OAAO,CAAC/a,KAAK,KAAK,MAAM,IACxB+a,OAAO,CAACzS,IAAI,KAAKrI,SAAS,EAC1B;MACA;MACA;MACA;MACA0qB,gBAAgB,GAAG7R,sBAAsB;IAC1C,OAAM;MACL;MACA;MACA6R,gBAAgB,GAAGP,sBAAsB,CAACM,YAAY;QACpDZ,UAAU,EAAVA,UAAU;QACVO,aAAa,EAAErqB,KAAK,CAAC8H,OAAO,CAAC9H,KAAK,CAAC8H,OAAO,CAAC3H,MAAM,GAAG,CAAC,CAAC,CAACkI,MAAM;QAC7D0hB,OAAO,EAAPA,OAAO;QACPO,UAAU,EAAExiB,OAAO,CAACA,OAAO,CAAC3H,MAAM,GAAG,CAAC,CAAC,CAACkI;MAAM,GAC3CqU,UAAU;QACbwF,YAAY,EAAZA,YAAY;QACZqI,uBAAuB,EAAEzR;MAAsB,EAChD,CAAC;IACH;IAED,IAAI6R,gBAAgB,EAAE;MACpB9K,oBAAoB,CAAC9d,IAAI,CAAC;QACxBlB,GAAG,EAAHA,GAAG;QACHme,OAAO,EAAEsB,CAAC,CAACtB,OAAO;QAClBrd,IAAI,EAAE2e,CAAC,CAAC3e,IAAI;QACZmG,OAAO,EAAE2iB,cAAc;QACvBtiB,KAAK,EAAEuiB,YAAY;QACnBxZ,UAAU,EAAE,IAAIC,eAAe;MAChC,EAAC;IACH;EACH,CAAC,CAAC;EAEF,OAAO,CAAC6Y,iBAAiB,EAAEnK,oBAAoB,CAAC;AAClD;AAEA,SAASoK,WAAWA,CAClBW,iBAA4B,EAC5BC,YAAoC,EACpC1iB,KAA6B;EAE7B,IAAI2iB,KAAK;EACP;EACA,CAACD,YAAY;EACb;EACA1iB,KAAK,CAACxB,KAAK,CAACO,EAAE,KAAK2jB,YAAY,CAAClkB,KAAK,CAACO,EAAE;EAE1C;EACA;EACA,IAAI6jB,aAAa,GAAGH,iBAAiB,CAACziB,KAAK,CAACxB,KAAK,CAACO,EAAE,CAAC,KAAKjH,SAAS;EAEnE;EACA,OAAO6qB,KAAK,IAAIC,aAAa;AAC/B;AAEA,SAASP,kBAAkBA,CACzBK,YAAoC,EACpC1iB,KAA6B;EAE7B,IAAI6iB,WAAW,GAAGH,YAAY,CAAClkB,KAAK,CAAChF,IAAI;EACzC;IACE;IACAkpB,YAAY,CAAC7pB,QAAQ,KAAKmH,KAAK,CAACnH,QAAQ;IACxC;IACA;IACCgqB,WAAW,IAAI,IAAI,IAClBA,WAAW,CAACjhB,QAAQ,CAAC,GAAG,CAAC,IACzB8gB,YAAY,CAACxiB,MAAM,CAAC,GAAG,CAAC,KAAKF,KAAK,CAACE,MAAM,CAAC,GAAG;EAAA;AAEnD;AAEA,SAAS+hB,sBAAsBA,CAC7Ba,WAAmC,EACnCC,GAAiC;EAEjC,IAAID,WAAW,CAACtkB,KAAK,CAACgkB,gBAAgB,EAAE;IACtC,IAAIQ,WAAW,GAAGF,WAAW,CAACtkB,KAAK,CAACgkB,gBAAgB,CAACO,GAAG,CAAC;IACzD,IAAI,OAAOC,WAAW,KAAK,SAAS,EAAE;MACpC,OAAOA,WAAW;IACnB;EACF;EAED,OAAOD,GAAG,CAACX,uBAAuB;AACpC;AAEA;;;;AAIG;AAJH,SAKea,mBAAmBA;EAAAA;AAAAA;AAAAA;EAAAA,gFAAlC,mBACEzkB,KAA8B,EAC9BG,kBAA8C,EAC9CE,QAAuB;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,IAElBL,KAAK,CAAC4Q,IAAI;cAAA8T;cAAA;YAAA;YAAA;UAAA;YAAAA;YAAA,OAIO1kB,KAAK,CAAC4Q,IAAI,EAAE;UAAA;YAA9B+T,SAAS;YAAA,IAKR3kB,KAAK,CAAC4Q,IAAI;cAAA8T;cAAA;YAAA;YAAA;UAAA;YAIXE,aAAa,GAAGvkB,QAAQ,CAACL,KAAK,CAACO,EAAE,CAAC;YACtC/C,SAAS,CAAConB,aAAa,EAAE,4BAA4B,CAAC;YAEtD;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACIC,YAAY,GAAwB,EAAE;YAC1C,KAASC,iBAAiB,IAAIH,SAAS,EAAE;cACnCI,gBAAgB,GAClBH,aAAa,CAACE,iBAA+C,CAAC;cAE5DE,2BAA2B,GAC7BD,gBAAgB,KAAKzrB,SAAS;cAC9B;cACA;cACAwrB,iBAAiB,KAAK,kBAAkB;cAE1CxqB,OAAO,CACL,CAAC0qB,2BAA2B,EAC5B,aAAUJ,aAAa,CAACrkB,EAAE,mCAA4BukB,iBAAiB,wFACQ,IACjDA,gDAAiB,yBAAoB,CACpE;cAED,IACE,CAACE,2BAA2B,IAC5B,CAACnlB,kBAAkB,CAAC4J,GAAG,CAACqb,iBAAsC,CAAC,EAC/D;gBACAD,YAAY,CAACC,iBAAiB,CAAC,GAC7BH,SAAS,CAACG,iBAA2C,CAAC;cACzD;YACF;YAED;YACA;YACA3f,MAAM,CAAC3F,MAAM,CAAColB,aAAa,EAAEC,YAAY,CAAC;YAE1C;YACA;YACA;YACA1f,MAAM,CAAC3F,MAAM,CAAColB,aAAa,WAKtBzkB,sBAAkB,CAACykB,aAAa,CAAC;cACpChU,IAAI,EAAEtX;YAAS,EAChB,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACJ;EAAA;AAAA;AAAA,SAEegf,kBAAkBA;EAAAA;AAAAA,EA4NjC;AACA;AACA;AAAA;EAAA2M,+EA9NA,mBACE9M,IAAyB,EACzBlB,OAAgB,EAChBzV,KAA6B,EAC7BL,OAAiC,EACjCd,QAAuB,EACvBF,kBAA8C,EAC9CW,QAAgB,EAChBqH,oBAA6B,EAC7B8L;IAAAA;IAAAA;MAAAA;QAAAA;UAAAA;YAIM,IAJNA;cAAAA,OAII,EAAE;YAAA;YAMFiR,UAAU,GAAIC,SAAdD,UAAUA,CAAIC,OAAwC,EAAI;cAC5D;cACA,IAAIhb,MAAkB;cACtB,IAAIC,YAAY,GAAG,IAAIC,OAAO,CAAC,UAACzD,CAAC,EAAE0D,CAAC;gBAAA,OAAMH,MAAM,GAAGG,CAAE;cAAA,EAAC;cACtD8a,QAAQ,GAAGA;gBAAAA,OAAMjb,MAAM,EAAE;cAAA;cACzB8M,OAAO,CAACrM,MAAM,CAAClL,gBAAgB,CAAC,OAAO,EAAE0lB,QAAQ,CAAC;cAClD,OAAO/a,OAAO,CAACiB,IAAI,CAAC,CAClB6Z,OAAO,CAAC;gBACNlO,OAAO,EAAPA,OAAO;gBACPvV,MAAM,EAAEF,KAAK,CAACE,MAAM;gBACpBsf,OAAO,EAAE/M,IAAI,CAACmL;eACf,CAAC,EACFhV,YAAY,CACb,CAAC;aACH;YAAAib;YAGKF,OAAO,GAAG3jB,KAAK,CAACxB,KAAK,CAACmY,IAAI,CAAC;YAAA,KAE3B3W,KAAK,CAACxB,KAAK,CAAC4Q,IAAI;cAAAyU;cAAA;YAAA;YAAA,KACdF,OAAO;cAAAE;cAAA;YAAA;YAAAA;YAAA,OAGUhb,OAAO,CAACyS,GAAG,CAAC;YAC7B;YACA;YACA;YACAoI,UAAU,CAACC,OAAO,CAAC,CAACzZ,KAAK,CAAE3N,WAAC,EAAI;cAC9BunB,YAAY,GAAGvnB,CAAC;YAClB,CAAC,CAAC,EACF0mB,mBAAmB,CAACjjB,KAAK,CAACxB,KAAK,EAAEG,kBAAkB,EAAEE,QAAQ,CAAC,CAC/D,CAAC;UAAA;YARE+f,MAAM;YAAA,KASNkF,YAAY;cAAAD;cAAA;YAAA;YAAA,MACRC,YAAY;UAAA;YAEpB/hB,MAAM,GAAG6c,MAAM,CAAC,CAAC,CAAC;YAAAiF;YAAA;UAAA;YAAAA;YAAA,OAGZZ,mBAAmB,CAACjjB,KAAK,CAACxB,KAAK,EAAEG,kBAAkB,EAAEE,QAAQ,CAAC;UAAA;YAEpE8kB,OAAO,GAAG3jB,KAAK,CAACxB,KAAK,CAACmY,IAAI,CAAC;YAAA,KACvBgN,OAAO;cAAAE;cAAA;YAAA;YAAAA;YAAA,OAIMH,UAAU,CAACC,OAAO,CAAC;UAAA;YAAlC5hB,MAAM;YAAA8hB;YAAA;UAAA;YAAA,MACGlN,IAAI,KAAK,QAAQ;cAAAkN;cAAA;YAAA;YACtBloB,GAAG,GAAG,IAAIrC,GAAG,CAACmc,OAAO,CAAC9Z,GAAG,CAAC;YAC1B9C,QAAQ,GAAG8C,GAAG,CAAC9C,QAAQ,GAAG8C,GAAG,CAACjC,MAAM;YAAA,MAClCqV,sBAAsB,CAAC,GAAG,EAAE;cAChC6H,MAAM,EAAEnB,OAAO,CAACmB,MAAM;cACtB/d,QAAQ,EAARA,QAAQ;cACRge,OAAO,EAAE7W,KAAK,CAACxB,KAAK,CAACO;YACtB,EAAC;UAAA;YAAA,mCAIK;cAAE4X,IAAI,EAAEvY,UAAU,CAAC+B,IAAI;cAAEA,IAAI,EAAErI;aAAW;UAAA;YAAA+rB;YAAA;UAAA;YAAA,IAG3CF,OAAO;cAAAE;cAAA;YAAA;YACbloB,IAAG,GAAG,IAAIrC,GAAG,CAACmc,OAAO,CAAC9Z,GAAG,CAAC;YAC1B9C,SAAQ,GAAG8C,IAAG,CAAC9C,QAAQ,GAAG8C,IAAG,CAACjC,MAAM;YAAA,MAClCqV,sBAAsB,CAAC,GAAG,EAAE;cAChClW;YACD,EAAC;UAAA;YAAAgrB;YAAA,OAEaH,UAAU,CAACC,OAAO,CAAC;UAAA;YAAlC5hB,MAAM;UAAA;YAGR/F,SAAS,CACP+F,MAAM,KAAKjK,SAAS,EACpB,cAAe6e,QAAI,KAAK,QAAQ,GAAG,WAAW,GAAG,UAAU,4BACrD3W,KAAK,CAACxB,KAAK,CAACO,EAAE,GAA4C4X,kDAAI,GAAK,oDACzB,CACjD;YAAAkN;YAAA;UAAA;YAAAA;YAAAA;YAEDE,UAAU,GAAG3lB,UAAU,CAACP,KAAK;YAC7BkE,MAAM,gBAAI;UAAA;YAAA8hB;YAEV,IAAID,QAAQ,EAAE;cACZnO,OAAO,CAACrM,MAAM,CAACjL,mBAAmB,CAAC,OAAO,EAAEylB,QAAQ,CAAC;YACtD;YAAA;UAAA;YAAA,KAGCtF,UAAU,CAACvc,MAAM,CAAC;cAAA8hB;cAAA;YAAA;YAChB/b,MAAM,GAAG/F,MAAM,CAAC+F,MAAM,EAE1B;YAAA,KACI2E,mBAAmB,CAACxE,GAAG,CAACH,MAAM,CAAC;cAAA+b;cAAA;YAAA;YAC7BlrB,QAAQ,GAAGoJ,MAAM,CAACgG,OAAO,CAACqC,GAAG,CAAC,UAAU,CAAC;YAC7CpO,SAAS,CACPrD,QAAQ,EACR,4EAA4E,CAC7E;YAED;YACA,IAAI,CAAC0U,kBAAkB,CAACnK,IAAI,CAACvK,QAAQ,CAAC,EAAE;cACtCA,QAAQ,GAAGub,WAAW,CACpB,IAAI5a,GAAG,CAACmc,OAAO,CAAC9Z,GAAG,CAAC,EACpBgE,OAAO,CAAC7D,KAAK,CAAC,CAAC,EAAE6D,OAAO,CAAC9D,OAAO,CAACmE,KAAK,CAAC,GAAG,CAAC,CAAC,EAC5CV,QAAQ,EACR,IAAI,EACJ3G,QAAQ,EACRgO,oBAAoB,CACrB;YACF,OAAM,IAAI,CAAC8L,IAAI,CAAC6M,eAAe,EAAE;cAChC;cACA;cACA;cACIqC,UAAU,GAAG,IAAIroB,GAAG,CAACmc,OAAO,CAAC9Z,GAAG,CAAC;cACjCA,KAAG,GAAGhD,QAAQ,CAACyC,UAAU,CAAC,IAAI,CAAC,GAC/B,IAAI9B,GAAG,CAACqoB,UAAU,CAACqC,QAAQ,GAAGrrB,QAAQ,CAAC,GACvC,IAAIW,GAAG,CAACX,QAAQ,CAAC;cACjBsrB,cAAc,GAAG1kB,aAAa,CAAC5D,KAAG,CAAC9C,QAAQ,EAAEyG,QAAQ,CAAC,IAAI,IAAI;cAClE,IAAI3D,KAAG,CAACsC,MAAM,KAAK0jB,UAAU,CAAC1jB,MAAM,IAAIgmB,cAAc,EAAE;gBACtDtrB,QAAQ,GAAGgD,KAAG,CAAC9C,QAAQ,GAAG8C,KAAG,CAACjC,MAAM,GAAGiC,KAAG,CAAChC,IAAI;cAChD;YACF;YAED;YACA;YACA;YACA;YAAA,KACI8Y,IAAI,CAAC6M,eAAe;cAAAuE;cAAA;YAAA;YACtB9hB,MAAM,CAACgG,OAAO,CAACG,GAAG,CAAC,UAAU,EAAEvP,QAAQ,CAAC;YAAA,MAClCoJ,MAAM;UAAA;YAAA,mCAGP;cACL4U,IAAI,EAAEvY,UAAU,CAAC0N,QAAQ;cACzBhE,MAAM,EAANA,MAAM;cACNnP,QAAQ,EAARA,QAAQ;cACRic,UAAU,EAAE7S,MAAM,CAACgG,OAAO,CAACqC,GAAG,CAAC,oBAAoB,CAAC,KAAK,IAAI;cAC7D4Q,cAAc,EAAEjZ,MAAM,CAACgG,OAAO,CAACqC,GAAG,CAAC,yBAAyB,CAAC,KAAK;aACnE;UAAA;YAAA,KAMCqI,IAAI,CAAC2M,cAAc;cAAAyE;cAAA;YAAA;YACjBK,kBAAkB,GAAuB;cAC3CvN,IAAI,EACFoN,UAAU,KAAK3lB,UAAU,CAACP,KAAK,GAAGO,UAAU,CAACP,KAAK,GAAGO,UAAU,CAAC+B,IAAI;cACtE6L,QAAQ,EAAEjK;aACX;YAAA,MACKmiB,kBAAkB;UAAA;YAAAL;YAMpBM,WAAW,GAAGpiB,MAAM,CAACgG,OAAO,CAACqC,GAAG,CAAC,cAAc,CAAC,EACpD;YACA;YAAA,MACI+Z,WAAW,IAAI,uBAAuB,CAACjhB,IAAI,CAACihB,WAAW,CAAC;cAAAN;cAAA;YAAA;YAAA,MACtD9hB,MAAM,CAACoe,IAAI,IAAI,IAAI;cAAA0D;cAAA;YAAA;YACrB1jB,IAAI,GAAG,IAAI;YAAA0jB;YAAA;UAAA;YAAAA;YAAA,OAEE9hB,MAAM,CAAC4F,IAAI,EAAE;UAAA;YAA1BxH,IAAI;UAAA;YAAA0jB;YAAA;UAAA;YAAAA;YAAA,OAGO9hB,MAAM,CAACiL,IAAI,EAAE;UAAA;YAA1B7M,IAAI;UAAA;YAAA0jB;YAAA;UAAA;YAAAA;YAAAA;YAAA,mCAGC;cAAElN,IAAI,EAAEvY,UAAU,CAACP,KAAK;cAAEA,KAAK;aAAK;UAAA;YAAA,MAGzCkmB,UAAU,KAAK3lB,UAAU,CAACP,KAAK;cAAAgmB;cAAA;YAAA;YAAA,mCAC1B;cACLlN,IAAI,EAAEoN,UAAU;cAChBlmB,KAAK,EAAE,IAAIoO,iBAAiB,CAACnE,MAAM,EAAE/F,MAAM,CAACmK,UAAU,EAAE/L,IAAI,CAAC;cAC7D4H,OAAO,EAAEhG,MAAM,CAACgG;aACjB;UAAA;YAAA,mCAGI;cACL4O,IAAI,EAAEvY,UAAU,CAAC+B,IAAI;cACrBA,IAAI,EAAJA,IAAI;cACJ8d,UAAU,EAAElc,MAAM,CAAC+F,MAAM;cACzBC,OAAO,EAAEhG,MAAM,CAACgG;aACjB;UAAA;YAAA,MAGCgc,UAAU,KAAK3lB,UAAU,CAACP,KAAK;cAAAgmB;cAAA;YAAA;YAAA,mCAC1B;cAAElN,IAAI,EAAEoN,UAAU;cAAElmB,KAAK,EAAEkE;aAAQ;UAAA;YAAA,KAGxCqiB,cAAc,CAACriB,MAAM,CAAC;cAAA8hB;cAAA;YAAA;YAAA,mCACjB;cACLlN,IAAI,EAAEvY,UAAU,CAACimB,QAAQ;cACzBxL,YAAY,EAAE9W,MAAM;cACpBkc,UAAU,kBAAElc,MAAM,CAAC6F,IAAI,qBAAX0c,aAAaxc,MAAM;cAC/BC,OAAO,EAAE,wBAAM,CAACH,IAAI,KAAX2c,8BAAaxc,OAAO,KAAI,IAAIC,OAAO,CAACjG,MAAM,CAAC6F,IAAI,CAACG,OAAO;aACjE;UAAA;YAAA,mCAGI;cAAE4O,IAAI,EAAEvY,UAAU,CAAC+B,IAAI;cAAEA,IAAI,EAAE4B;aAAQ;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAChD;EAAA;AAAA;AAKA,SAAS2T,uBAAuBA,CAC9Btc,OAAgB,EAChBT,QAA2B,EAC3ByQ,MAAmB,EACnBmL,UAAuB;EAEvB,IAAI5Y,GAAG,GAAGvC,OAAO,CAACC,SAAS,CAAC0nB,iBAAiB,CAACpoB,QAAQ,CAAC,CAAC,CAAC+D,QAAQ,EAAE;EACnE,IAAIkL,IAAI,GAAgB;IAAEwB;GAAQ;EAElC,IAAImL,UAAU,IAAIlB,gBAAgB,CAACkB,UAAU,CAAC3H,UAAU,CAAC,EAAE;IACzD,IAAMA,UAAU,GAAkB2H,UAAU,CAAtC3H,UAAU;MAAEE,cAAgByH,UAAU,CAA1BzH;IAClB;IACA;IACA;IACAlF,IAAI,CAACgP,MAAM,GAAGhK,UAAU,CAACkU,WAAW,EAAE;IAEtC,IAAIhU,WAAW,KAAK,kBAAkB,EAAE;MACtClF,IAAI,CAACG,OAAO,GAAG,IAAIC,OAAO,CAAC;QAAE,cAAc,EAAE8E;MAAa,EAAC;MAC3DlF,IAAI,CAACuY,IAAI,GAAGnnB,IAAI,CAACC,SAAS,CAACsb,UAAU,CAAC5M,IAAI,CAAC;IAC5C,OAAM,IAAImF,WAAW,KAAK,YAAY,EAAE;MACvC;MACAlF,IAAI,CAACuY,IAAI,GAAG5L,UAAU,CAACvH,IAAI;KAC5B,MAAM,IACLF,WAAW,KAAK,mCAAmC,IACnDyH,UAAU,CAACxH,QAAQ,EACnB;MACA;MACAnF,IAAI,CAACuY,IAAI,GAAGiB,6BAA6B,CAAC7M,UAAU,CAACxH,QAAQ,CAAC;IAC/D,OAAM;MACL;MACAnF,IAAI,CAACuY,IAAI,GAAG5L,UAAU,CAACxH,QAAQ;IAChC;EACF;EAED,OAAO,IAAImJ,OAAO,CAACva,GAAG,EAAEiM,IAAI,CAAC;AAC/B;AAEA,SAASwZ,6BAA6BA,CAACrU,QAAkB;EACvD,IAAIoU,YAAY,GAAG,IAAIF,eAAe,EAAE;EAAA,4CAEflU,QAAQ,CAACvV,OAAO,EAAE;IAAAgtB;EAAA;IAA3C,uDAA6C;MAAA;QAAnC9rB,GAAG;QAAEuD,KAAK;MAClB;MACAklB,YAAY,CAACG,MAAM,CAAC5oB,GAAG,EAAE,OAAOuD,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAGA,KAAK,CAAC8B,IAAI,CAAC;IACzE;EAAA;IAAA0mB;EAAA;IAAAA;EAAA;EAED,OAAOtD,YAAY;AACrB;AAEA,SAASE,6BAA6BA,CACpCF,YAA6B;EAE7B,IAAIpU,QAAQ,GAAG,IAAIiU,QAAQ,EAAE;EAAA,4CACJG,YAAY,CAAC3pB,OAAO,EAAE;IAAAktB;EAAA;IAA/C,uDAAiD;MAAA;QAAvChsB,GAAG;QAAEuD,KAAK;MAClB8Q,QAAQ,CAACuU,MAAM,CAAC5oB,GAAG,EAAEuD,KAAK,CAAC;IAC5B;EAAA;IAAA0oB;EAAA;IAAAA;EAAA;EACD,OAAO5X,QAAQ;AACjB;AAEA,SAAS6S,sBAAsBA,CAC7BjgB,OAAiC,EACjC8X,aAAuC,EACvCa,OAAqB,EACrB7D,YAAmC,EACnCnD,eAA0C;EAO1C;EACA,IAAIrR,UAAU,GAA8B,EAAE;EAC9C,IAAIsP,MAAM,GAAiC,IAAI;EAC/C,IAAI0O,UAA8B;EAClC,IAAI2G,UAAU,GAAG,KAAK;EACtB,IAAI1G,aAAa,GAA4B,EAAE;EAE/C;EACA5F,OAAO,CAACtX,OAAO,CAAC,UAACe,MAAM,EAAEpK,KAAK,EAAI;IAChC,IAAIoH,EAAE,GAAG0Y,aAAa,CAAC9f,KAAK,CAAC,CAAC6G,KAAK,CAACO,EAAE;IACtC/C,SAAS,CACP,CAAC+a,gBAAgB,CAAChV,MAAM,CAAC,EACzB,qDAAqD,CACtD;IACD,IAAIkV,aAAa,CAAClV,MAAM,CAAC,EAAE;MACzB;MACA;MACA,IAAImV,aAAa,GAAGvB,mBAAmB,CAAChW,OAAO,EAAEZ,EAAE,CAAC;MACpD,IAAIlB,KAAK,GAAGkE,MAAM,CAAClE,KAAK;MACxB;MACA;MACA;MACA,IAAI4W,YAAY,EAAE;QAChB5W,KAAK,GAAG8F,MAAM,CAACib,MAAM,CAACnK,YAAY,CAAC,CAAC,CAAC,CAAC;QACtCA,YAAY,GAAG3c,SAAS;MACzB;MAEDyX,MAAM,GAAGA,MAAM,IAAI,EAAE;MAErB;MACA,IAAIA,MAAM,CAAC2H,aAAa,CAAC1Y,KAAK,CAACO,EAAE,CAAC,IAAI,IAAI,EAAE;QAC1CwQ,MAAM,CAAC2H,aAAa,CAAC1Y,KAAK,CAACO,EAAE,CAAC,GAAGlB,KAAK;MACvC;MAED;MACAoC,UAAU,CAAClB,EAAE,CAAC,GAAGjH,SAAS;MAE1B;MACA;MACA,IAAI,CAAC8sB,UAAU,EAAE;QACfA,UAAU,GAAG,IAAI;QACjB3G,UAAU,GAAG7R,oBAAoB,CAACrK,MAAM,CAAClE,KAAK,CAAC,GAC3CkE,MAAM,CAAClE,KAAK,CAACiK,MAAM,GACnB,GAAG;MACR;MACD,IAAI/F,MAAM,CAACgG,OAAO,EAAE;QAClBmW,aAAa,CAACnf,EAAE,CAAC,GAAGgD,MAAM,CAACgG,OAAO;MACnC;IACF,OAAM;MACL,IAAIoP,gBAAgB,CAACpV,MAAM,CAAC,EAAE;QAC5BuP,eAAe,CAACpJ,GAAG,CAACnJ,EAAE,EAAEgD,MAAM,CAAC8W,YAAY,CAAC;QAC5C5Y,UAAU,CAAClB,EAAE,CAAC,GAAGgD,MAAM,CAAC8W,YAAY,CAAC1Y,IAAI;MAC1C,OAAM;QACLF,UAAU,CAAClB,EAAE,CAAC,GAAGgD,MAAM,CAAC5B,IAAI;MAC7B;MAED;MACA;MACA,IACE4B,MAAM,CAACkc,UAAU,IAAI,IAAI,IACzBlc,MAAM,CAACkc,UAAU,KAAK,GAAG,IACzB,CAAC2G,UAAU,EACX;QACA3G,UAAU,GAAGlc,MAAM,CAACkc,UAAU;MAC/B;MACD,IAAIlc,MAAM,CAACgG,OAAO,EAAE;QAClBmW,aAAa,CAACnf,EAAE,CAAC,GAAGgD,MAAM,CAACgG,OAAO;MACnC;IACF;EACH,CAAC,CAAC;EAEF;EACA;EACA;EACA,IAAI0M,YAAY,EAAE;IAChBlF,MAAM,GAAGkF,YAAY;IACrBxU,UAAU,CAAC0D,MAAM,CAAC6P,IAAI,CAACiB,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG3c,SAAS;EACrD;EAED,OAAO;IACLmI,UAAU,EAAVA,UAAU;IACVsP,MAAM,EAANA,MAAM;IACN0O,UAAU,EAAEA,UAAU,IAAI,GAAG;IAC7BC;GACD;AACH;AAEA,SAAStF,iBAAiBA,CACxB/gB,KAAkB,EAClB8H,OAAiC,EACjC8X,aAAuC,EACvCa,OAAqB,EACrB7D,YAAmC,EACnCiD,oBAA2C,EAC3Cc,cAA4B,EAC5BlH,eAA0C;EAK1C,4BAA6BsO,sBAAsB,CACjDjgB,OAAO,EACP8X,aAAa,EACba,OAAO,EACP7D,YAAY,EACZnD,eAAe,CAChB;IANKrR,UAAU,yBAAVA,UAAU;IAAEsP;EAQlB;EACA,KAAK,IAAI5X,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG+f,oBAAoB,CAAC1f,MAAM,EAAEL,KAAK,EAAE,EAAE;IAChE,4BAAiC+f,oBAAoB,CAAC/f,KAAK,CAAC;MAAtDe,GAAG,yBAAHA,GAAG;MAAEsH,KAAK,yBAALA,KAAK;MAAE+I;IAClB/M,SAAS,CACPwc,cAAc,KAAK1gB,SAAS,IAAI0gB,cAAc,CAAC7gB,KAAK,CAAC,KAAKG,SAAS,EACnE,2CAA2C,CAC5C;IACD,IAAIiK,MAAM,GAAGyW,cAAc,CAAC7gB,KAAK,CAAC;IAElC;IACA,IAAIoR,UAAU,IAAIA,UAAU,CAACK,MAAM,CAACiB,OAAO,EAAE;MAC3C;MACA;IACD,OAAM,IAAI4M,aAAa,CAAClV,MAAM,CAAC,EAAE;MAChC,IAAImV,aAAa,GAAGvB,mBAAmB,CAAC9d,KAAK,CAAC8H,OAAO,EAAEK,KAAK,oBAALA,KAAK,CAAExB,KAAK,CAACO,EAAE,CAAC;MACvE,IAAI,EAAEwQ,MAAM,IAAIA,MAAM,CAAC2H,aAAa,CAAC1Y,KAAK,CAACO,EAAE,CAAC,CAAC,EAAE;QAC/CwQ,MAAM,gBACDA,MAAM,sBACR2H,aAAa,CAAC1Y,KAAK,CAACO,EAAE,EAAGgD,MAAM,CAAClE,MAClC;MACF;MACDhG,KAAK,CAACmY,QAAQ,CAAC1F,MAAM,CAAC5R,GAAG,CAAC;IAC3B,OAAM,IAAIqe,gBAAgB,CAAChV,MAAM,CAAC,EAAE;MACnC;MACA;MACA/F,SAAS,CAAC,KAAK,EAAE,yCAAyC,CAAC;IAC5D,OAAM,IAAImb,gBAAgB,CAACpV,MAAM,CAAC,EAAE;MACnC;MACA;MACA/F,SAAS,CAAC,KAAK,EAAE,iCAAiC,CAAC;IACpD,OAAM;MACL,IAAIwe,WAAW,GAAGR,cAAc,CAACjY,MAAM,CAAC5B,IAAI,CAAC;MAC7CtI,KAAK,CAACmY,QAAQ,CAAC9H,GAAG,CAACxP,GAAG,EAAE8hB,WAAW,CAAC;IACrC;EACF;EAED,OAAO;IAAEva,UAAU,EAAVA,UAAU;IAAEsP;GAAQ;AAC/B;AAEA,SAASkE,eAAeA,CACtBxT,UAAqB,EACrB4kB,aAAwB,EACxBllB,OAAiC,EACjC4P,MAAoC;EAEpC,IAAIuV,gBAAgB,gBAAQD,aAAa,CAAE;EAAA,4CACzBllB,OAAO;IAAAolB;EAAA;IAAzB,uDAA2B;MAAA,IAAlB/kB,KAAK;MACZ,IAAIjB,EAAE,GAAGiB,KAAK,CAACxB,KAAK,CAACO,EAAE;MACvB,IAAI8lB,aAAa,CAACG,cAAc,CAACjmB,EAAE,CAAC,EAAE;QACpC,IAAI8lB,aAAa,CAAC9lB,EAAE,CAAC,KAAKjH,SAAS,EAAE;UACnCgtB,gBAAgB,CAAC/lB,EAAE,CAAC,GAAG8lB,aAAa,CAAC9lB,EAAE,CAAC;QACzC;MAKF,OAAM,IAAIkB,UAAU,CAAClB,EAAE,CAAC,KAAKjH,SAAS,IAAIkI,KAAK,CAACxB,KAAK,CAAC8Q,MAAM,EAAE;QAC7D;QACA;QACAwV,gBAAgB,CAAC/lB,EAAE,CAAC,GAAGkB,UAAU,CAAClB,EAAE,CAAC;MACtC;MAED,IAAIwQ,MAAM,IAAIA,MAAM,CAACyV,cAAc,CAACjmB,EAAE,CAAC,EAAE;QACvC;QACA;MACD;IACF;EAAA;IAAAkmB;EAAA;IAAAA;EAAA;EACD,OAAOH,gBAAgB;AACzB;AAEA;AACA;AACA;AACA,SAASnP,mBAAmBA,CAC1BhW,OAAiC,EACjCkX,OAAgB;EAEhB,IAAIqO,eAAe,GAAGrO,OAAO,GACzBlX,OAAO,CAAC7D,KAAK,CAAC,CAAC,EAAE6D,OAAO,CAAC8hB,SAAS,CAAEtS,WAAC;IAAA,OAAKA,CAAC,CAAC3Q,KAAK,CAACO,EAAE,KAAK8X,OAAO;EAAA,EAAC,GAAG,CAAC,CAAC,sBAClElX,OAAO,CAAC;EAChB,OACEulB,eAAe,CAACC,OAAO,EAAE,CAACxG,IAAI,CAAExP,WAAC;IAAA,OAAKA,CAAC,CAAC3Q,KAAK,CAAC+O,gBAAgB,KAAK,IAAI;EAAA,EAAC,IACxE5N,OAAO,CAAC,CAAC,CAAC;AAEd;AAEA,SAASqP,sBAAsBA,CAACtQ,MAAiC;EAI/D;EACA,IAAIF,KAAK,GACPE,MAAM,CAAC1G,MAAM,KAAK,CAAC,GACf0G,MAAM,CAAC,CAAC,CAAC,GACTA,MAAM,CAACigB,IAAI,CAAE7V,WAAC;IAAA,OAAKA,CAAC,CAACnR,KAAK,IAAI,CAACmR,CAAC,CAACtP,IAAI,IAAIsP,CAAC,CAACtP,IAAI,KAAK,GAAG;EAAA,EAAC,IAAI;IAC1DuF,EAAE;GACH;EAEP,OAAO;IACLY,OAAO,EAAE,CACP;MACEO,MAAM,EAAE,EAAE;MACVrH,QAAQ,EAAE,EAAE;MACZ+K,YAAY,EAAE,EAAE;MAChBpF;IACD,EACF;IACDA;GACD;AACH;AAEA,SAASuQ,sBAAsBA,CAC7BjH,MAAc,UAWR;EAAA,iCAAF,EAAE;IATJjP,QAAQ,UAARA,QAAQ;IACRge,OAAO,UAAPA,OAAO;IACPD,MAAM,UAANA,MAAM;IACND;EAQF,IAAIzK,UAAU,GAAG,sBAAsB;EACvC,IAAIkZ,YAAY,GAAG,iCAAiC;EAEpD,IAAItd,MAAM,KAAK,GAAG,EAAE;IAClBoE,UAAU,GAAG,aAAa;IAC1B,IAAI0K,MAAM,IAAI/d,QAAQ,IAAIge,OAAO,EAAE;MACjCuO,YAAY,GACV,gBAAcxO,MAAM,sBAAgB/d,QAAQ,GACDge,gEAAO,UAAK,GACZ;IAC9C,OAAM,IAAIF,IAAI,KAAK,cAAc,EAAE;MAClCyO,YAAY,GAAG,qCAAqC;IACrD,OAAM,IAAIzO,IAAI,KAAK,cAAc,EAAE;MAClCyO,YAAY,GAAG,kCAAkC;IAClD;EACF,OAAM,IAAItd,MAAM,KAAK,GAAG,EAAE;IACzBoE,UAAU,GAAG,WAAW;IACxBkZ,YAAY,GAAavO,oBAAO,GAAyBhe,qCAAQ,GAAG;EACrE,OAAM,IAAIiP,MAAM,KAAK,GAAG,EAAE;IACzBoE,UAAU,GAAG,WAAW;IACxBkZ,YAAY,+BAA4BvsB,QAAQ,GAAG;EACpD,OAAM,IAAIiP,MAAM,KAAK,GAAG,EAAE;IACzBoE,UAAU,GAAG,oBAAoB;IACjC,IAAI0K,MAAM,IAAI/d,QAAQ,IAAIge,OAAO,EAAE;MACjCuO,YAAY,GACV,gBAAcxO,MAAM,CAACkK,WAAW,EAAE,sBAAgBjoB,QAAQ,6DACdge,OAAO,UAAK,GACb;KAC9C,MAAM,IAAID,MAAM,EAAE;MACjBwO,YAAY,iCAA8BxO,MAAM,CAACkK,WAAW,EAAE,GAAG;IAClE;EACF;EAED,OAAO,IAAI7U,iBAAiB,CAC1BnE,MAAM,IAAI,GAAG,EACboE,UAAU,EACV,IAAI/P,KAAK,CAACipB,YAAY,CAAC,EACvB,IAAI,CACL;AACH;AAEA;AACA,SAAS3M,YAAYA,CACnBH,OAAqB;EAErB,KAAK,IAAI1Y,CAAC,GAAG0Y,OAAO,CAACtgB,MAAM,GAAG,CAAC,EAAE4H,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC5C,IAAImC,MAAM,GAAGuW,OAAO,CAAC1Y,CAAC,CAAC;IACvB,IAAImX,gBAAgB,CAAChV,MAAM,CAAC,EAAE;MAC5B,OAAO;QAAEA,MAAM,EAANA,MAAM;QAAEnF,GAAG,EAAEgD;OAAG;IAC1B;EACF;AACH;AAEA,SAASmhB,iBAAiBA,CAACvnB,IAAQ;EACjC,IAAIyD,UAAU,GAAG,OAAOzD,IAAI,KAAK,QAAQ,GAAGC,SAAS,CAACD,IAAI,CAAC,GAAGA,IAAI;EAClE,OAAOL,UAAU,cAAM8D,UAAU;IAAEtD,IAAI,EAAE;EAAE,EAAE,CAAC;AAChD;AAEA,SAAS6b,gBAAgBA,CAACtT,CAAW,EAAEC,CAAW;EAChD,IAAID,CAAC,CAACrJ,QAAQ,KAAKsJ,CAAC,CAACtJ,QAAQ,IAAIqJ,CAAC,CAACxI,MAAM,KAAKyI,CAAC,CAACzI,MAAM,EAAE;IACtD,OAAO,KAAK;EACb;EAED,IAAIwI,CAAC,CAACvI,IAAI,KAAK,EAAE,EAAE;IACjB;IACA,OAAOwI,CAAC,CAACxI,IAAI,KAAK,EAAE;GACrB,MAAM,IAAIuI,CAAC,CAACvI,IAAI,KAAKwI,CAAC,CAACxI,IAAI,EAAE;IAC5B;IACA,OAAO,IAAI;EACZ,OAAM,IAAIwI,CAAC,CAACxI,IAAI,KAAK,EAAE,EAAE;IACxB;IACA,OAAO,IAAI;EACZ;EAED;EACA;EACA,OAAO,KAAK;AACd;AAEA,SAASwd,gBAAgBA,CAACpV,MAAkB;EAC1C,OAAOA,MAAM,CAAC4U,IAAI,KAAKvY,UAAU,CAACimB,QAAQ;AAC5C;AAEA,SAASpN,aAAaA,CAAClV,MAAkB;EACvC,OAAOA,MAAM,CAAC4U,IAAI,KAAKvY,UAAU,CAACP,KAAK;AACzC;AAEA,SAASkZ,gBAAgBA,CAAChV,MAAmB;EAC3C,OAAO,CAACA,MAAM,IAAIA,MAAM,CAAC4U,IAAI,MAAMvY,UAAU,CAAC0N,QAAQ;AACxD;AAEM,SAAUsY,cAAcA,CAACnoB,KAAU;EACvC,IAAIooB,QAAQ,GAAiBpoB,KAAK;EAClC,OACEooB,QAAQ,IACR,OAAOA,QAAQ,KAAK,QAAQ,IAC5B,OAAOA,QAAQ,CAAClkB,IAAI,KAAK,QAAQ,IACjC,OAAOkkB,QAAQ,CAACzZ,SAAS,KAAK,UAAU,IACxC,OAAOyZ,QAAQ,CAACvZ,MAAM,KAAK,UAAU,IACrC,OAAOuZ,QAAQ,CAACgB,WAAW,KAAK,UAAU;AAE9C;AAEA,SAAS/G,UAAUA,CAACriB,KAAU;EAC5B,OACEA,KAAK,IAAI,IAAI,IACb,OAAOA,KAAK,CAAC6L,MAAM,KAAK,QAAQ,IAChC,OAAO7L,KAAK,CAACiQ,UAAU,KAAK,QAAQ,IACpC,OAAOjQ,KAAK,CAAC8L,OAAO,KAAK,QAAQ,IACjC,OAAO9L,KAAK,CAACkkB,IAAI,KAAK,WAAW;AAErC;AAEA,SAAShB,kBAAkBA,CAACpd,MAAW;EACrC,IAAI,CAACuc,UAAU,CAACvc,MAAM,CAAC,EAAE;IACvB,OAAO,KAAK;EACb;EAED,IAAI+F,MAAM,GAAG/F,MAAM,CAAC+F,MAAM;EAC1B,IAAInP,QAAQ,GAAGoJ,MAAM,CAACgG,OAAO,CAACqC,GAAG,CAAC,UAAU,CAAC;EAC7C,OAAOtC,MAAM,IAAI,GAAG,IAAIA,MAAM,IAAI,GAAG,IAAInP,QAAQ,IAAI,IAAI;AAC3D;AAEA,SAASumB,oBAAoBA,CAACoG,GAAQ;EACpC,OACEA,GAAG,IACHhH,UAAU,CAACgH,GAAG,CAACtZ,QAAQ,CAAC,KACvBsZ,GAAG,CAAC3O,IAAI,KAAKvY,UAAU,CAAC+B,IAAI,IAAImlB,GAAG,CAAC3O,IAAI,KAAKvY,UAAU,CAACP,KAAK,CAAC;AAEnE;AAEA,SAASggB,aAAaA,CAACjH,MAAc;EACnC,OAAOpK,mBAAmB,CAACvE,GAAG,CAAC2O,MAAM,CAACpR,WAAW,EAAgB,CAAC;AACpE;AAEA,SAAS6N,gBAAgBA,CACvBuD,MAAc;EAEd,OAAOtK,oBAAoB,CAACrE,GAAG,CAAC2O,MAAM,CAACpR,WAAW,EAAwB,CAAC;AAC7E;AAAA,SAEe+V,sBAAsBA;EAAAA;AAAAA;AAAAA;EAAAA,mFAArC,mBACEJ,cAAwC,EACxC1D,aAAgD,EAChDa,OAAqB,EACrBiN,OAA+B,EAC/B5E,SAAkB,EAClB8B,iBAA6B;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA+C,6DAEpB7tB,KAAK;cAAA;cAAA;gBAAA;kBAAA;oBAAA;sBACRoK,MAAM,GAAGuW,OAAO,CAAC3gB,KAAK,CAAC;sBACvBqI,KAAK,GAAGyX,aAAa,CAAC9f,KAAK,CAAC,EAChC;sBACA;sBACA;sBAAA,IACKqI,KAAK;wBAAAylB;wBAAA;sBAAA;sBAAA;oBAAA;sBAIN/C,YAAY,GAAGvH,cAAc,CAACwD,IAAI,CACnCxP,WAAC;wBAAA,OAAKA,CAAC,CAAC3Q,KAAK,CAACO,EAAE,KAAKiB,KAAM,CAACxB,KAAK,CAACO,EAAE;sBAAA,EACtC;sBACG2mB,oBAAoB,GACtBhD,YAAY,IAAI,IAAI,IACpB,CAACL,kBAAkB,CAACK,YAAY,EAAE1iB,KAAK,CAAC,IACxC,CAACyiB,iBAAiB,IAAIA,iBAAiB,CAACziB,KAAK,CAACxB,KAAK,CAACO,EAAE,CAAC,MAAMjH,SAAS;sBAAA,MAEpEqf,gBAAgB,CAACpV,MAAM,CAAC,KAAK4e,SAAS,IAAI+E,oBAAoB,CAAC;wBAAAD;wBAAA;sBAAA;sBACjE;sBACA;sBACA;sBACIrc,MAAM,GAAGmc,OAAO,CAAC5tB,KAAK,CAAC;sBAC3BqE,SAAS,CACPoN,MAAM,EACN,kEAAkE,CACnE;sBAAAqc;sBAAA,OACK9K,mBAAmB,CAAC5Y,MAAM,EAAEqH,MAAM,EAAEuX,SAAS,CAAC,CAAC5W,IAAI,CAAEhI,gBAAM,EAAI;wBACnE,IAAIA,MAAM,EAAE;0BACVuW,OAAO,CAAC3gB,KAAK,CAAC,GAAGoK,MAAM,IAAIuW,OAAO,CAAC3gB,KAAK,CAAC;wBAC1C;sBACH,CAAC,CAAC;oBAAA;oBAAA;sBAAA;kBAAA;gBAAA;cAAA;YAAA;YA/BGA,KAAK,GAAG,CAAC;UAAA;YAAA,MAAEA,KAAK,GAAG2gB,OAAO,CAACtgB,MAAM;cAAA2tB;cAAA;YAAA;YAAA,sCAAjChuB,KAAK;UAAA;YAAAiuB;YAAA;cAAAD;cAAA;YAAA;YAAA;UAAA;YAA8BhuB,KAAK,EAAE;YAAAguB;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAkCrD;EAAA;AAAA;AAAA,SAEehL,mBAAmBA;EAAAA;AAAAA;AAAAA;EAAAA,gFAAlC,mBACE5Y,MAAsB,EACtBqH,MAAmB,EACnByc,MAAM;IAAA;IAAA;MAAA;QAAA;UAAA;YAAQ,IAAdA,MAAM;cAANA,MAAM,GAAG,KAAK;YAAA;YAAAC;YAAA,OAEM/jB,MAAM,CAAC8W,YAAY,CAACwM,WAAW,CAACjc,MAAM,CAAC;UAAA;YAAvDiB,OAAO;YAAA,KACPA,OAAO;cAAAyb;cAAA;YAAA;YAAA;UAAA;YAAA,KAIPD,MAAM;cAAAC;cAAA;YAAA;YAAAA;YAAA,mCAEC;cACLnP,IAAI,EAAEvY,UAAU,CAAC+B,IAAI;cACrBA,IAAI,EAAE4B,MAAM,CAAC8W,YAAY,CAACkN;aAC3B;UAAA;YAAAD;YAAAA;YAAA,mCAGM;cACLnP,IAAI,EAAEvY,UAAU,CAACP,KAAK;cACtBA,KAAK;aACN;UAAA;YAAA,mCAIE;cACL8Y,IAAI,EAAEvY,UAAU,CAAC+B,IAAI;cACrBA,IAAI,EAAE4B,MAAM,CAAC8W,YAAY,CAAC1Y;aAC3B;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACH;EAAA;AAAA;AAEA,SAASsgB,kBAAkBA,CAAC/mB,MAAc;EACxC,OAAO,IAAIunB,eAAe,CAACvnB,MAAM,CAAC,CAACssB,MAAM,CAAC,OAAO,CAAC,CAACljB,IAAI,CAAEkI,WAAC;IAAA,OAAKA,CAAC,KAAK,EAAE;EAAA,EAAC;AAC1E;AAEA,SAASyL,cAAcA,CACrB9W,OAAiC,EACjChH,QAA2B;EAE3B,IAAIe,MAAM,GACR,OAAOf,QAAQ,KAAK,QAAQ,GAAGc,SAAS,CAACd,QAAQ,CAAC,CAACe,MAAM,GAAGf,QAAQ,CAACe,MAAM;EAC7E,IACEiG,OAAO,CAACA,OAAO,CAAC3H,MAAM,GAAG,CAAC,CAAC,CAACwG,KAAK,CAAC7G,KAAK,IACvC8oB,kBAAkB,CAAC/mB,MAAM,IAAI,EAAE,CAAC,EAChC;IACA;IACA,OAAOiG,OAAO,CAACA,OAAO,CAAC3H,MAAM,GAAG,CAAC,CAAC;EACnC;EACD;EACA;EACA,IAAI4O,WAAW,GAAGH,0BAA0B,CAAC9G,OAAO,CAAC;EACrD,OAAOiH,WAAW,CAACA,WAAW,CAAC5O,MAAM,GAAG,CAAC,CAAC;AAC5C;AAEA,SAASsf,2BAA2BA,CAClC3H,UAAsB;EAEtB,IAAM/C,UAAU,GACd+C,UAAU,CADN/C,UAAU;IAAEC,UAAU,GAC1B8C,UAAU,CADM9C,UAAU;IAAEC,WAAW,GACvC6C,UAAU,CADkB7C,WAAW;IAAEE,IAAI,GAC7C2C,UAAU,CAD+B3C,IAAI;IAAED,QAAQ,GACvD4C,UAAU,CADqC5C,QAAQ;IAAEpF,OACzDgI,UAAU,CAD+ChI;EAE3D,IAAI,CAACiF,UAAU,IAAI,CAACC,UAAU,IAAI,CAACC,WAAW,EAAE;IAC9C;EACD;EAED,IAAIE,IAAI,IAAI,IAAI,EAAE;IAChB,OAAO;MACLJ,UAAU,EAAVA,UAAU;MACVC,UAAU,EAAVA,UAAU;MACVC,WAAW,EAAXA,WAAW;MACXC,QAAQ,EAAEjV,SAAS;MACnB6P,IAAI,EAAE7P,SAAS;MACfkV;KACD;EACF,OAAM,IAAID,QAAQ,IAAI,IAAI,EAAE;IAC3B,OAAO;MACLH,UAAU,EAAVA,UAAU;MACVC,UAAU,EAAVA,UAAU;MACVC,WAAW,EAAXA,WAAW;MACXC,QAAQ,EAARA,QAAQ;MACRpF,IAAI,EAAE7P,SAAS;MACfkV,IAAI,EAAElV;KACP;EACF,OAAM,IAAI6P,IAAI,KAAK7P,SAAS,EAAE;IAC7B,OAAO;MACL8U,UAAU,EAAVA,UAAU;MACVC,UAAU,EAAVA,UAAU;MACVC,WAAW,EAAXA,WAAW;MACXC,QAAQ,EAAEjV,SAAS;MACnB6P,IAAI,EAAJA,IAAI;MACJqF,IAAI,EAAElV;KACP;EACF;AACH;AAEA,SAASme,oBAAoBA,CAC3Btd,QAAkB,EAClB4b,UAAuB;EAEvB,IAAIA,UAAU,EAAE;IACd,IAAI5E,UAAU,GAAgC;MAC5C9X,KAAK,EAAE,SAAS;MAChBc,QAAQ,EAARA,QAAQ;MACRiU,UAAU,EAAE2H,UAAU,CAAC3H,UAAU;MACjCC,UAAU,EAAE0H,UAAU,CAAC1H,UAAU;MACjCC,WAAW,EAAEyH,UAAU,CAACzH,WAAW;MACnCC,QAAQ,EAAEwH,UAAU,CAACxH,QAAQ;MAC7BpF,IAAI,EAAE4M,UAAU,CAAC5M,IAAI;MACrBqF,IAAI,EAAEuH,UAAU,CAACvH;KAClB;IACD,OAAO2C,UAAU;EAClB,OAAM;IACL,IAAIA,WAAU,GAAgC;MAC5C9X,KAAK,EAAE,SAAS;MAChBc,QAAQ,EAARA,QAAQ;MACRiU,UAAU,EAAE9U,SAAS;MACrB+U,UAAU,EAAE/U,SAAS;MACrBgV,WAAW,EAAEhV,SAAS;MACtBiV,QAAQ,EAAEjV,SAAS;MACnB6P,IAAI,EAAE7P,SAAS;MACfkV,IAAI,EAAElV;KACP;IACD,OAAO6X,WAAU;EAClB;AACH;AAEA,SAAS4G,uBAAuBA,CAC9B5d,QAAkB,EAClB4b,UAAsB;EAEtB,IAAI5E,UAAU,GAAmC;IAC/C9X,KAAK,EAAE,YAAY;IACnBc,QAAQ,EAARA,QAAQ;IACRiU,UAAU,EAAE2H,UAAU,CAAC3H,UAAU;IACjCC,UAAU,EAAE0H,UAAU,CAAC1H,UAAU;IACjCC,WAAW,EAAEyH,UAAU,CAACzH,WAAW;IACnCC,QAAQ,EAAEwH,UAAU,CAACxH,QAAQ;IAC7BpF,IAAI,EAAE4M,UAAU,CAAC5M,IAAI;IACrBqF,IAAI,EAAEuH,UAAU,CAACvH;GAClB;EACD,OAAO2C,UAAU;AACnB;AAEA,SAASqI,iBAAiBA,CACxBzD,UAAuB,EACvBpU,IAAsB;EAEtB,IAAIoU,UAAU,EAAE;IACd,IAAI3B,OAAO,GAA6B;MACtC/a,KAAK,EAAE,SAAS;MAChB+U,UAAU,EAAE2H,UAAU,CAAC3H,UAAU;MACjCC,UAAU,EAAE0H,UAAU,CAAC1H,UAAU;MACjCC,WAAW,EAAEyH,UAAU,CAACzH,WAAW;MACnCC,QAAQ,EAAEwH,UAAU,CAACxH,QAAQ;MAC7BpF,IAAI,EAAE4M,UAAU,CAAC5M,IAAI;MACrBqF,IAAI,EAAEuH,UAAU,CAACvH,IAAI;MACrB7M;KACD;IACD,OAAOyS,OAAO;EACf,OAAM;IACL,IAAIA,QAAO,GAA6B;MACtC/a,KAAK,EAAE,SAAS;MAChB+U,UAAU,EAAE9U,SAAS;MACrB+U,UAAU,EAAE/U,SAAS;MACrBgV,WAAW,EAAEhV,SAAS;MACtBiV,QAAQ,EAAEjV,SAAS;MACnB6P,IAAI,EAAE7P,SAAS;MACfkV,IAAI,EAAElV,SAAS;MACfqI;KACD;IACD,OAAOyS,QAAO;EACf;AACH;AAEA,SAAS+G,oBAAoBA,CAC3BpF,UAAsB,EACtBkF,eAAyB;EAEzB,IAAI7G,OAAO,GAAgC;IACzC/a,KAAK,EAAE,YAAY;IACnB+U,UAAU,EAAE2H,UAAU,CAAC3H,UAAU;IACjCC,UAAU,EAAE0H,UAAU,CAAC1H,UAAU;IACjCC,WAAW,EAAEyH,UAAU,CAACzH,WAAW;IACnCC,QAAQ,EAAEwH,UAAU,CAACxH,QAAQ;IAC7BpF,IAAI,EAAE4M,UAAU,CAAC5M,IAAI;IACrBqF,IAAI,EAAEuH,UAAU,CAACvH,IAAI;IACrB7M,IAAI,EAAEsZ,eAAe,GAAGA,eAAe,CAACtZ,IAAI,GAAGrI;GAChD;EACD,OAAO8a,OAAO;AAChB;AAEA,SAASoH,cAAcA,CAAC7Z,IAAqB;EAC3C,IAAIyS,OAAO,GAA0B;IACnC/a,KAAK,EAAE,MAAM;IACb+U,UAAU,EAAE9U,SAAS;IACrB+U,UAAU,EAAE/U,SAAS;IACrBgV,WAAW,EAAEhV,SAAS;IACtBiV,QAAQ,EAAEjV,SAAS;IACnB6P,IAAI,EAAE7P,SAAS;IACfkV,IAAI,EAAElV,SAAS;IACfqI;GACD;EACD,OAAOyS,OAAO;AAChB;AAEA,SAASZ,yBAAyBA,CAChCiU,OAAe,EACfC,WAAqC;EAErC,IAAI;IACF,IAAIC,gBAAgB,GAAGF,OAAO,CAACG,cAAc,CAACC,OAAO,CACnD5Y,uBAAuB,CACxB;IACD,IAAI0Y,gBAAgB,EAAE;MACpB,IAAIxe,MAAI,GAAG3O,IAAI,CAACkoB,KAAK,CAACiF,gBAAgB,CAAC;MACvC,mCAAmBxiB,MAAM,CAACnM,OAAO,CAACmQ,MAAI,IAAI,EAAE,CAAC,qCAAE;QAA1C;UAAKsD,CAAC;UAAED,CAAC;QACZ,IAAIA,CAAC,IAAIvC,KAAK,CAACC,OAAO,CAACsC,CAAC,CAAC,EAAE;UACzBkb,WAAW,CAAChe,GAAG,CAAC+C,CAAC,EAAE,IAAI3M,GAAG,CAAC0M,CAAC,IAAI,EAAE,CAAC,CAAC;QACrC;MACF;IACF;GACF,CAAC,OAAOzO,CAAC,EAAE;IACV;EAAA;AAEJ;AAEA,SAAS2V,yBAAyBA,CAChC+T,OAAe,EACfC,WAAqC;EAErC,IAAIA,WAAW,CAAC5a,IAAI,GAAG,CAAC,EAAE;IACxB,IAAI3D,MAAI,GAA6B,EAAE;IAAA,4CACpBue,WAAW;MAAAI;IAAA;MAA9B,uDAAgC;QAAA;UAAtBrb,CAAC;UAAED,CAAC;QACZrD,MAAI,CAACsD,CAAC,CAAC,sBAAOD,CAAC,CAAC;MACjB;IAAA;MAAAub;IAAA;MAAAA;IAAA;IACD,IAAI;MACFN,OAAO,CAACG,cAAc,CAACI,OAAO,CAC5B/Y,uBAAuB,EACvBzU,IAAI,CAACC,SAAS,CAAC0O,MAAI,CAAC,CACrB;KACF,CAAC,OAAO9J,KAAK,EAAE;MACd/E,OAAO,CACL,KAAK,EACyD+E,qEAAK,OAAI,CACxE;IACF;EACF;AACH;AAEA","names":["Action","PopStateEventType","createMemoryHistory","options","_options$initialEntri","initialEntries","initialIndex","_options$v5Compat","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","_parsePath$pathname","_parsePath$search","_parsePath$hash","startsWith","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_ref$search","_ref","_ref$hash","parsedPath","searchIndex","getLocation","validateLocation","_options2$window","defaultView","_options2$v5Compat","getIndex","replaceState","handlePop","historyState","pushState","error","DOMException","name","assign","origin","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","explodeOptionalSegments","_step","exploded","_iterator","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","Object","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","String","array","isLastSegment","star","keyMatch","optional","param","pattern","compilePath","_compilePath2","matcher","compiledParams","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","_","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","_ref4$search","_ref4$hash","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","_inherits","_classCallCheck","DeferredData","constructor","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","_this","signal","acc","_ref2","trackPromise","done","_createClass","deferredKeys","pendingKeysSet","add","promise","race","then","_this2","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscribers","subscriber","subscribe","_this3","cancel","abort","v","k","_this4","_context","_this5","resolve","size","_ref3","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","hasLazyRoutes","m","lazy","hasLoaders","loader","errors","hydrate","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","initialHydration","dispose","clear","deleteFetcher","deleteBlocker","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","_toConsumableArray","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","completeNavigation","_temp","isActionReload","isMutationMethod","_location$state","_isRedirect","keys","mergeLoaderData","_location$state2","priorPaths","toPaths","getSavedScrollPosition","navigate","_navigate","_context2","normalizedPath","normalizeTo","fromRouteId","relative","_normalizeNavigateOpt2","normalizeNavigateOptions","submission","userReplace","pendingError","enableViewTransition","unstable_viewTransition","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","_startNavigation","saveScrollPosition","routesToUse","loadingNavigation","_context3","_getShortCircuitMatch2","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","findNearestBoundary","handleAction","actionOutput","shortCircuited","pendingActionData","pendingActionError","getLoadingNavigation","Request","handleLoaders","fetcherSubmission","_yield$handleLoaders","_handleAction","getSubmittingNavigation","actionMatch","getTargetMatch","_context4","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","_handleLoaders","activeSubmission","getSubmissionFromNavigation","_getMatchesToLoad","getMatchesToLoad","matchesToLoad","revalidatingFetchers","_context5","updatedFetchers","markFetchRedirectsDone","rf","revalidatingFetcher","getLoadingFetcher","abortFetcher","abortPendingFetchRevalidations","f","callLoadersAndMaybeResolveData","_yield$callLoadersAnd","results","loaderResults","fetcherResults","findRedirect","fetcherKey","_processLoaderData","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","_extends","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","_handleFetcherAction","requestMatches","_context6","existingFetcher","updateFetcherState","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResult","getDoneFetcher","revalidationRequest","loadId","loadFetcher","_getMatchesToLoad3","staleKey","_yield$callLoadersAnd2","_processLoaderData2","doneFetcher","_handleFetcherLoader","_context7","resolveDeferredData","_ref8","redirectLocation","_context8","isDocumentReload","reloadDocument","redirectHistoryAction","_state$navigation","currentMatches","fetchersToLoad","_context9","all","resolveDeferredResults","getFetcher","deleteFetcherAndUpdateState","count","markFetchersDone","_step2","_iterator2","doneKeys","_step3","_iterator3","landedId","yeetedKeys","_step4","_iterator4","getBlocker","blocker","newBlocker","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","_internalSetRoutes","newRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","query","_query","_ref9","requestContext","isValidMethod","_context10","_getShortCircuitMatch3","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","_getShortCircuitMatch4","queryImpl","isResponse","queryRoute","_ref10","_temp4","_context11","find","values","_result$activeDeferre","routeMatch","_context12","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","isRouteRequest","_context14","isStaticRequest","Location","context","loaderRequest","_context15","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","_step5","_iterator5","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","append","boundaryId","boundaryMatches","findIndex","isInitialLoad","currentUrl","nextUrl","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","_context16","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","_callLoaderOrAction","runHandler","handler","onReject","_context17","handlerError","resultType","protocol","isSameBasename","queryRouteResponse","contentType","isDeferredData","deferred","_result$init","_result$init2","_step6","_iterator6","_step7","_iterator7","foundError","newLoaderData","mergedLoaderData","_step8","hasOwnProperty","_iterator8","eligibleMatches","reverse","errorMessage","resolveData","obj","signals","_loop","_context18","isRevalidatingLoader","_context19","_ret","unwrap","_context20","unwrappedData","getAll","_window","transitions","sessionPositions","sessionStorage","getItem","_step9","_iterator9","setItem"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@remix-run\\router\\history.ts","E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@remix-run\\router\\utils.ts","E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@remix-run\\router\\router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n  reloadDocument?: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (args: LoaderFunctionArgs<Context>):\n    | Promise<DataFunctionValue>\n    | DataFunctionValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (args: ActionFunctionArgs<Context>):\n    | Promise<DataFunctionValue>\n    | DataFunctionValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = safelyDecodeURIComponent(value || \"\", paramName);\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === matches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  ActionFunction,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  AgnosticRouteObject,\n  DataResult,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  ImmutableRouteKey,\n  LoaderFunction,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized: boolean;\n  let hasLazyRoutes = initialMatches.some((m) => m.route.lazy);\n  let hasLoaders = initialMatches.some((m) => m.route.loader);\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    initialized = initialMatches.every(\n      (m) =>\n        m.route.loader &&\n        m.route.loader.hydrate !== true &&\n        ((loaderData && loaderData[m.route.id] !== undefined) ||\n          (errors && errors[m.route.id] !== undefined))\n    );\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        future.v7_relativeSplatPath\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors: pendingError || null,\n          ...(pendingActionData ? { actionData: pendingActionData } : {}),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since iot's not a \"navigation\"\n    if (\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration)\n    ) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          fetcher ? fetcher.data : undefined\n        );\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(\n        {\n          navigation: loadingNavigation,\n          ...(actionData\n            ? Object.keys(actionData).length === 0\n              ? { actionData: null }\n              : { actionData }\n            : {}),\n          ...(revalidatingFetchers.length > 0\n            ? { fetchers: new Map(state.fetchers) }\n            : {}),\n        },\n        {\n          flushSync,\n        }\n      );\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      mapRouteProperties,\n      basename,\n      future.v7_relativeSplatPath\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(state, actionResult, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      mapRouteProperties,\n      basename,\n      future.v7_relativeSplatPath\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true,\n    });\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          future.v7_relativeSplatPath\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            f.match,\n            f.matches,\n            manifest,\n            mapRouteProperties,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        future.v7_relativeSplatPath,\n        { isStaticRequest: true, isRouteRequest, requestContext }\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(\n          `${method}() call aborted: ${request.method} ${request.url}`\n        );\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          future.v7_relativeSplatPath,\n          { isStaticRequest: true, isRouteRequest, requestContext }\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(\n        `${method}() call aborted: ${request.method} ${request.url}`\n      );\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n        isRevalidationRequired ||\n        // Clicked the same link, resubmitted a GET form\n        currentUrl.pathname + currentUrl.search ===\n          nextUrl.pathname + nextUrl.search ||\n        // Search params affect all loaders\n        currentUrl.search !== nextUrl.search ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  basename: string,\n  v7_relativeSplatPath: boolean,\n  opts: {\n    isStaticRequest?: boolean;\n    isRouteRequest?: boolean;\n    requestContext?: unknown;\n  } = {}\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({\n        request,\n        params: match.params,\n        context: opts.requestContext,\n      }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(\n          new URL(request.url),\n          matches.slice(0, matches.indexOf(match) + 1),\n          basename,\n          true,\n          location,\n          v7_relativeSplatPath\n        );\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse: QueryRouteResponse = {\n        type:\n          resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result,\n      };\n      throw queryRouteResponse;\n    }\n\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: DataResult[]\n): { result: RedirectResult; idx: number } | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return { result, idx: i };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || obj.type === ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n\n//#endregion\n"]},"metadata":{},"sourceType":"module"}