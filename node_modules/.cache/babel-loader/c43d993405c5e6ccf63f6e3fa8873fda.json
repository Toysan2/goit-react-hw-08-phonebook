{"ast":null,"code":"'use client';\n\n// src/progress.utils.tsx\nimport { keyframes } from \"@chakra-ui/system\";\nfunction valueToPercent(value, min, max) {\n  return (value - min) * 100 / (max - min);\n}\nvar spin = keyframes({\n  \"0%\": {\n    strokeDasharray: \"1, 400\",\n    strokeDashoffset: \"0\"\n  },\n  \"50%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-100\"\n  },\n  \"100%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-260\"\n  }\n});\nvar rotate = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\"\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\"\n  }\n});\nvar progress = keyframes({\n  \"0%\": {\n    left: \"-40%\"\n  },\n  \"100%\": {\n    left: \"100%\"\n  }\n});\nvar stripe = keyframes({\n  from: {\n    backgroundPosition: \"1rem 0\"\n  },\n  to: {\n    backgroundPosition: \"0 0\"\n  }\n});\nfunction getProgressProps(options) {\n  var _options$value = options.value,\n    value = _options$value === void 0 ? 0 : _options$value,\n    min = options.min,\n    max = options.max,\n    valueText = options.valueText,\n    getValueText = options.getValueText,\n    isIndeterminate = options.isIndeterminate,\n    _options$role = options.role,\n    role = _options$role === void 0 ? \"progressbar\" : _options$role;\n  var percent = valueToPercent(value, min, max);\n  var getAriaValueText = function getAriaValueText() {\n    if (value == null) return void 0;\n    return typeof getValueText === \"function\" ? getValueText(value, percent) : valueText;\n  };\n  return {\n    bind: {\n      \"data-indeterminate\": isIndeterminate ? \"\" : void 0,\n      \"aria-valuemax\": max,\n      \"aria-valuemin\": min,\n      \"aria-valuenow\": isIndeterminate ? void 0 : value,\n      \"aria-valuetext\": getAriaValueText(),\n      role: role\n    },\n    percent: percent,\n    value: value\n  };\n}\nexport { spin, rotate, progress, stripe, getProgressProps };","map":{"version":3,"mappings":";;;AAAA,SAASA,iBAAiB;AAE1B,SAASC,eAAeC,OAAeC,KAAaC,KAAa;EAC/D,QAASF,QAAQC,OAAO,OAAQC,MAAMD;AACxC;AAIO,IAAME,OAAiBL,UAAU;EACtC,MAAM;IACJM,iBAAiB;IACjBC,kBAAkB;EACpB;EACA,OAAO;IACLD,iBAAiB;IACjBC,kBAAkB;EACpB;EACA,QAAQ;IACND,iBAAiB;IACjBC,kBAAkB;EACpB;AACF,CAAC;AAEM,IAAMC,SAAmBR,UAAU;EACxC,MAAM;IACJS,WAAW;EACb;EACA,QAAQ;IACNA,WAAW;EACb;AACF,CAAC;AAEM,IAAMC,WAAqBV,UAAU;EAC1C,MAAM;IAAEW,MAAM;EAAO;EACrB,QAAQ;IAAEA,MAAM;EAAO;AACzB,CAAC;AAEM,IAAMC,SAAmBZ,UAAU;EACxCa,MAAM;IAAEC,oBAAoB;EAAS;EACrCC,IAAI;IAAED,oBAAoB;EAAM;AAClC,CAAC;AAgBM,SAASE,iBAAiBC,SAAkC;EACjE,qBAQIA,QAPFf;IAAAA,oCAAQ;IACRC,MAMEc,QANFd;IACAC,MAKEa,QALFb;IACAc,YAIED,QAJFC;IACAC,eAGEF,QAHFE;IACAC,kBAEEH,QAFFG;IAAAC,gBAEEJ,QADFK;IAAAA,kCAAO;EAGT,IAAMC,UAAUtB,eAAeC,OAAOC,KAAKC,GAAG;EAE9C,IAAMoB,mBAAmB,SAAnBA,mBAAyB;IAC7B,IAAItB,SAAS,MAAM,OAAO;IAC1B,OAAO,OAAOiB,iBAAiB,aAC3BA,aAAajB,OAAOqB,OAAO,IAC3BL;EACN;EAEA,OAAO;IACLO,MAAM;MACJ,sBAAsBL,kBAAkB,KAAK;MAC7C,iBAAiBhB;MACjB,iBAAiBD;MACjB,iBAAiBiB,kBAAkB,SAAYlB;MAC/C,kBAAkBsB,iBAAiB;MACnCF;IACF;IACAC;IACArB;EACF;AACF","names":["keyframes","valueToPercent","value","min","max","spin","strokeDasharray","strokeDashoffset","rotate","transform","progress","left","stripe","from","backgroundPosition","to","getProgressProps","options","valueText","getValueText","isIndeterminate","_options$role","role","percent","getAriaValueText","bind"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\progress\\src\\progress.utils.tsx"],"sourcesContent":["import { keyframes } from \"@chakra-ui/system\"\n\nfunction valueToPercent(value: number, min: number, max: number) {\n  return ((value - min) * 100) / (max - min)\n}\n\ntype Keyframe = ReturnType<typeof keyframes>\n\nexport const spin: Keyframe = keyframes({\n  \"0%\": {\n    strokeDasharray: \"1, 400\",\n    strokeDashoffset: \"0\",\n  },\n  \"50%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-100\",\n  },\n  \"100%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-260\",\n  },\n})\n\nexport const rotate: Keyframe = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\",\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\",\n  },\n})\n\nexport const progress: Keyframe = keyframes({\n  \"0%\": { left: \"-40%\" },\n  \"100%\": { left: \"100%\" },\n})\n\nexport const stripe: Keyframe = keyframes({\n  from: { backgroundPosition: \"1rem 0\" },\n  to: { backgroundPosition: \"0 0\" },\n})\n\nexport interface GetProgressPropsOptions {\n  value?: number\n  min: number\n  max: number\n  valueText?: string\n  getValueText?(value: number, percent: number): string\n  isIndeterminate?: boolean\n  role?: React.AriaRole\n}\n\n/**\n * Get the common `aria-*` attributes for both the linear and circular\n * progress components.\n */\nexport function getProgressProps(options: GetProgressPropsOptions) {\n  const {\n    value = 0,\n    min,\n    max,\n    valueText,\n    getValueText,\n    isIndeterminate,\n    role = \"progressbar\",\n  } = options\n\n  const percent = valueToPercent(value, min, max)\n\n  const getAriaValueText = () => {\n    if (value == null) return undefined\n    return typeof getValueText === \"function\"\n      ? getValueText(value, percent)\n      : valueText\n  }\n\n  return {\n    bind: {\n      \"data-indeterminate\": isIndeterminate ? \"\" : undefined,\n      \"aria-valuemax\": max,\n      \"aria-valuemin\": min,\n      \"aria-valuenow\": isIndeterminate ? undefined : value,\n      \"aria-valuetext\": getAriaValueText(),\n      role,\n    },\n    percent,\n    value,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}