{"ast":null,"code":"'use client';\n\n// src/index.ts\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\";\nfunction isRefObject(val) {\n  return \"current\" in val;\n}\nvar isDom = function isDom() {\n  return typeof window !== \"undefined\";\n};\nfunction getPlatform() {\n  var _a;\n  var agent = navigator.userAgentData;\n  return (_a = agent == null ? void 0 : agent.platform) != null ? _a : navigator.platform;\n}\nvar vn = function vn(v) {\n  return isDom() && v.test(navigator.vendor);\n};\nvar pt = function pt(v) {\n  return isDom() && v.test(getPlatform());\n};\nvar isApple = function isApple() {\n  return pt(/mac|iphone|ipad|ipod/i);\n};\nvar isSafari = function isSafari() {\n  return isApple() && vn(/apple/i);\n};\nfunction useFocusOnPointerDown(props) {\n  var ref = props.ref,\n    elements = props.elements,\n    enabled = props.enabled;\n  var doc = function doc() {\n    var _a, _b;\n    return (_b = (_a = ref.current) == null ? void 0 : _a.ownerDocument) != null ? _b : document;\n  };\n  useEventListener(doc, \"pointerdown\", function (event) {\n    if (!isSafari() || !enabled) return;\n    var target = event.target;\n    var els = elements != null ? elements : [ref];\n    var isValidTarget = els.some(function (elementOrRef) {\n      var el = isRefObject(elementOrRef) ? elementOrRef.current : elementOrRef;\n      return (el == null ? void 0 : el.contains(target)) || el === target;\n    });\n    if (doc().activeElement !== target && isValidTarget) {\n      event.preventDefault();\n      target.focus();\n    }\n  });\n}\nexport { useFocusOnPointerDown };","map":{"version":3,"mappings":";;;AAAA,SAASA,wBAAwB;AAQjC,SAASC,YAAYC,KAAmC;EACtD,OAAO,aAAaA;AACtB;AAEA,IAAMC,QAAQ,SAARA;EAAA,OAAc,OAAOC,WAAW;AAAA;AACtC,SAASC,cAAc;EAbvB;EAcE,IAAMC,QAASC,UAAkBC;EACjC,QAAOC,oCAAOC,aAAP,YAAmBH,UAAUG;AACtC;AACA,IAAMC,KAAK,SAALA,GAAMC;EAAA,OAAcT,MAAM,KAAKS,EAAEC,KAAKN,UAAUO,MAAM;AAAA;AAC5D,IAAMC,KAAK,SAALA,GAAMH;EAAA,OAAcT,MAAM,KAAKS,EAAEC,KAAKR,YAAY,CAAC;AAAA;AACzD,IAAMW,UAAU,SAAVA;EAAA,OAAgBD,GAAG,uBAAuB;AAAA;AAChD,IAAME,WAAW,SAAXA;EAAA,OAAiBD,QAAQ,KAAKL,GAAG,QAAQ;AAAA;AAWxC,SAASO,sBAAsBC,OAAiC;EACrE,IAAQC,MAA2BD,MAA3BC;IAAKC,WAAsBF,MAAtBE;IAAUC,UAAYH,MAAZG;EAEvB,IAAMC,MAAM,SAANA,MAAS;IAlCjB;IAkCoB,uBAAIC,YAAJ,mBAAaC,kBAAb,YAA8BC;EAAA;EAEhD1B,iBAAiBuB,KAAK,eAAe,UAACI,OAAU;IAC9C,IAAI,CAACV,SAAS,KAAK,CAACK,SAAS;IAC7B,IAAMM,SAASD,MAAMC;IAErB,IAAMC,MAAMR,8BAAY,CAACD,GAAG;IAC5B,IAAMU,gBAAgBD,IAAIE,KAAK,UAACC,cAAiB;MAC/C,IAAMC,KAAKhC,YAAY+B,YAAY,IAAIA,aAAaR,UAAUQ;MAC9D,QAAOC,yBAAIC,SAASN,YAAWK,OAAOL;IACxC,CAAC;IAED,IAAIL,IAAI,EAAEY,kBAAkBP,UAAUE,eAAe;MACnDH,MAAMS,eAAe;MACrBR,OAAOS,MAAM;IACf;EACF,CAAC;AACH","names":["useEventListener","isRefObject","val","isDom","window","getPlatform","agent","navigator","userAgentData","_a","platform","vn","v","test","vendor","pt","isApple","isSafari","useFocusOnPointerDown","props","ref","elements","enabled","doc","current","ownerDocument","document","event","target","els","isValidTarget","some","elementOrRef","el","contains","activeElement","preventDefault","focus"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\react-use-focus-on-pointer-down\\src\\index.ts"],"sourcesContent":["import { useEventListener } from \"@chakra-ui/react-use-event-listener\"\n\nexport interface UseFocusOnMouseDownProps {\n  enabled?: boolean\n  ref: React.RefObject<HTMLElement>\n  elements?: Array<React.RefObject<HTMLElement> | HTMLElement | null>\n}\n\nfunction isRefObject(val: any): val is { current: any } {\n  return \"current\" in val\n}\n\nconst isDom = () => typeof window !== \"undefined\"\nfunction getPlatform() {\n  const agent = (navigator as any).userAgentData\n  return agent?.platform ?? navigator.platform\n}\nconst vn = (v: RegExp) => isDom() && v.test(navigator.vendor)\nconst pt = (v: RegExp) => isDom() && v.test(getPlatform())\nconst isApple = () => pt(/mac|iphone|ipad|ipod/i)\nconst isSafari = () => isApple() && vn(/apple/i)\n\n/**\n * Polyfill to get `relatedTarget` working correctly consistently\n * across all browsers.\n *\n * It ensures that elements receives focus on pointer down if\n * it's not the active element.\n *\n * @internal\n */\nexport function useFocusOnPointerDown(props: UseFocusOnMouseDownProps) {\n  const { ref, elements, enabled } = props\n\n  const doc = () => ref.current?.ownerDocument ?? document\n\n  useEventListener(doc, \"pointerdown\", (event) => {\n    if (!isSafari() || !enabled) return\n    const target = event.target as HTMLElement\n\n    const els = elements ?? [ref]\n    const isValidTarget = els.some((elementOrRef) => {\n      const el = isRefObject(elementOrRef) ? elementOrRef.current : elementOrRef\n      return el?.contains(target) || el === target\n    })\n\n    if (doc().activeElement !== target && isValidTarget) {\n      event.preventDefault()\n      target.focus()\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}