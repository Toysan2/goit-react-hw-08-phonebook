{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"min\", \"max\", \"onChange\", \"value\", \"defaultValue\", \"isReversed\", \"direction\", \"orientation\", \"id\", \"isDisabled\", \"isReadOnly\", \"onChangeStart\", \"onChangeEnd\", \"step\", \"getAriaValueText\", \"aria-valuetext\", \"aria-label\", \"aria-labelledby\", \"name\", \"focusThumbOnChange\"];\nimport { ariaAttr, callAllHandlers, dataAttr } from \"./chunk-DX64QB22.mjs\";\nimport { getIsReversed, getStyles } from \"./chunk-E23N4XEN.mjs\";\n\n// src/use-slider.ts\nimport { usePanEvent } from \"@chakra-ui/react-use-pan-event\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { useSize } from \"@chakra-ui/react-use-size\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { useLatestRef } from \"@chakra-ui/react-use-latest-ref\";\nimport { clampValue, percentToValue, roundValueToStep, valueToPercent } from \"@chakra-ui/number-utils\";\nimport { useCallback, useMemo, useRef, useId, useState } from \"react\";\nfunction useSlider(props) {\n  var _a;\n  var _props$min = props.min,\n    min = _props$min === void 0 ? 0 : _props$min,\n    _props$max = props.max,\n    max = _props$max === void 0 ? 100 : _props$max,\n    onChange = props.onChange,\n    valueProp = props.value,\n    defaultValue = props.defaultValue,\n    isReversedProp = props.isReversed,\n    _props$direction = props.direction,\n    direction = _props$direction === void 0 ? \"ltr\" : _props$direction,\n    _props$orientation = props.orientation,\n    orientation = _props$orientation === void 0 ? \"horizontal\" : _props$orientation,\n    idProp = props.id,\n    isDisabled = props.isDisabled,\n    isReadOnly = props.isReadOnly,\n    onChangeStartProp = props.onChangeStart,\n    onChangeEndProp = props.onChangeEnd,\n    _props$step = props.step,\n    step = _props$step === void 0 ? 1 : _props$step,\n    getAriaValueTextProp = props.getAriaValueText,\n    ariaValueText = props[\"aria-valuetext\"],\n    ariaLabel = props[\"aria-label\"],\n    ariaLabelledBy = props[\"aria-labelledby\"],\n    name = props.name,\n    _props$focusThumbOnCh = props.focusThumbOnChange,\n    focusThumbOnChange = _props$focusThumbOnCh === void 0 ? true : _props$focusThumbOnCh,\n    htmlProps = _objectWithoutProperties(props, _excluded);\n  var onChangeStart = useCallbackRef(onChangeStartProp);\n  var onChangeEnd = useCallbackRef(onChangeEndProp);\n  var getAriaValueText = useCallbackRef(getAriaValueTextProp);\n  var isReversed = getIsReversed({\n    isReversed: isReversedProp,\n    direction: direction,\n    orientation: orientation\n  });\n  var _useControllableState = useControllableState({\n      value: valueProp,\n      defaultValue: defaultValue != null ? defaultValue : getDefaultValue(min, max),\n      onChange: onChange\n    }),\n    _useControllableState2 = _slicedToArray(_useControllableState, 2),\n    computedValue = _useControllableState2[0],\n    setValue = _useControllableState2[1];\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isDragging = _useState2[0],\n    setDragging = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isFocused = _useState4[0],\n    setFocused = _useState4[1];\n  var isInteractive = !(isDisabled || isReadOnly);\n  var tenSteps = (max - min) / 10;\n  var oneStep = step || (max - min) / 100;\n  var value = clampValue(computedValue, min, max);\n  var reversedValue = max - value + min;\n  var trackValue = isReversed ? reversedValue : value;\n  var thumbPercent = valueToPercent(trackValue, min, max);\n  var isVertical = orientation === \"vertical\";\n  var stateRef = useLatestRef({\n    min: min,\n    max: max,\n    step: step,\n    isDisabled: isDisabled,\n    value: value,\n    isInteractive: isInteractive,\n    isReversed: isReversed,\n    isVertical: isVertical,\n    eventSource: null,\n    focusThumbOnChange: focusThumbOnChange,\n    orientation: orientation\n  });\n  var trackRef = useRef(null);\n  var thumbRef = useRef(null);\n  var rootRef = useRef(null);\n  var reactId = useId();\n  var uuid = idProp != null ? idProp : reactId;\n  var thumbId = \"slider-thumb-\".concat(uuid),\n    trackId = \"slider-track-\".concat(uuid);\n  var getValueFromPointer = useCallback(function (event) {\n    var _a2, _b;\n    if (!trackRef.current) return;\n    var state2 = stateRef.current;\n    state2.eventSource = \"pointer\";\n    var trackRect = trackRef.current.getBoundingClientRect();\n    var _ref = (_b = (_a2 = event.touches) == null ? void 0 : _a2[0]) != null ? _b : event,\n      clientX = _ref.clientX,\n      clientY = _ref.clientY;\n    var diff = isVertical ? trackRect.bottom - clientY : clientX - trackRect.left;\n    var length = isVertical ? trackRect.height : trackRect.width;\n    var percent = diff / length;\n    if (isReversed) {\n      percent = 1 - percent;\n    }\n    var nextValue = percentToValue(percent, state2.min, state2.max);\n    if (state2.step) {\n      nextValue = parseFloat(roundValueToStep(nextValue, state2.min, state2.step));\n    }\n    nextValue = clampValue(nextValue, state2.min, state2.max);\n    return nextValue;\n  }, [isVertical, isReversed, stateRef]);\n  var constrain = useCallback(function (value2) {\n    var state2 = stateRef.current;\n    if (!state2.isInteractive) return;\n    value2 = parseFloat(roundValueToStep(value2, state2.min, oneStep));\n    value2 = clampValue(value2, state2.min, state2.max);\n    setValue(value2);\n  }, [oneStep, setValue, stateRef]);\n  var actions = useMemo(function () {\n    return {\n      stepUp: function stepUp() {\n        var step2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : oneStep;\n        var next = isReversed ? value - step2 : value + step2;\n        constrain(next);\n      },\n      stepDown: function stepDown() {\n        var step2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : oneStep;\n        var next = isReversed ? value + step2 : value - step2;\n        constrain(next);\n      },\n      reset: function reset() {\n        constrain(defaultValue || 0);\n      },\n      stepTo: function stepTo(value2) {\n        constrain(value2);\n      }\n    };\n  }, [constrain, isReversed, value, oneStep, defaultValue]);\n  var onKeyDown = useCallback(function (event) {\n    var state2 = stateRef.current;\n    var keyMap = {\n      ArrowRight: function ArrowRight() {\n        return actions.stepUp();\n      },\n      ArrowUp: function ArrowUp() {\n        return actions.stepUp();\n      },\n      ArrowLeft: function ArrowLeft() {\n        return actions.stepDown();\n      },\n      ArrowDown: function ArrowDown() {\n        return actions.stepDown();\n      },\n      PageUp: function PageUp() {\n        return actions.stepUp(tenSteps);\n      },\n      PageDown: function PageDown() {\n        return actions.stepDown(tenSteps);\n      },\n      Home: function Home() {\n        return constrain(state2.min);\n      },\n      End: function End() {\n        return constrain(state2.max);\n      }\n    };\n    var action = keyMap[event.key];\n    if (action) {\n      event.preventDefault();\n      event.stopPropagation();\n      action(event);\n      state2.eventSource = \"keyboard\";\n    }\n  }, [actions, constrain, tenSteps, stateRef]);\n  var valueText = (_a = getAriaValueText == null ? void 0 : getAriaValueText(value)) != null ? _a : ariaValueText;\n  var thumbSize = useSize(thumbRef);\n  var _useMemo = useMemo(function () {\n      var state2 = stateRef.current;\n      var thumbRect = thumbSize != null ? thumbSize : {\n        width: 0,\n        height: 0\n      };\n      return getStyles({\n        isReversed: isReversed,\n        orientation: state2.orientation,\n        thumbRects: [thumbRect],\n        thumbPercents: [thumbPercent]\n      });\n    }, [isReversed, thumbSize, thumbPercent, stateRef]),\n    getThumbStyle = _useMemo.getThumbStyle,\n    rootStyle = _useMemo.rootStyle,\n    trackStyle = _useMemo.trackStyle,\n    innerTrackStyle = _useMemo.innerTrackStyle;\n  var focusThumb = useCallback(function () {\n    var state2 = stateRef.current;\n    if (state2.focusThumbOnChange) {\n      setTimeout(function () {\n        var _a2;\n        return (_a2 = thumbRef.current) == null ? void 0 : _a2.focus();\n      });\n    }\n  }, [stateRef]);\n  useUpdateEffect(function () {\n    var state2 = stateRef.current;\n    focusThumb();\n    if (state2.eventSource === \"keyboard\") {\n      onChangeEnd == null ? void 0 : onChangeEnd(state2.value);\n    }\n  }, [value, onChangeEnd]);\n  function setValueFromPointer(event) {\n    var nextValue = getValueFromPointer(event);\n    if (nextValue != null && nextValue !== stateRef.current.value) {\n      setValue(nextValue);\n    }\n  }\n  usePanEvent(rootRef, {\n    onPanSessionStart: function onPanSessionStart(event) {\n      var state2 = stateRef.current;\n      if (!state2.isInteractive) return;\n      setDragging(true);\n      focusThumb();\n      setValueFromPointer(event);\n      onChangeStart == null ? void 0 : onChangeStart(state2.value);\n    },\n    onPanSessionEnd: function onPanSessionEnd() {\n      var state2 = stateRef.current;\n      if (!state2.isInteractive) return;\n      setDragging(false);\n      onChangeEnd == null ? void 0 : onChangeEnd(state2.value);\n    },\n    onPan: function onPan(event) {\n      var state2 = stateRef.current;\n      if (!state2.isInteractive) return;\n      setValueFromPointer(event);\n    }\n  });\n  var getRootProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread(_objectSpread({}, props2), htmlProps), {}, {\n      ref: mergeRefs(ref, rootRef),\n      tabIndex: -1,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      \"data-focused\": dataAttr(isFocused),\n      style: _objectSpread(_objectSpread({}, props2.style), rootStyle)\n    });\n  }, [htmlProps, isDisabled, isFocused, rootStyle]);\n  var getTrackProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      ref: mergeRefs(ref, trackRef),\n      id: trackId,\n      \"data-disabled\": dataAttr(isDisabled),\n      style: _objectSpread(_objectSpread({}, props2.style), trackStyle)\n    });\n  }, [isDisabled, trackId, trackStyle]);\n  var getInnerTrackProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      ref: ref,\n      style: _objectSpread(_objectSpread({}, props2.style), innerTrackStyle)\n    });\n  }, [innerTrackStyle]);\n  var getThumbProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      ref: mergeRefs(ref, thumbRef),\n      role: \"slider\",\n      tabIndex: isInteractive ? 0 : void 0,\n      id: thumbId,\n      \"data-active\": dataAttr(isDragging),\n      \"aria-valuetext\": valueText,\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": value,\n      \"aria-orientation\": orientation,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      \"aria-readonly\": ariaAttr(isReadOnly),\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabel ? void 0 : ariaLabelledBy,\n      style: _objectSpread(_objectSpread({}, props2.style), getThumbStyle(0)),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props2.onFocus, function () {\n        return setFocused(true);\n      }),\n      onBlur: callAllHandlers(props2.onBlur, function () {\n        return setFocused(false);\n      })\n    });\n  }, [isInteractive, thumbId, isDragging, valueText, min, max, value, orientation, isDisabled, isReadOnly, ariaLabel, ariaLabelledBy, getThumbStyle, onKeyDown]);\n  var getMarkerProps = useCallback(function (props2) {\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var isInRange = !(props2.value < min || props2.value > max);\n    var isHighlighted = value >= props2.value;\n    var markerPercent = valueToPercent(props2.value, min, max);\n    var markerStyle = _objectSpread({\n      position: \"absolute\",\n      pointerEvents: \"none\"\n    }, orient({\n      orientation: orientation,\n      vertical: {\n        bottom: isReversed ? \"\".concat(100 - markerPercent, \"%\") : \"\".concat(markerPercent, \"%\")\n      },\n      horizontal: {\n        left: isReversed ? \"\".concat(100 - markerPercent, \"%\") : \"\".concat(markerPercent, \"%\")\n      }\n    }));\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      ref: ref,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(!isInRange),\n      \"data-highlighted\": dataAttr(isHighlighted),\n      style: _objectSpread(_objectSpread({}, props2.style), markerStyle)\n    });\n  }, [isDisabled, isReversed, max, min, orientation, value]);\n  var getInputProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      ref: ref,\n      type: \"hidden\",\n      value: value,\n      name: name\n    });\n  }, [name, value]);\n  var state = {\n    value: value,\n    isFocused: isFocused,\n    isDragging: isDragging\n  };\n  return {\n    state: state,\n    actions: actions,\n    getRootProps: getRootProps,\n    getTrackProps: getTrackProps,\n    getInnerTrackProps: getInnerTrackProps,\n    getThumbProps: getThumbProps,\n    getMarkerProps: getMarkerProps,\n    getInputProps: getInputProps\n  };\n}\nfunction orient(options) {\n  var orientation = options.orientation,\n    vertical = options.vertical,\n    horizontal = options.horizontal;\n  return orientation === \"vertical\" ? vertical : horizontal;\n}\nfunction getDefaultValue(min, max) {\n  return max < min ? min : min + (max - min) / 2;\n}\nexport { useSlider };","map":{"version":3,"mappings":";;;;;;;;;;AAAA,SAASA,mBAAmB;AAC5B,SAASC,sBAAsB;AAC/B,SAASC,uBAAuB;AAChC,SAASC,4BAA4B;AACrC,SAASC,eAAe;AACxB,SAASC,iBAAiB;AAC1B,SAASC,oBAAoB;AAE7B,SACEC,YACAC,gBACAC,kBACAC,sBACK;AAEP,SAASC,aAAaC,SAASC,QAAQC,OAAOC,gBAAgB;AAyHvD,SAASC,UAAUC,OAAuB;EAxIjD;EAyIE,iBAsBIA,MArBFC;IAAAA,8BAAM;IAAAC,aAqBJF,MApBFG;IAAAA,8BAAM;IACNC,WAmBEJ,MAnBFI;IACOC,YAkBLL,MAlBFM;IACAC,eAiBEP,MAjBFO;IACYC,iBAgBVR,MAhBFS;IAAAC,mBAgBEV,MAfFW;IAAAA,0CAAY;IAAAC,qBAeVZ,MAdFa;IAAAA,8CAAc;IACVC,SAaFd,MAbFe;IACAC,aAYEhB,MAZFgB;IACAC,aAWEjB,MAXFiB;IACeC,oBAUblB,MAVFmB;IACaC,kBASXpB,MATFqB;IAAAC,cASEtB,MARFuB;IAAAA,gCAAO;IACWC,uBAOhBxB,MAPFyB;IACkBC,gBAMhB1B,MANF;IACc2B,YAKZ3B,MALF;IACmB4B,iBAIjB5B,MAJF;IACA6B,OAGE7B,MAHF6B;IAAAC,wBAGE9B,MAFF+B;IAAAA,wDAAqB;IAClBC,qCACDhC;EAEJ,IAAMmB,gBAAgBnC,eAAekC,iBAAiB;EACtD,IAAMG,cAAcrC,eAAeoC,eAAe;EAClD,IAAMK,mBAAmBzC,eAAewC,oBAAoB;EAE5D,IAAMf,aAAawB,cAAc;IAC/BxB,YAAYD;IACZG;IACAE;EACF,CAAC;EAKD,4BAAkC3B,qBAAqB;MACrDoB,OAAOD;MACPE,cAAcA,sCAAgB2B,gBAAgBjC,KAAKE,GAAG;MACtDC;IACF,CAAC;IAAA+B;IAJMC;IAAeC,QAAQ;EAM9B,gBAAkCvC,SAAS,KAAK;IAAAwC;IAAzCC;IAAYC,WAAW;EAC9B,iBAAgC1C,SAAS,KAAK;IAAA2C;IAAvCC;IAAWC,UAAU;EAC5B,IAAMC,gBAAgB,EAAE5B,cAAcC;EAEtC,IAAM4B,YAAY1C,MAAMF,OAAO;EAC/B,IAAM6C,UAAUvB,SAASpB,MAAMF,OAAO;EAMtC,IAAMK,QAAQhB,WAAW8C,eAAenC,KAAKE,GAAG;EAChD,IAAM4C,gBAAgB5C,MAAMG,QAAQL;EACpC,IAAM+C,aAAavC,aAAasC,gBAAgBzC;EAChD,IAAM2C,eAAexD,eAAeuD,YAAY/C,KAAKE,GAAG;EAExD,IAAM+C,aAAarC,gBAAgB;EAEnC,IAAMsC,WAAW9D,aAAa;IAC5BY;IACAE;IACAoB;IACAP;IACAV;IACAsC;IACAnC;IACAyC;IACAE,aAAa;IACbrB;IACAlB;EACF,CAAC;EAKD,IAAMwC,WAAWzD,OAAoB,IAAI;EACzC,IAAM0D,WAAW1D,OAAoB,IAAI;EACzC,IAAM2D,UAAU3D,OAAoB,IAAI;EAKxC,IAAM4D,UAAU3D,MAAM;EACtB,IAAM4D,OAAO3C,0BAAU0C;EACvB,IAAOE,iCAAqCD;IAA5BE,OAAO,0BAA6CF;EASpE,IAAMG,sBAAsBlE,YAC1B,UAACmE,OAAe;IA1OpB;IA2OM,IAAI,CAACR,SAASS,SAAS;IAEvB,IAAMC,SAAQZ,SAASW;IACvBC,OAAMX,cAAc;IAEpB,IAAMY,YAAYX,SAASS,QAAQG,sBAAsB;IACzD,WAAyB,CAAIC,kBAAMC,YAAN,oBAAgB,OAAhB,YAAsBN;MAA3CO;MAASC;IAEjB,IAAMC,OAAOpB,aACTc,UAAUO,SAASF,UACnBD,UAAUJ,UAAUQ;IAExB,IAAMC,SAASvB,aAAac,UAAUU,SAASV,UAAUW;IACzD,IAAIC,UAAUN,OAAOG;IAErB,IAAIhE,YAAY;MACdmE,UAAU,IAAIA;IAChB;IAEA,IAAIC,YAAYtF,eAAeqF,SAASb,OAAM9D,KAAK8D,OAAM5D,GAAG;IAE5D,IAAI4D,OAAMxC,MAAM;MACdsD,YAAYC,WACVtF,iBAAiBqF,WAAWd,OAAM9D,KAAK8D,OAAMxC,IAAI,CACnD;IACF;IAEAsD,YAAYvF,WAAWuF,WAAWd,OAAM9D,KAAK8D,OAAM5D,GAAG;IAEtD,OAAO0E;EACT,GACA,CAAC3B,YAAYzC,YAAY0C,QAAQ,CACnC;EAEA,IAAM4B,YAAYrF,YAChB,UAACY,QAAkB;IACjB,IAAMyD,SAAQZ,SAASW;IACvB,IAAI,CAACC,OAAMnB,eAAe;IAC1BtC,SAAQwE,WAAWtF,iBAAiBc,QAAOyD,OAAM9D,KAAK6C,OAAO,CAAC;IAC9DxC,SAAQhB,WAAWgB,QAAOyD,OAAM9D,KAAK8D,OAAM5D,GAAG;IAC9CkC,SAAS/B,MAAK;EAChB,GACA,CAACwC,SAAST,UAAUc,QAAQ,CAC9B;EAEA,IAAM6B,UAAyBrF,QAC7B;IAAA,OAAO;MACLsF,0BAAuB;QAAA,IAAhB1D,4EAAOuB;QACZ,IAAMoC,OAAOzE,aAAaH,QAAQiB,QAAOjB,QAAQiB;QACjDwD,UAAUG,IAAI;MAChB;MACAC,8BAAyB;QAAA,IAAhB5D,4EAAOuB;QACd,IAAMoC,OAAOzE,aAAaH,QAAQiB,QAAOjB,QAAQiB;QACjDwD,UAAUG,IAAI;MAChB;MACAE,wBAAQ;QACNL,UAAUxE,gBAAgB,CAAC;MAC7B;MACA8E,wBAAO/E,QAAe;QACpByE,UAAUzE,MAAK;MACjB;IACF;EAAA,GACA,CAACyE,WAAWtE,YAAYH,OAAOwC,SAASvC,YAAY,CACtD;EAMA,IAAM+E,YAAY5F,YAChB,UAACmE,OAA+B;IAC9B,IAAME,SAAQZ,SAASW;IAEvB,IAAMyB,SAAqD;MACzDC,YAAY;QAAA,OAAMR,QAAQC,OAAO;MAAA;MACjCQ,SAAS;QAAA,OAAMT,QAAQC,OAAO;MAAA;MAC9BS,WAAW;QAAA,OAAMV,QAAQG,SAAS;MAAA;MAClCQ,WAAW;QAAA,OAAMX,QAAQG,SAAS;MAAA;MAClCS,QAAQ;QAAA,OAAMZ,QAAQC,OAAOpC,QAAQ;MAAA;MACrCgD,UAAU;QAAA,OAAMb,QAAQG,SAAStC,QAAQ;MAAA;MACzCiD,MAAM;QAAA,OAAMf,UAAUhB,OAAM9D,GAAG;MAAA;MAC/B8F,KAAK;QAAA,OAAMhB,UAAUhB,OAAM5D,GAAG;MAAA;IAChC;IAEA,IAAM6F,SAAST,OAAO1B,MAAMoC,GAAG;IAE/B,IAAID,QAAQ;MACVnC,MAAMqC,eAAe;MACrBrC,MAAMsC,gBAAgB;MACtBH,OAAOnC,KAAK;MACZE,OAAMX,cAAc;IACtB;EACF,GACA,CAAC4B,SAASD,WAAWlC,UAAUM,QAAQ,CACzC;EAMA,IAAMiD,aAAYC,0DAAmB/F,WAAnB,YAA6BoB;EAM/C,IAAM4E,YAAYnH,QAAQmE,QAAQ;EAKlC,eACE3D,QAAQ,YAAM;MACZ,IAAMoE,SAAQZ,SAASW;MAEvB,IAAMyC,YAAYD,gCAAa;QAAE3B,OAAO;QAAGD,QAAQ;MAAE;MACrD,OAAO8B,UAAU;QACf/F;QACAI,aAAakD,OAAMlD;QACnB4F,YAAY,CAACF,SAAS;QACtBG,eAAe,CAACzD,YAAY;MAC9B,CAAC;IACH,GAAG,CAACxC,YAAY6F,WAAWrD,cAAcE,QAAQ,CAAC;IAX5CwD;IAAeC;IAAWC;IAAYC;EAa9C,IAAMC,aAAarH,YAAY,YAAM;IACnC,IAAMqE,SAAQZ,SAASW;IACvB,IAAIC,OAAMhC,oBAAoB;MAC5BiF,WAAW,YAAG;QA1WpB;QA0WuB,uBAASlD,YAAT,oBAAkBmD;MAAA,CAAO;IAC5C;EACF,GAAG,CAAC9D,QAAQ,CAAC;EAEblE,gBAAgB,YAAM;IACpB,IAAM8E,SAAQZ,SAASW;IACvBiD,WAAW;IACX,IAAIhD,OAAMX,gBAAgB,YAAY;MACpC/B,2CAAc0C,OAAMzD;IACtB;EACF,GAAG,CAACA,OAAOe,WAAW,CAAC;EAEvB,SAAS6F,oBAAoBrD,OAA+C;IAC1E,IAAMgB,YAAYjB,oBAAoBC,KAAK;IAC3C,IAAIgB,aAAa,QAAQA,cAAc1B,SAASW,QAAQxD,OAAO;MAC7D+B,SAASwC,SAAS;IACpB;EACF;EAEA9F,YAAYwE,SAAS;IACnB4D,8CAAkBtD,OAAO;MACvB,IAAME,SAAQZ,SAASW;MACvB,IAAI,CAACC,OAAMnB,eAAe;MAC1BJ,YAAY,IAAI;MAChBuE,WAAW;MACXG,oBAAoBrD,KAAK;MACzB1C,+CAAgB4C,OAAMzD;IACxB;IACA8G,4CAAkB;MAChB,IAAMrD,SAAQZ,SAASW;MACvB,IAAI,CAACC,OAAMnB,eAAe;MAC1BJ,YAAY,KAAK;MACjBnB,2CAAc0C,OAAMzD;IACtB;IACA+G,sBAAMxD,OAAO;MACX,IAAME,SAAQZ,SAASW;MACvB,IAAI,CAACC,OAAMnB,eAAe;MAC1BsE,oBAAoBrD,KAAK;IAC3B;EACF,CAAC;EAED,IAAMyD,eAA2B5H,YAC/B,YAA4B;IAAA,IAA3BM,6EAAQ,CAAC;IAAA,IAAGuH,0EAAM;IACjB,qDACKvH,SACAgC;MACHuF,KAAKnI,UAAUmI,KAAKhE,OAAO;MAC3BiE,UAAU;MACV,iBAAiBC,SAASzG,UAAU;MACpC,gBAAgB0G,SAAShF,SAAS;MAClCiF,uCACK3H,OAAM2H,QACNf;IACL;EAEJ,GACA,CAAC5E,WAAWhB,YAAY0B,WAAWkE,SAAS,CAC9C;EAEA,IAAMgB,gBAA4BlI,YAChC,YAA4B;IAAA,IAA3BM,6EAAQ,CAAC;IAAA,IAAGuH,0EAAM;IACjB,uCACKvH;MACHuH,KAAKnI,UAAUmI,KAAKlE,QAAQ;MAC5BtC,IAAI4C;MACJ,iBAAiB+D,SAAS1G,UAAU;MACpC2G,uCACK3H,OAAM2H,QACNd;IACL;EAEJ,GACA,CAAC7F,YAAY2C,SAASkD,UAAU,CAClC;EAEA,IAAMgB,qBAAiCnI,YACrC,YAA4B;IAAA,IAA3BM,6EAAQ,CAAC;IAAA,IAAGuH,0EAAM;IACjB,uCACKvH;MACHuH;MACAI,uCACK3H,OAAM2H,QACNb;IACL;EAEJ,GACA,CAACA,eAAe,CAClB;EAEA,IAAMgB,gBAA4BpI,YAChC,YAA4B;IAAA,IAA3BM,6EAAQ,CAAC;IAAA,IAAGuH,0EAAM;IACjB,uCACKvH;MACHuH,KAAKnI,UAAUmI,KAAKjE,QAAQ;MAC5ByE,MAAM;MACNP,UAAU5E,gBAAgB,IAAI;MAC9B7B,IAAI2C;MACJ,eAAegE,SAASnF,UAAU;MAClC,kBAAkB6D;MAClB,iBAAiBnG;MACjB,iBAAiBE;MACjB,iBAAiBG;MACjB,oBAAoBO;MACpB,iBAAiB4G,SAASzG,UAAU;MACpC,iBAAiByG,SAASxG,UAAU;MACpC,cAAcU;MACd,mBAAmBA,YAAY,SAAYC;MAC3C+F,uCACK3H,OAAM2H,QACNhB,cAAc,CAAC,EACpB;MACArB,WAAW0C,gBAAgBhI,OAAMsF,WAAWA,SAAS;MACrD2C,SAASD,gBAAgBhI,OAAMiI,SAAS;QAAA,OAAMtF,WAAW,IAAI,CAAC;MAAA;MAC9DuF,QAAQF,gBAAgBhI,OAAMkI,QAAQ;QAAA,OAAMvF,WAAW,KAAK,CAAC;MAAA;IAAA;EAEjE,GACA,CACEC,eACAc,SACAnB,YACA6D,WACAnG,KACAE,KACAG,OACAO,aACAG,YACAC,YACAU,WACAC,gBACA+E,eACArB,UAEJ;EAEA,IAAM6C,iBAAwDzI,YAC5D,UAACM,QAAsB;IAAA,IAAfuH,0EAAM;IACZ,IAAMa,YAAY,EAAEpI,OAAMM,QAAQL,OAAOD,OAAMM,QAAQH;IACvD,IAAMkI,gBAAgB/H,SAASN,OAAMM;IACrC,IAAMgI,gBAAgB7I,eAAeO,OAAMM,OAAOL,KAAKE,GAAG;IAE1D,IAAMoI;MACJC,UAAU;MACVC,eAAe;IAAA,GACZC,OAAO;MACR7H;MACA8H,UAAU;QACRpE,QAAQ9D,uBACD,MAAM6H,gCACNA;MACT;MACAM,YAAY;QACVpE,MAAM/D,uBAAgB,MAAM6H,gCAAsBA;MACpD;IACF,CAAC,EACH;IAEA,uCACKtI;MACHuH;MACAQ,MAAM;MACN,eAAe;MACf,iBAAiBL,SAAS1G,UAAU;MACpC,gBAAgB0G,SAAS,CAACU,SAAS;MACnC,oBAAoBV,SAASW,aAAa;MAC1CV,uCACK3H,OAAM2H,QACNY;IACL;EAEJ,GACA,CAACvH,YAAYP,YAAYN,KAAKF,KAAKY,aAAaP,KAAK,CACvD;EAEA,IAAMuI,gBAA4BnJ,YAChC,YAA4B;IAAA,IAA3BM,6EAAQ,CAAC;IAAA,IAAGuH,0EAAM;IACjB,uCACKvH;MACHuH;MACAuB,MAAM;MACNxI;MACAuB;IAAA;EAEJ,GACA,CAACA,MAAMvB,KAAK,CACd;EAEA,IAAMyD,QAAqB;IAAEzD;IAAOoC;IAAWH;EAAW;EAE1D,OAAO;IACLwB;IACAiB;IACAsC;IACAM;IACAC;IACAC;IACAK;IACAU;EACF;AACF;AAIA,SAASH,OAAOK,SAIb;EACD,IAAQlI,cAAsCkI,QAAtClI;IAAa8H,WAAyBI,QAAzBJ;IAAUC,aAAeG,QAAfH;EAC/B,OAAO/H,gBAAgB,aAAa8H,WAAWC;AACjD;AASA,SAAS1G,gBAAgBjC,KAAaE,KAAa;EACjD,OAAOA,MAAMF,MAAMA,MAAMA,OAAOE,MAAMF,OAAO;AAC/C","names":["usePanEvent","useCallbackRef","useUpdateEffect","useControllableState","useSize","mergeRefs","useLatestRef","clampValue","percentToValue","roundValueToStep","valueToPercent","useCallback","useMemo","useRef","useId","useState","useSlider","props","min","_props$max","max","onChange","valueProp","value","defaultValue","isReversedProp","isReversed","_props$direction","direction","_props$orientation","orientation","idProp","id","isDisabled","isReadOnly","onChangeStartProp","onChangeStart","onChangeEndProp","onChangeEnd","_props$step","step","getAriaValueTextProp","getAriaValueText","ariaValueText","ariaLabel","ariaLabelledBy","name","_props$focusThumbOnCh","focusThumbOnChange","htmlProps","getIsReversed","getDefaultValue","_useControllableState2","computedValue","setValue","_useState2","isDragging","setDragging","_useState4","isFocused","setFocused","isInteractive","tenSteps","oneStep","reversedValue","trackValue","thumbPercent","isVertical","stateRef","eventSource","trackRef","thumbRef","rootRef","reactId","uuid","thumbId","trackId","getValueFromPointer","event","current","state","trackRect","getBoundingClientRect","_b","touches","clientX","clientY","diff","bottom","left","length","height","width","percent","nextValue","parseFloat","constrain","actions","stepUp","next","stepDown","reset","stepTo","onKeyDown","keyMap","ArrowRight","ArrowUp","ArrowLeft","ArrowDown","PageUp","PageDown","Home","End","action","key","preventDefault","stopPropagation","valueText","_a","thumbSize","thumbRect","getStyles","thumbRects","thumbPercents","getThumbStyle","rootStyle","trackStyle","innerTrackStyle","focusThumb","setTimeout","focus","setValueFromPointer","onPanSessionStart","onPanSessionEnd","onPan","getRootProps","ref","tabIndex","ariaAttr","dataAttr","style","getTrackProps","getInnerTrackProps","getThumbProps","role","callAllHandlers","onFocus","onBlur","getMarkerProps","isInRange","isHighlighted","markerPercent","markerStyle","position","pointerEvents","orient","vertical","horizontal","getInputProps","type","options"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\slider\\src\\use-slider.ts"],"sourcesContent":["import { usePanEvent } from \"@chakra-ui/react-use-pan-event\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { useSize } from \"@chakra-ui/react-use-size\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { useLatestRef } from \"@chakra-ui/react-use-latest-ref\"\nimport type { PropGetter, RequiredPropGetter } from \"@chakra-ui/react-types\"\nimport {\n  clampValue,\n  percentToValue,\n  roundValueToStep,\n  valueToPercent,\n} from \"@chakra-ui/number-utils\"\nimport { ariaAttr, callAllHandlers, dataAttr } from \"@chakra-ui/utils\"\nimport { useCallback, useMemo, useRef, useId, useState } from \"react\"\nimport { getIsReversed, getStyles } from \"./slider-utils\"\n\nexport interface UseSliderProps {\n  /**\n   * The minimum allowed value of the slider. Cannot be greater than max.\n   * @default 0\n   */\n  min?: number\n  /**\n   * The maximum allowed value of the slider. Cannot be less than min.\n   * @default 100\n   */\n  max?: number\n  /**\n   * The step in which increments/decrements have to be made\n   * @default 1\n   */\n  step?: number\n  /**\n   * The value of the slider in controlled mode\n   */\n  value?: number\n  /**\n   * The initial value of the slider in uncontrolled mode\n   */\n  defaultValue?: number\n  /**\n   * Orientation of the slider\n   * @default \"horizontal\"\n   */\n  orientation?: \"horizontal\" | \"vertical\"\n  /**\n   * If `true`, the value will be incremented or decremented in reverse.\n   */\n  isReversed?: boolean\n  /**\n   * Function called when the user starts selecting a new value (by dragging or clicking)\n   */\n  onChangeStart?(value: number): void\n  /**\n   * Function called when the user is done selecting a new value (by dragging or clicking)\n   */\n  onChangeEnd?(value: number): void\n  /**\n   * Function called whenever the slider value changes  (by dragging or clicking)\n   */\n  onChange?(value: number): void\n  /**\n   * The base `id` to use for the slider and its components\n   */\n  id?: string\n  /**\n   * The name attribute of the hidden `input` field.\n   * This is particularly useful in forms\n   */\n  name?: string\n  /**\n   * If `true`, the slider will be disabled\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the slider will be in `read-only` state\n   * @default false\n   */\n  isReadOnly?: boolean\n  /**\n   * Function that returns the `aria-valuetext` for screen readers.\n   * It is mostly used to generate a more human-readable\n   * representation of the value for assistive technologies\n   */\n  getAriaValueText?(value: number): string\n  /**\n   * If `false`, the slider handle will not capture focus when value changes.\n   * @default true\n   */\n  focusThumbOnChange?: boolean\n  /**\n   * The static string to use used for `aria-valuetext`\n   */\n  \"aria-valuetext\"?: string\n  /**\n   * The static string to use used for `aria-label`\n   * if no visible label is used.\n   */\n  \"aria-label\"?: string\n  /**\n   * The static string `aria-labelledby` that points to the\n   * ID of the element that serves as label for the slider\n   */\n  \"aria-labelledby\"?: string\n  /**\n   * The writing mode\n   * @default \"ltr\"\n   */\n  direction?: \"ltr\" | \"rtl\"\n}\n\nexport interface SliderState {\n  value: number\n  isFocused: boolean\n  isDragging: boolean\n}\n\nexport interface SliderActions {\n  stepUp(step?: number): void\n  stepDown(step?: number): void\n  reset(): void\n  stepTo(value: number): void\n}\n\n/**\n * React hook that implements an accessible range slider.\n *\n * It is an alternative to `<input type=\"range\" />`, and returns\n * prop getters for the component parts\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/slider/\n */\nexport function useSlider(props: UseSliderProps) {\n  const {\n    min = 0,\n    max = 100,\n    onChange,\n    value: valueProp,\n    defaultValue,\n    isReversed: isReversedProp,\n    direction = \"ltr\",\n    orientation = \"horizontal\",\n    id: idProp,\n    isDisabled,\n    isReadOnly,\n    onChangeStart: onChangeStartProp,\n    onChangeEnd: onChangeEndProp,\n    step = 1,\n    getAriaValueText: getAriaValueTextProp,\n    \"aria-valuetext\": ariaValueText,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    name,\n    focusThumbOnChange = true,\n    ...htmlProps\n  } = props\n\n  const onChangeStart = useCallbackRef(onChangeStartProp)\n  const onChangeEnd = useCallbackRef(onChangeEndProp)\n  const getAriaValueText = useCallbackRef(getAriaValueTextProp)\n\n  const isReversed = getIsReversed({\n    isReversed: isReversedProp,\n    direction,\n    orientation,\n  })\n\n  /**\n   * Enable the slider handle controlled and uncontrolled scenarios\n   */\n  const [computedValue, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue ?? getDefaultValue(min, max),\n    onChange,\n  })\n\n  const [isDragging, setDragging] = useState(false)\n  const [isFocused, setFocused] = useState(false)\n  const isInteractive = !(isDisabled || isReadOnly)\n\n  const tenSteps = (max - min) / 10\n  const oneStep = step || (max - min) / 100\n\n  /**\n   * Constrain the value because it can't be less than min\n   * or greater than max\n   */\n  const value = clampValue(computedValue, min, max)\n  const reversedValue = max - value + min\n  const trackValue = isReversed ? reversedValue : value\n  const thumbPercent = valueToPercent(trackValue, min, max)\n\n  const isVertical = orientation === \"vertical\"\n\n  const stateRef = useLatestRef({\n    min,\n    max,\n    step,\n    isDisabled,\n    value,\n    isInteractive,\n    isReversed,\n    isVertical,\n    eventSource: null as \"pointer\" | \"keyboard\" | null,\n    focusThumbOnChange,\n    orientation,\n  })\n\n  /**\n   * Let's keep a reference to the slider track and thumb\n   */\n  const trackRef = useRef<HTMLElement>(null)\n  const thumbRef = useRef<HTMLElement>(null)\n  const rootRef = useRef<HTMLElement>(null)\n\n  /**\n   * Generate unique ids for component parts\n   */\n  const reactId = useId()\n  const uuid = idProp ?? reactId\n  const [thumbId, trackId] = [`slider-thumb-${uuid}`, `slider-track-${uuid}`]\n\n  /**\n   * Get relative value of slider from the event by tracking\n   * how far you clicked within the track to determine the value\n   *\n   * @todo - Refactor this later on to use info from pan session\n   */\n\n  const getValueFromPointer = useCallback(\n    (event: any) => {\n      if (!trackRef.current) return\n\n      const state = stateRef.current\n      state.eventSource = \"pointer\"\n\n      const trackRect = trackRef.current.getBoundingClientRect()\n      const { clientX, clientY } = event.touches?.[0] ?? event\n\n      const diff = isVertical\n        ? trackRect.bottom - clientY\n        : clientX - trackRect.left\n\n      const length = isVertical ? trackRect.height : trackRect.width\n      let percent = diff / length\n\n      if (isReversed) {\n        percent = 1 - percent\n      }\n\n      let nextValue = percentToValue(percent, state.min, state.max)\n\n      if (state.step) {\n        nextValue = parseFloat(\n          roundValueToStep(nextValue, state.min, state.step),\n        )\n      }\n\n      nextValue = clampValue(nextValue, state.min, state.max)\n\n      return nextValue\n    },\n    [isVertical, isReversed, stateRef],\n  )\n\n  const constrain = useCallback(\n    (value: number) => {\n      const state = stateRef.current\n      if (!state.isInteractive) return\n      value = parseFloat(roundValueToStep(value, state.min, oneStep))\n      value = clampValue(value, state.min, state.max)\n      setValue(value)\n    },\n    [oneStep, setValue, stateRef],\n  )\n\n  const actions: SliderActions = useMemo(\n    () => ({\n      stepUp(step = oneStep) {\n        const next = isReversed ? value - step : value + step\n        constrain(next)\n      },\n      stepDown(step = oneStep) {\n        const next = isReversed ? value + step : value - step\n        constrain(next)\n      },\n      reset() {\n        constrain(defaultValue || 0)\n      },\n      stepTo(value: number) {\n        constrain(value)\n      },\n    }),\n    [constrain, isReversed, value, oneStep, defaultValue],\n  )\n\n  /**\n   * Keyboard interaction to ensure users can operate\n   * the slider using only their keyboard.\n   */\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const state = stateRef.current\n\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        ArrowRight: () => actions.stepUp(),\n        ArrowUp: () => actions.stepUp(),\n        ArrowLeft: () => actions.stepDown(),\n        ArrowDown: () => actions.stepDown(),\n        PageUp: () => actions.stepUp(tenSteps),\n        PageDown: () => actions.stepDown(tenSteps),\n        Home: () => constrain(state.min),\n        End: () => constrain(state.max),\n      }\n\n      const action = keyMap[event.key]\n\n      if (action) {\n        event.preventDefault()\n        event.stopPropagation()\n        action(event)\n        state.eventSource = \"keyboard\"\n      }\n    },\n    [actions, constrain, tenSteps, stateRef],\n  )\n\n  /**\n   * ARIA (Optional): To define a human-readable representation of the value,\n   * we allow users pass aria-valuetext.\n   */\n  const valueText = getAriaValueText?.(value) ?? ariaValueText\n\n  /**\n   * Measure the dimensions of the thumb, so\n   * we can center it within the track properly\n   */\n  const thumbSize = useSize(thumbRef)\n\n  /**\n   * Compute styles for all component parts.\n   */\n  const { getThumbStyle, rootStyle, trackStyle, innerTrackStyle } =\n    useMemo(() => {\n      const state = stateRef.current\n\n      const thumbRect = thumbSize ?? { width: 0, height: 0 }\n      return getStyles({\n        isReversed,\n        orientation: state.orientation,\n        thumbRects: [thumbRect],\n        thumbPercents: [thumbPercent],\n      })\n    }, [isReversed, thumbSize, thumbPercent, stateRef])\n\n  const focusThumb = useCallback(() => {\n    const state = stateRef.current\n    if (state.focusThumbOnChange) {\n      setTimeout(() => thumbRef.current?.focus())\n    }\n  }, [stateRef])\n\n  useUpdateEffect(() => {\n    const state = stateRef.current\n    focusThumb()\n    if (state.eventSource === \"keyboard\") {\n      onChangeEnd?.(state.value)\n    }\n  }, [value, onChangeEnd])\n\n  function setValueFromPointer(event: MouseEvent | TouchEvent | PointerEvent) {\n    const nextValue = getValueFromPointer(event)\n    if (nextValue != null && nextValue !== stateRef.current.value) {\n      setValue(nextValue)\n    }\n  }\n\n  usePanEvent(rootRef, {\n    onPanSessionStart(event) {\n      const state = stateRef.current\n      if (!state.isInteractive) return\n      setDragging(true)\n      focusThumb()\n      setValueFromPointer(event)\n      onChangeStart?.(state.value)\n    },\n    onPanSessionEnd() {\n      const state = stateRef.current\n      if (!state.isInteractive) return\n      setDragging(false)\n      onChangeEnd?.(state.value)\n    },\n    onPan(event) {\n      const state = stateRef.current\n      if (!state.isInteractive) return\n      setValueFromPointer(event)\n    },\n  })\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      return {\n        ...props,\n        ...htmlProps,\n        ref: mergeRefs(ref, rootRef),\n        tabIndex: -1,\n        \"aria-disabled\": ariaAttr(isDisabled),\n        \"data-focused\": dataAttr(isFocused),\n        style: {\n          ...props.style,\n          ...rootStyle,\n        },\n      }\n    },\n    [htmlProps, isDisabled, isFocused, rootStyle],\n  )\n\n  const getTrackProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      return {\n        ...props,\n        ref: mergeRefs(ref, trackRef),\n        id: trackId,\n        \"data-disabled\": dataAttr(isDisabled),\n        style: {\n          ...props.style,\n          ...trackStyle,\n        },\n      }\n    },\n    [isDisabled, trackId, trackStyle],\n  )\n\n  const getInnerTrackProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      return {\n        ...props,\n        ref,\n        style: {\n          ...props.style,\n          ...innerTrackStyle,\n        },\n      }\n    },\n    [innerTrackStyle],\n  )\n\n  const getThumbProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      return {\n        ...props,\n        ref: mergeRefs(ref, thumbRef),\n        role: \"slider\",\n        tabIndex: isInteractive ? 0 : undefined,\n        id: thumbId,\n        \"data-active\": dataAttr(isDragging),\n        \"aria-valuetext\": valueText,\n        \"aria-valuemin\": min,\n        \"aria-valuemax\": max,\n        \"aria-valuenow\": value,\n        \"aria-orientation\": orientation,\n        \"aria-disabled\": ariaAttr(isDisabled),\n        \"aria-readonly\": ariaAttr(isReadOnly),\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": ariaLabel ? undefined : ariaLabelledBy,\n        style: {\n          ...props.style,\n          ...getThumbStyle(0),\n        },\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(props.onFocus, () => setFocused(true)),\n        onBlur: callAllHandlers(props.onBlur, () => setFocused(false)),\n      }\n    },\n    [\n      isInteractive,\n      thumbId,\n      isDragging,\n      valueText,\n      min,\n      max,\n      value,\n      orientation,\n      isDisabled,\n      isReadOnly,\n      ariaLabel,\n      ariaLabelledBy,\n      getThumbStyle,\n      onKeyDown,\n    ],\n  )\n\n  const getMarkerProps: RequiredPropGetter<{ value: number }> = useCallback(\n    (props, ref = null) => {\n      const isInRange = !(props.value < min || props.value > max)\n      const isHighlighted = value >= props.value\n      const markerPercent = valueToPercent(props.value, min, max)\n\n      const markerStyle: React.CSSProperties = {\n        position: \"absolute\",\n        pointerEvents: \"none\",\n        ...orient({\n          orientation: orientation,\n          vertical: {\n            bottom: isReversed\n              ? `${100 - markerPercent}%`\n              : `${markerPercent}%`,\n          },\n          horizontal: {\n            left: isReversed ? `${100 - markerPercent}%` : `${markerPercent}%`,\n          },\n        }),\n      }\n\n      return {\n        ...props,\n        ref,\n        role: \"presentation\",\n        \"aria-hidden\": true,\n        \"data-disabled\": dataAttr(isDisabled),\n        \"data-invalid\": dataAttr(!isInRange),\n        \"data-highlighted\": dataAttr(isHighlighted),\n        style: {\n          ...props.style,\n          ...markerStyle,\n        },\n      }\n    },\n    [isDisabled, isReversed, max, min, orientation, value],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      return {\n        ...props,\n        ref,\n        type: \"hidden\",\n        value,\n        name,\n      }\n    },\n    [name, value],\n  )\n\n  const state: SliderState = { value, isFocused, isDragging }\n\n  return {\n    state,\n    actions,\n    getRootProps,\n    getTrackProps,\n    getInnerTrackProps,\n    getThumbProps,\n    getMarkerProps,\n    getInputProps,\n  }\n}\n\nexport type UseSliderReturn = ReturnType<typeof useSlider>\n\nfunction orient(options: {\n  orientation: UseSliderProps[\"orientation\"]\n  vertical: React.CSSProperties\n  horizontal: React.CSSProperties\n}) {\n  const { orientation, vertical, horizontal } = options\n  return orientation === \"vertical\" ? vertical : horizontal\n}\n\n/**\n * The browser <input type=\"range\" /> calculates\n * the default value of a slider by using mid-point\n * between the min and the max.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range\n */\nfunction getDefaultValue(min: number, max: number) {\n  return max < min ? min : min + (max - min) / 2\n}\n"]},"metadata":{},"sourceType":"module"}