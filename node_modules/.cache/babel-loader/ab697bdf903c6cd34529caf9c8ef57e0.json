{"ast":null,"code":"'use client';\n\nimport { useCallbackRef } from \"./chunk-KA2477BY.mjs\";\n\n// src/use-outside-click.ts\nimport { getOwnerDocument } from \"@chakra-ui/utils\";\nimport { useEffect, useRef } from \"react\";\nfunction useOutsideClick(props) {\n  var ref = props.ref,\n    handler = props.handler,\n    _props$enabled = props.enabled,\n    enabled = _props$enabled === void 0 ? true : _props$enabled;\n  var savedHandler = useCallbackRef(handler);\n  var stateRef = useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false\n  });\n  var state = stateRef.current;\n  useEffect(function () {\n    if (!enabled) return;\n    var onPointerDown = function onPointerDown(e) {\n      if (isValidEvent(e, ref)) {\n        state.isPointerDown = true;\n      }\n    };\n    var onMouseUp = function onMouseUp(event) {\n      if (state.ignoreEmulatedMouseEvents) {\n        state.ignoreEmulatedMouseEvents = false;\n        return;\n      }\n      if (state.isPointerDown && handler && isValidEvent(event, ref)) {\n        state.isPointerDown = false;\n        savedHandler(event);\n      }\n    };\n    var onTouchEnd = function onTouchEnd(event) {\n      state.ignoreEmulatedMouseEvents = true;\n      if (handler && state.isPointerDown && isValidEvent(event, ref)) {\n        state.isPointerDown = false;\n        savedHandler(event);\n      }\n    };\n    var doc = getOwnerDocument(ref.current);\n    doc.addEventListener(\"mousedown\", onPointerDown, true);\n    doc.addEventListener(\"mouseup\", onMouseUp, true);\n    doc.addEventListener(\"touchstart\", onPointerDown, true);\n    doc.addEventListener(\"touchend\", onTouchEnd, true);\n    return function () {\n      doc.removeEventListener(\"mousedown\", onPointerDown, true);\n      doc.removeEventListener(\"mouseup\", onMouseUp, true);\n      doc.removeEventListener(\"touchstart\", onPointerDown, true);\n      doc.removeEventListener(\"touchend\", onTouchEnd, true);\n    };\n  }, [handler, ref, savedHandler, state, enabled]);\n}\nfunction isValidEvent(event, ref) {\n  var _a;\n  var target = event.target;\n  if (target) {\n    var doc = getOwnerDocument(target);\n    if (!doc.contains(target)) return false;\n  }\n  return !((_a = ref.current) == null ? void 0 : _a.contains(target));\n}\nexport { useOutsideClick };","map":{"version":3,"mappings":";;;;;AAAA,SAASA,wBAAwB;AACjC,SAASC,WAAWC,cAAc;AAwB3B,SAASC,gBAAgBC,OAA6B;EAC3D,IAAQC,MAAiCD,MAAjCC;IAAKC,UAA4BF,MAA5BE;IAAAC,iBAA4BH,MAAnBI;IAAAA,sCAAU;EAChC,IAAMC,eAAeC,eAAeJ,OAAO;EAE3C,IAAMK,WAAWT,OAAO;IACtBU,eAAe;IACfC,2BAA2B;EAC7B,CAAC;EAED,IAAMC,QAAQH,SAASI;EAEvBd,UAAU,YAAM;IACd,IAAI,CAACO,SAAS;IACd,IAAMQ,gBAAqB,SAArBA,cAAsBC,GAAoB;MAC9C,IAAIC,aAAaD,GAAGZ,GAAG,GAAG;QACxBS,MAAMF,gBAAgB;MACxB;IACF;IAEA,IAAMO,YAAiB,SAAjBA,UAAkBC,OAAsB;MAC5C,IAAIN,MAAMD,2BAA2B;QACnCC,MAAMD,4BAA4B;QAClC;MACF;MAEA,IAAIC,MAAMF,iBAAiBN,WAAWY,aAAaE,OAAOf,GAAG,GAAG;QAC9DS,MAAMF,gBAAgB;QACtBH,aAAaW,KAAK;MACpB;IACF;IAEA,IAAMC,aAAa,SAAbA,WAAcD,OAAsB;MACxCN,MAAMD,4BAA4B;MAClC,IAAIP,WAAWQ,MAAMF,iBAAiBM,aAAaE,OAAOf,GAAG,GAAG;QAC9DS,MAAMF,gBAAgB;QACtBH,aAAaW,KAAK;MACpB;IACF;IAEA,IAAME,MAAMtB,iBAAiBK,IAAIU,OAAO;IACxCO,IAAIC,iBAAiB,aAAaP,eAAe,IAAI;IACrDM,IAAIC,iBAAiB,WAAWJ,WAAW,IAAI;IAC/CG,IAAIC,iBAAiB,cAAcP,eAAe,IAAI;IACtDM,IAAIC,iBAAiB,YAAYF,YAAY,IAAI;IAEjD,OAAO,YAAM;MACXC,IAAIE,oBAAoB,aAAaR,eAAe,IAAI;MACxDM,IAAIE,oBAAoB,WAAWL,WAAW,IAAI;MAClDG,IAAIE,oBAAoB,cAAcR,eAAe,IAAI;MACzDM,IAAIE,oBAAoB,YAAYH,YAAY,IAAI;IACtD;EACF,GAAG,CAACf,SAASD,KAAKI,cAAcK,OAAON,OAAO,CAAC;AACjD;AAEA,SAASU,aAAaE,OAAcf,KAAmC;EA/EvE;EAgFE,IAAMoB,SAASL,MAAMK;EAErB,IAAIA,QAAQ;IACV,IAAMH,MAAMtB,iBAAiByB,MAAM;IACnC,IAAI,CAACH,IAAII,SAASD,MAAM,GAAG,OAAO;EACpC;EAEA,OAAO,GAACE,SAAIZ,YAAJ,mBAAaW,SAASD;AAChC","names":["getOwnerDocument","useEffect","useRef","useOutsideClick","props","ref","handler","_props$enabled","enabled","savedHandler","useCallbackRef","stateRef","isPointerDown","ignoreEmulatedMouseEvents","state","current","onPointerDown","e","isValidEvent","onMouseUp","event","onTouchEnd","doc","addEventListener","removeEventListener","target","contains","_a"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\hooks\\src\\use-outside-click.ts"],"sourcesContent":["import { getOwnerDocument } from \"@chakra-ui/utils\"\nimport { useEffect, useRef } from \"react\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\nexport interface UseOutsideClickProps {\n  /**\n   * Whether the hook is enabled\n   */\n  enabled?: boolean\n  /**\n   * The reference to a DOM element.\n   */\n  ref: React.RefObject<HTMLElement>\n  /**\n   * Function invoked when a click is triggered outside the referenced element.\n   */\n  handler?: (e: Event) => void\n}\n\n/**\n * Example, used in components like Dialogs and Popovers, so they can close\n * when a user clicks outside them.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-outside-click\n */\nexport function useOutsideClick(props: UseOutsideClickProps) {\n  const { ref, handler, enabled = true } = props\n  const savedHandler = useCallbackRef(handler)\n\n  const stateRef = useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n  })\n\n  const state = stateRef.current\n\n  useEffect(() => {\n    if (!enabled) return\n    const onPointerDown: any = (e: PointerEvent) => {\n      if (isValidEvent(e, ref)) {\n        state.isPointerDown = true\n      }\n    }\n\n    const onMouseUp: any = (event: MouseEvent) => {\n      if (state.ignoreEmulatedMouseEvents) {\n        state.ignoreEmulatedMouseEvents = false\n        return\n      }\n\n      if (state.isPointerDown && handler && isValidEvent(event, ref)) {\n        state.isPointerDown = false\n        savedHandler(event)\n      }\n    }\n\n    const onTouchEnd = (event: TouchEvent) => {\n      state.ignoreEmulatedMouseEvents = true\n      if (handler && state.isPointerDown && isValidEvent(event, ref)) {\n        state.isPointerDown = false\n        savedHandler(event)\n      }\n    }\n\n    const doc = getOwnerDocument(ref.current)\n    doc.addEventListener(\"mousedown\", onPointerDown, true)\n    doc.addEventListener(\"mouseup\", onMouseUp, true)\n    doc.addEventListener(\"touchstart\", onPointerDown, true)\n    doc.addEventListener(\"touchend\", onTouchEnd, true)\n\n    return () => {\n      doc.removeEventListener(\"mousedown\", onPointerDown, true)\n      doc.removeEventListener(\"mouseup\", onMouseUp, true)\n      doc.removeEventListener(\"touchstart\", onPointerDown, true)\n      doc.removeEventListener(\"touchend\", onTouchEnd, true)\n    }\n  }, [handler, ref, savedHandler, state, enabled])\n}\n\nfunction isValidEvent(event: Event, ref: React.RefObject<HTMLElement>) {\n  const target = event.target as HTMLElement\n\n  if (target) {\n    const doc = getOwnerDocument(target)\n    if (!doc.contains(target)) return false\n  }\n\n  return !ref.current?.contains(target)\n}\n"]},"metadata":{},"sourceType":"module"}