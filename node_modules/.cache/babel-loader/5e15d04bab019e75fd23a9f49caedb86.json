{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useFormControlContext } from \"./chunk-DFWC5MHP.mjs\";\n\n// src/form-error.tsx\nimport { Icon } from \"@chakra-ui/icon\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar _createContext = createContext({\n    name: \"FormErrorStylesContext\",\n    errorMessage: \"useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in \\\"<FormError />\\\" \"\n  }),\n  _createContext2 = _slicedToArray(_createContext, 2),\n  FormErrorStylesProvider = _createContext2[0],\n  useFormErrorStyles = _createContext2[1];\nvar FormErrorMessage = forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"FormError\", props);\n  var ownProps = omitThemingProps(props);\n  var field = useFormControlContext();\n  if (!(field == null ? void 0 : field.isInvalid)) return null;\n  return /* @__PURE__ */jsx(FormErrorStylesProvider, {\n    value: styles,\n    children: /* @__PURE__ */jsx(chakra.div, _objectSpread(_objectSpread({}, field == null ? void 0 : field.getErrorMessageProps(ownProps, ref)), {}, {\n      className: cx(\"chakra-form__error-message\", props.className),\n      __css: _objectSpread({\n        display: \"flex\",\n        alignItems: \"center\"\n      }, styles.text)\n    }))\n  });\n});\nFormErrorMessage.displayName = \"FormErrorMessage\";\nvar FormErrorIcon = forwardRef(function (props, ref) {\n  var styles = useFormErrorStyles();\n  var field = useFormControlContext();\n  if (!(field == null ? void 0 : field.isInvalid)) return null;\n  var _className = cx(\"chakra-form__error-icon\", props.className);\n  return /* @__PURE__ */jsx(Icon, _objectSpread(_objectSpread({\n    ref: ref,\n    \"aria-hidden\": true\n  }, props), {}, {\n    __css: styles.icon,\n    className: _className,\n    children: /* @__PURE__ */jsx(\"path\", {\n      fill: \"currentColor\",\n      d: \"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\n    })\n  }));\n});\nFormErrorIcon.displayName = \"FormErrorIcon\";\nexport { useFormErrorStyles, FormErrorMessage, FormErrorIcon };","map":{"version":3,"mappings":";;;;;;;AAAA,SAAyBA,YAAY;AACrC,SAASC,qBAAqB;AAC9B,SACEC,QACAC,YAEAC,kBAGAC,2BACK;AACP,SAASC,UAAU;AA6BX;AA1BR,qBAAsDL,cAEpD;IACAM,8BAAM;IACNC;EACF,CAAC;EAAAC;EALMC;EAAyBC,kBAAkB;AAgB3C,IAAMC,mBAAmBT,WAC9B,UAACU,OAAOC,KAAQ;EACd,IAAMC,SAASV,oBAAoB,aAAaQ,KAAK;EACrD,IAAMG,WAAWZ,iBAAiBS,KAAK;EACvC,IAAMI,QAAQC,sBAAsB;EAEpC,IAAI,EAACD,+BAAOE,YAAW,OAAO;EAE9B,OACE,mBAACT;IAAwBU,OAAOL;IAC9BM,6BAACnB,OAAOoB,qCACFL,+BAAOM,qBAAqBP,UAAUF;MAC1CU,WAAWlB,GAAG,8BAA8BO,MAAMW,SAAS;MAC3DC;QACEC,SAAS;QACTC,YAAY;MAAA,GACTZ,OAAOa;IACZ,EACF;EAAA,CACF;AAEJ,CACF;AAEAhB,iBAAiBiB,cAAc;AAMxB,IAAMC,gBAAgB3B,WAA6B,UAACU,OAAOC,KAAQ;EACxE,IAAMC,SAASJ,mBAAmB;EAClC,IAAMM,QAAQC,sBAAsB;EAEpC,IAAI,EAACD,+BAAOE,YAAW,OAAO;EAE9B,IAAMY,aAAazB,GAAG,2BAA2BO,MAAMW,SAAS;EAEhE,OACE,mBAACxB;IACCc;IACA,eAAW;EAAA,GACPD;IACJY,OAAOV,OAAOiB;IACdR,WAAWO;IAEXV,6BAAC;MACCY,MAAK;MACLC,GAAE;IAAA,CACJ;EAAA,EACF;AAEJ,CAAC;AAEDJ,cAAcD,cAAc","names":["Icon","createContext","chakra","forwardRef","omitThemingProps","useMultiStyleConfig","cx","name","errorMessage","_createContext2","FormErrorStylesProvider","useFormErrorStyles","FormErrorMessage","props","ref","styles","ownProps","field","useFormControlContext","isInvalid","value","children","div","getErrorMessageProps","className","__css","display","alignItems","text","displayName","FormErrorIcon","_className","icon","fill","d"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\form-control\\src\\form-error.tsx"],"sourcesContent":["import { type IconProps, Icon } from \"@chakra-ui/icon\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext } from \"./form-control\"\n\nconst [FormErrorStylesProvider, useFormErrorStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormErrorStylesContext`,\n  errorMessage: `useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormError />\" `,\n})\n\nexport { useFormErrorStyles }\nexport interface FormErrorMessageProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormErrorMessage\"> {}\n\n/**\n * Used to provide feedback about an invalid input,\n * and suggest clear instructions on how to fix it.\n */\nexport const FormErrorMessage = forwardRef<FormErrorMessageProps, \"div\">(\n  (props, ref) => {\n    const styles = useMultiStyleConfig(\"FormError\", props)\n    const ownProps = omitThemingProps(props)\n    const field = useFormControlContext()\n\n    if (!field?.isInvalid) return null\n\n    return (\n      <FormErrorStylesProvider value={styles}>\n        <chakra.div\n          {...field?.getErrorMessageProps(ownProps, ref)}\n          className={cx(\"chakra-form__error-message\", props.className)}\n          __css={{\n            display: \"flex\",\n            alignItems: \"center\",\n            ...styles.text,\n          }}\n        />\n      </FormErrorStylesProvider>\n    )\n  },\n)\n\nFormErrorMessage.displayName = \"FormErrorMessage\"\n\n/**\n * Used as the visual indicator that a field is invalid or\n * a field has incorrect values.\n */\nexport const FormErrorIcon = forwardRef<IconProps, \"svg\">((props, ref) => {\n  const styles = useFormErrorStyles()\n  const field = useFormControlContext()\n\n  if (!field?.isInvalid) return null\n\n  const _className = cx(\"chakra-form__error-icon\", props.className)\n\n  return (\n    <Icon\n      ref={ref}\n      aria-hidden\n      {...props}\n      __css={styles.icon}\n      className={_className}\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\n      />\n    </Icon>\n  )\n})\n\nFormErrorIcon.displayName = \"FormErrorIcon\"\n"]},"metadata":{},"sourceType":"module"}