{"ast":null,"code":"'use client';\n\n// src/index.ts\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useCallback, useState, useId } from \"react\";\nfunction useDisclosure() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var onCloseProp = props.onClose,\n    onOpenProp = props.onOpen,\n    isOpenProp = props.isOpen,\n    idProp = props.id;\n  var handleOpen = useCallbackRef(onOpenProp);\n  var handleClose = useCallbackRef(onCloseProp);\n  var _useState = useState(props.defaultIsOpen || false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isOpenState = _useState2[0],\n    setIsOpen = _useState2[1];\n  var isOpen = isOpenProp !== void 0 ? isOpenProp : isOpenState;\n  var isControlled = isOpenProp !== void 0;\n  var uid = useId();\n  var id = idProp != null ? idProp : \"disclosure-\".concat(uid);\n  var onClose = useCallback(function () {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n    handleClose == null ? void 0 : handleClose();\n  }, [isControlled, handleClose]);\n  var onOpen = useCallback(function () {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n    handleOpen == null ? void 0 : handleOpen();\n  }, [isControlled, handleOpen]);\n  var onToggle = useCallback(function () {\n    if (isOpen) {\n      onClose();\n    } else {\n      onOpen();\n    }\n  }, [isOpen, onOpen, onClose]);\n  function getButtonProps() {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick: function onClick(event) {\n        var _a;\n        (_a = props2.onClick) == null ? void 0 : _a.call(props2, event);\n        onToggle();\n      }\n    });\n  }\n  function getDisclosureProps() {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      hidden: !isOpen,\n      id: id\n    });\n  }\n  return {\n    isOpen: isOpen,\n    onOpen: onOpen,\n    onClose: onClose,\n    onToggle: onToggle,\n    isControlled: isControlled,\n    getButtonProps: getButtonProps,\n    getDisclosureProps: getDisclosureProps\n  };\n}\nexport { useDisclosure };","map":{"version":3,"mappings":";;;;;AAAA,SAASA,sBAAsB;AAC/B,SAAgBC,aAAaC,UAAUC,aAAa;AAkB7C,SAASC,gBAA8C;EAAA,IAAhCC,4EAA4B,CAAC;EACzD,IACWC,cAIPD,MAJFE;IACQC,aAGNH,MAHFI;IACQC,aAENL,MAFFM;IACIC,SACFP,MADFQ;EAGF,IAAMC,aAAad,eAAeQ,UAAU;EAC5C,IAAMO,cAAcf,eAAeM,WAAW;EAE9C,gBAAiCJ,SAASG,MAAMW,iBAAiB,KAAK;IAAAC;IAA/DC;IAAaC,SAAS;EAE7B,IAAMR,SAASD,eAAe,SAAYA,aAAaQ;EAEvD,IAAME,eAAeV,eAAe;EAEpC,IAAMW,MAAMlB,MAAM;EAClB,IAAMU,KAAKD,+CAAwBS;EAEnC,IAAMd,UAAUN,YAAY,YAAM;IAChC,IAAI,CAACmB,cAAc;MACjBD,UAAU,KAAK;IACjB;IACAJ;EACF,GAAG,CAACK,cAAcL,WAAW,CAAC;EAE9B,IAAMN,SAASR,YAAY,YAAM;IAC/B,IAAI,CAACmB,cAAc;MACjBD,UAAU,IAAI;IAChB;IACAL;EACF,GAAG,CAACM,cAAcN,UAAU,CAAC;EAE7B,IAAMQ,WAAWrB,YAAY,YAAM;IACjC,IAAIU,QAAQ;MACVJ,QAAQ;IACV,OAAO;MACLE,OAAO;IACT;EACF,GAAG,CAACE,QAAQF,QAAQF,OAAO,CAAC;EAE5B,SAASgB,iBAAiD;IAAA,IAAlClB,6EAAmB,CAAC;IAC1C,uCACKA;MACH,iBAAiBM;MACjB,iBAAiBE;MACjBW,0BAAQC,OAAO;QAlErB;QAmEQ,aAAMD,YAAN,gCAAgBC;QAChBH,SAAS;MACX;IAAA;EAEJ;EAEA,SAASI,qBAAqD;IAAA,IAAlCrB,6EAAmB,CAAC;IAC9C,uCACKA;MACHsB,QAAQ,CAAChB;MACTE;IAAA;EAEJ;EAEA,OAAO;IACLF;IACAF;IACAF;IACAe;IACAF;IACAG;IACAG;EACF;AACF","names":["useCallbackRef","useCallback","useState","useId","useDisclosure","props","onCloseProp","onClose","onOpenProp","onOpen","isOpenProp","isOpen","idProp","id","handleOpen","handleClose","defaultIsOpen","_useState2","isOpenState","setIsOpen","isControlled","uid","onToggle","getButtonProps","onClick","event","getDisclosureProps","hidden"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\react-use-disclosure\\src\\index.ts"],"sourcesContent":["import { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport React, { useCallback, useState, useId } from \"react\"\n\nexport interface UseDisclosureProps {\n  isOpen?: boolean\n  defaultIsOpen?: boolean\n  onClose?(): void\n  onOpen?(): void\n  id?: string\n}\n\ntype HTMLProps = React.HTMLAttributes<HTMLElement>\n\n/**\n * `useDisclosure` is a custom hook used to help handle common open, close, or toggle scenarios.\n * It can be used to control feedback component such as `Modal`, `AlertDialog`, `Drawer`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-disclosure\n */\nexport function useDisclosure(props: UseDisclosureProps = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp,\n  } = props\n\n  const handleOpen = useCallbackRef(onOpenProp)\n  const handleClose = useCallbackRef(onCloseProp)\n\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false)\n\n  const isOpen = isOpenProp !== undefined ? isOpenProp : isOpenState\n\n  const isControlled = isOpenProp !== undefined\n\n  const uid = useId()\n  const id = idProp ?? `disclosure-${uid}`\n\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false)\n    }\n    handleClose?.()\n  }, [isControlled, handleClose])\n\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true)\n    }\n    handleOpen?.()\n  }, [isControlled, handleOpen])\n\n  const onToggle = useCallback(() => {\n    if (isOpen) {\n      onClose()\n    } else {\n      onOpen()\n    }\n  }, [isOpen, onOpen, onClose])\n\n  function getButtonProps(props: HTMLProps = {}): HTMLProps {\n    return {\n      ...props,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick(event) {\n        props.onClick?.(event)\n        onToggle()\n      },\n    }\n  }\n\n  function getDisclosureProps(props: HTMLProps = {}): HTMLProps {\n    return {\n      ...props,\n      hidden: !isOpen,\n      id,\n    }\n  }\n\n  return {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps,\n    getDisclosureProps,\n  }\n}\n\nexport type UseDisclosureReturn = ReturnType<typeof useDisclosure>\n"]},"metadata":{},"sourceType":"module"}