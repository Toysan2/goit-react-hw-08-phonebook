{"ast":null,"code":"'use client';\n\n// src/use-checkbox.ts\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _createForOfIteratorHelper from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nvar _excluded = [\"defaultChecked\", \"isChecked\", \"isFocusable\", \"onChange\", \"isIndeterminate\", \"name\", \"value\", \"tabIndex\", \"aria-label\", \"aria-labelledby\", \"aria-invalid\"];\nimport { useFormControlProps } from \"@chakra-ui/form-control\";\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { callAllHandlers, dataAttr } from \"@chakra-ui/shared-utils\";\n\n// ../../utilities/object-utils/src/omit.ts\nfunction omit(object) {\n  var keysToOmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var clone = Object.assign({}, object);\n  var _iterator = _createForOfIteratorHelper(keysToOmit),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      if (key in clone) {\n        delete clone[key];\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return clone;\n}\n\n// src/use-checkbox.ts\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\";\nimport { trackFocusVisible } from \"@zag-js/focus-visible\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nfunction useCheckbox() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var formControlProps = useFormControlProps(props);\n  var isDisabled = formControlProps.isDisabled,\n    isReadOnly = formControlProps.isReadOnly,\n    isRequired = formControlProps.isRequired,\n    isInvalid = formControlProps.isInvalid,\n    id = formControlProps.id,\n    onBlur = formControlProps.onBlur,\n    onFocus = formControlProps.onFocus,\n    ariaDescribedBy = formControlProps[\"aria-describedby\"];\n  var defaultChecked = props.defaultChecked,\n    checkedProp = props.isChecked,\n    isFocusable = props.isFocusable,\n    onChange = props.onChange,\n    isIndeterminate = props.isIndeterminate,\n    name = props.name,\n    value = props.value,\n    _props$tabIndex = props.tabIndex,\n    tabIndex = _props$tabIndex === void 0 ? void 0 : _props$tabIndex,\n    ariaLabel = props[\"aria-label\"],\n    ariaLabelledBy = props[\"aria-labelledby\"],\n    ariaInvalid = props[\"aria-invalid\"],\n    rest = _objectWithoutProperties(props, _excluded);\n  var htmlProps = omit(rest, [\"isDisabled\", \"isReadOnly\", \"isRequired\", \"isInvalid\", \"id\", \"onBlur\", \"onFocus\", \"aria-describedby\"]);\n  var onChangeProp = useCallbackRef(onChange);\n  var onBlurProp = useCallbackRef(onBlur);\n  var onFocusProp = useCallbackRef(onFocus);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isFocusVisible = _useState2[0],\n    setIsFocusVisible = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isFocused = _useState4[0],\n    setFocused = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isHovered = _useState6[0],\n    setHovered = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isActive = _useState8[0],\n    setActive = _useState8[1];\n  useEffect(function () {\n    return trackFocusVisible(setIsFocusVisible);\n  }, []);\n  var inputRef = useRef(null);\n  var _useState9 = useState(true),\n    _useState10 = _slicedToArray(_useState9, 2),\n    rootIsLabelElement = _useState10[0],\n    setRootIsLabelElement = _useState10[1];\n  var _useState11 = useState(!!defaultChecked),\n    _useState12 = _slicedToArray(_useState11, 2),\n    checkedState = _useState12[0],\n    setCheckedState = _useState12[1];\n  var isControlled = checkedProp !== void 0;\n  var isChecked = isControlled ? checkedProp : checkedState;\n  var handleChange = useCallback(function (event) {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n    if (!isControlled) {\n      if (isChecked) {\n        setCheckedState(event.target.checked);\n      } else {\n        setCheckedState(isIndeterminate ? true : event.target.checked);\n      }\n    }\n    onChangeProp == null ? void 0 : onChangeProp(event);\n  }, [isReadOnly, isDisabled, isChecked, isControlled, isIndeterminate, onChangeProp]);\n  useSafeLayoutEffect(function () {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = Boolean(isIndeterminate);\n    }\n  }, [isIndeterminate]);\n  useUpdateEffect(function () {\n    if (isDisabled) {\n      setFocused(false);\n    }\n  }, [isDisabled, setFocused]);\n  useSafeLayoutEffect(function () {\n    var el = inputRef.current;\n    if (!(el == null ? void 0 : el.form)) return;\n    var formResetListener = function formResetListener() {\n      setCheckedState(!!defaultChecked);\n    };\n    el.form.addEventListener(\"reset\", formResetListener);\n    return function () {\n      var _a;\n      return (_a = el.form) == null ? void 0 : _a.removeEventListener(\"reset\", formResetListener);\n    };\n  }, []);\n  var trulyDisabled = isDisabled && !isFocusable;\n  var onKeyDown = useCallback(function (event) {\n    if (event.key === \" \") {\n      setActive(true);\n    }\n  }, [setActive]);\n  var onKeyUp = useCallback(function (event) {\n    if (event.key === \" \") {\n      setActive(false);\n    }\n  }, [setActive]);\n  useSafeLayoutEffect(function () {\n    if (!inputRef.current) return;\n    var notInSync = inputRef.current.checked !== isChecked;\n    if (notInSync) {\n      setCheckedState(inputRef.current.checked);\n    }\n  }, [inputRef.current]);\n  var getCheckboxProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var onPressDown = function onPressDown(event) {\n      if (isFocused) {\n        event.preventDefault();\n      }\n      setActive(true);\n    };\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props2.onMouseDown, onPressDown),\n      onMouseUp: callAllHandlers(props2.onMouseUp, function () {\n        return setActive(false);\n      }),\n      onMouseEnter: callAllHandlers(props2.onMouseEnter, function () {\n        return setHovered(true);\n      }),\n      onMouseLeave: callAllHandlers(props2.onMouseLeave, function () {\n        return setHovered(false);\n      })\n    });\n  }, [isActive, isChecked, isDisabled, isFocused, isFocusVisible, isHovered, isIndeterminate, isInvalid, isReadOnly]);\n  var getIndicatorProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly)\n    });\n  }, [isActive, isChecked, isDisabled, isFocused, isFocusVisible, isHovered, isIndeterminate, isInvalid, isReadOnly]);\n  var getRootProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread(_objectSpread({}, htmlProps), props2), {}, {\n      ref: mergeRefs(forwardedRef, function (node) {\n        if (!node) return;\n        setRootIsLabelElement(node.tagName === \"LABEL\");\n      }),\n      onClick: callAllHandlers(props2.onClick, function () {\n        var _a;\n        if (!rootIsLabelElement) {\n          (_a = inputRef.current) == null ? void 0 : _a.click();\n          requestAnimationFrame(function () {\n            var _a2;\n            (_a2 = inputRef.current) == null ? void 0 : _a2.focus({\n              preventScroll: true\n            });\n          });\n        }\n      }),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  }, [htmlProps, isDisabled, isChecked, isInvalid, rootIsLabelElement]);\n  var getInputProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      ref: mergeRefs(inputRef, forwardedRef),\n      type: \"checkbox\",\n      name: name,\n      value: value,\n      id: id,\n      tabIndex: tabIndex,\n      onChange: callAllHandlers(props2.onChange, handleChange),\n      onBlur: callAllHandlers(props2.onBlur, onBlurProp, function () {\n        return setFocused(false);\n      }),\n      onFocus: callAllHandlers(props2.onFocus, onFocusProp, function () {\n        return setFocused(true);\n      }),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props2.onKeyUp, onKeyUp),\n      required: isRequired,\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-invalid\": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,\n      \"aria-describedby\": ariaDescribedBy,\n      \"aria-disabled\": isDisabled,\n      style: visuallyHiddenStyle\n    });\n  }, [name, value, id, handleChange, onBlurProp, onFocusProp, onKeyDown, onKeyUp, isRequired, isChecked, trulyDisabled, isReadOnly, ariaLabel, ariaLabelledBy, ariaInvalid, isInvalid, ariaDescribedBy, isDisabled, tabIndex]);\n  var getLabelProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props2.onMouseDown, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  }, [isChecked, isDisabled, isInvalid]);\n  var state = {\n    isInvalid: isInvalid,\n    isFocused: isFocused,\n    isChecked: isChecked,\n    isActive: isActive,\n    isHovered: isHovered,\n    isIndeterminate: isIndeterminate,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired\n  };\n  return {\n    state: state,\n    getRootProps: getRootProps,\n    getCheckboxProps: getCheckboxProps,\n    getIndicatorProps: getIndicatorProps,\n    getInputProps: getInputProps,\n    getLabelProps: getLabelProps,\n    htmlProps: htmlProps\n  };\n}\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\nexport { useCheckbox };","map":{"version":3,"mappings":"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","names":["useFormControlProps","useSafeLayoutEffect","useUpdateEffect","useCallbackRef","mergeRefs","callAllHandlers","dataAttr","omit","object","keysToOmit","clone","Object","assign","_step","key","_iterator","visuallyHiddenStyle","trackFocusVisible","useCallback","useEffect","useRef","useState","useCheckbox","props","formControlProps","isDisabled","isReadOnly","isRequired","isInvalid","id","onBlur","onFocus","ariaDescribedBy","defaultChecked","checkedProp","isChecked","isFocusable","onChange","isIndeterminate","name","value","_props$tabIndex","tabIndex","ariaLabel","ariaLabelledBy","ariaInvalid","rest","htmlProps","onChangeProp","onBlurProp","onFocusProp","_useState2","isFocusVisible","setIsFocusVisible","_useState4","isFocused","setFocused","_useState6","isHovered","setHovered","_useState8","isActive","setActive","inputRef","_useState10","rootIsLabelElement","setRootIsLabelElement","_useState12","checkedState","setCheckedState","isControlled","handleChange","event","preventDefault","target","checked","current","indeterminate","Boolean","el","form","formResetListener","addEventListener","removeEventListener","trulyDisabled","onKeyDown","onKeyUp","notInSync","getCheckboxProps","forwardedRef","onPressDown","ref","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","getIndicatorProps","getRootProps","node","tagName","onClick","click","requestAnimationFrame","focus","preventScroll","getInputProps","type","required","disabled","readOnly","style","getLabelProps","stopEvent","state","stopPropagation"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\checkbox\\src\\use-checkbox.ts","E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\utilities\\object-utils\\src\\omit.ts"],"sourcesContent":["import { useFormControlProps } from \"@chakra-ui/form-control\"\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport type { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { callAllHandlers, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { omit } from \"@chakra-ui/object-utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport { trackFocusVisible } from \"@zag-js/focus-visible\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\nimport { CheckboxState, UseCheckboxProps } from \"./checkbox-types\"\n\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/checkbox#hooks\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/\n */\nexport function useCheckbox(props: UseCheckboxProps = {}) {\n  const formControlProps = useFormControlProps(props)\n  const {\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    isInvalid,\n    id,\n    onBlur,\n    onFocus,\n    \"aria-describedby\": ariaDescribedBy,\n  } = formControlProps\n\n  const {\n    defaultChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    onChange,\n    isIndeterminate,\n    name,\n    value,\n    tabIndex = undefined,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-invalid\": ariaInvalid,\n    ...rest\n  } = props\n\n  const htmlProps = omit(rest, [\n    \"isDisabled\",\n    \"isReadOnly\",\n    \"isRequired\",\n    \"isInvalid\",\n    \"id\",\n    \"onBlur\",\n    \"onFocus\",\n    \"aria-describedby\",\n  ])\n\n  const onChangeProp = useCallbackRef(onChange)\n  const onBlurProp = useCallbackRef(onBlur)\n  const onFocusProp = useCallbackRef(onFocus)\n\n  const [isFocusVisible, setIsFocusVisible] = useState(false)\n  const [isFocused, setFocused] = useState(false)\n  const [isHovered, setHovered] = useState(false)\n  const [isActive, setActive] = useState(false)\n\n  useEffect(() => {\n    return trackFocusVisible(setIsFocusVisible)\n  }, [])\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const [rootIsLabelElement, setRootIsLabelElement] = useState(true)\n\n  const [checkedState, setCheckedState] = useState(!!defaultChecked)\n\n  const isControlled = checkedProp !== undefined\n  const isChecked = isControlled ? checkedProp : checkedState\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        if (isChecked) {\n          setCheckedState(event.target.checked)\n        } else {\n          setCheckedState(isIndeterminate ? true : event.target.checked)\n        }\n      }\n\n      onChangeProp?.(event)\n    },\n    [\n      isReadOnly,\n      isDisabled,\n      isChecked,\n      isControlled,\n      isIndeterminate,\n      onChangeProp,\n    ],\n  )\n\n  useSafeLayoutEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = Boolean(isIndeterminate)\n    }\n  }, [isIndeterminate])\n\n  useUpdateEffect(() => {\n    if (isDisabled) {\n      setFocused(false)\n    }\n  }, [isDisabled, setFocused])\n\n  /**\n   * HTMLFormElement.reset() should reset the checkbox state\n   */\n  useSafeLayoutEffect(() => {\n    const el = inputRef.current\n    if (!el?.form) return\n    const formResetListener = () => {\n      setCheckedState(!!defaultChecked)\n    }\n    el.form.addEventListener(\"reset\", formResetListener)\n    return () => el.form?.removeEventListener(\"reset\", formResetListener)\n  }, [])\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive(true)\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive(false)\n      }\n    },\n    [setActive],\n  )\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.checked !== isChecked\n    if (notInSync) {\n      setCheckedState(inputRef.current.checked)\n    }\n  }, [inputRef.current])\n\n  const getCheckboxProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => {\n      const onPressDown = (event: React.MouseEvent) => {\n        // On mousedown, the input blurs and returns focus to the `body`,\n        // we need to prevent this. Native checkboxes keeps focus on `input`\n        if (isFocused) {\n          event.preventDefault()\n        }\n        setActive(true)\n      }\n\n      return {\n        ...props,\n        ref: forwardedRef,\n        \"data-active\": dataAttr(isActive),\n        \"data-hover\": dataAttr(isHovered),\n        \"data-checked\": dataAttr(isChecked),\n        \"data-focus\": dataAttr(isFocused),\n        \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n        \"data-indeterminate\": dataAttr(isIndeterminate),\n        \"data-disabled\": dataAttr(isDisabled),\n        \"data-invalid\": dataAttr(isInvalid),\n        \"data-readonly\": dataAttr(isReadOnly),\n        \"aria-hidden\": true,\n        onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n        onMouseUp: callAllHandlers(props.onMouseUp, () => setActive(false)),\n        onMouseEnter: callAllHandlers(props.onMouseEnter, () =>\n          setHovered(true),\n        ),\n        onMouseLeave: callAllHandlers(props.onMouseLeave, () =>\n          setHovered(false),\n        ),\n      }\n    },\n    [\n      isActive,\n      isChecked,\n      isDisabled,\n      isFocused,\n      isFocusVisible,\n      isHovered,\n      isIndeterminate,\n      isInvalid,\n      isReadOnly,\n    ],\n  )\n\n  const getIndicatorProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n    }),\n    [\n      isActive,\n      isChecked,\n      isDisabled,\n      isFocused,\n      isFocusVisible,\n      isHovered,\n      isIndeterminate,\n      isInvalid,\n      isReadOnly,\n    ],\n  )\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...htmlProps,\n      ...props,\n      ref: mergeRefs(forwardedRef, (node: HTMLElement) => {\n        if (!node) return\n        setRootIsLabelElement(node.tagName === \"LABEL\")\n      }),\n      onClick: callAllHandlers(props.onClick, () => {\n        /**\n         * Accessibility:\n         *\n         * Ideally, `getRootProps` should be spread unto a `label` element.\n         *\n         * If the element was changed using the `as` prop or changing\n         * the dom node `getRootProps` is spread unto (to a `div` or `span`), we'll trigger\n         * click on the input when the element is clicked.\n         * @see Issue https://github.com/chakra-ui/chakra-ui/issues/3480\n         */\n        if (!rootIsLabelElement) {\n          inputRef.current?.click()\n          requestAnimationFrame(() => {\n            inputRef.current?.focus({ preventScroll: true })\n          })\n        }\n      }),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid),\n    }),\n    [htmlProps, isDisabled, isChecked, isInvalid, rootIsLabelElement],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => {\n      return {\n        ...props,\n        ref: mergeRefs(inputRef, forwardedRef),\n        type: \"checkbox\",\n        name,\n        value,\n        id,\n        tabIndex,\n        onChange: callAllHandlers(props.onChange, handleChange),\n        onBlur: callAllHandlers(props.onBlur, onBlurProp, () =>\n          setFocused(false),\n        ),\n        onFocus: callAllHandlers(props.onFocus, onFocusProp, () =>\n          setFocused(true),\n        ),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n        required: isRequired,\n        checked: isChecked,\n        disabled: trulyDisabled,\n        readOnly: isReadOnly,\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-invalid\": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,\n        \"aria-describedby\": ariaDescribedBy,\n        \"aria-disabled\": isDisabled,\n        style: visuallyHiddenStyle,\n      }\n    },\n    [\n      name,\n      value,\n      id,\n      handleChange,\n      onBlurProp,\n      onFocusProp,\n      onKeyDown,\n      onKeyUp,\n      isRequired,\n      isChecked,\n      trulyDisabled,\n      isReadOnly,\n      ariaLabel,\n      ariaLabelledBy,\n      ariaInvalid,\n      isInvalid,\n      ariaDescribedBy,\n      isDisabled,\n      tabIndex,\n    ],\n  )\n\n  const getLabelProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid),\n    }),\n    [isChecked, isDisabled, isInvalid],\n  )\n\n  const state: CheckboxState = {\n    isInvalid,\n    isFocused,\n    isChecked,\n    isActive,\n    isHovered,\n    isIndeterminate,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n  }\n\n  return {\n    state,\n    getRootProps,\n    getCheckboxProps,\n    getIndicatorProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stopEvent(event: React.SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseCheckboxReturn = ReturnType<typeof useCheckbox>\n","export function omit<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToOmit: K[] = [],\n) {\n  const clone: Record<string, unknown> = Object.assign({}, object)\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key as string]\n    }\n  }\n  return clone as Omit<T, K>\n}\n"]},"metadata":{},"sourceType":"module"}