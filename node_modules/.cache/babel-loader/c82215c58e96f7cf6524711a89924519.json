{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { Box } from \"./chunk-PULVB27S.mjs\";\n\n// src/highlight.tsx\nimport { forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { Fragment, useMemo } from \"react\";\nimport { Fragment as Fragment2, jsx } from \"react/jsx-runtime\";\nvar escapeRegexp = function escapeRegexp(term) {\n  return term.replace(/[|\\\\{}()[\\]^$+*?.-]/g, function (char) {\n    return \"\\\\\".concat(char);\n  });\n};\nfunction buildRegex(query) {\n  var _query = query.filter(function (text) {\n    return text.length !== 0;\n  }).map(function (text) {\n    return escapeRegexp(text.trim());\n  });\n  if (!_query.length) {\n    return null;\n  }\n  return new RegExp(\"(\".concat(_query.join(\"|\"), \")\"), \"ig\");\n}\nfunction highlightWords(_ref) {\n  var text = _ref.text,\n    query = _ref.query;\n  var regex = buildRegex(Array.isArray(query) ? query : [query]);\n  if (!regex) {\n    return [{\n      text: text,\n      match: false\n    }];\n  }\n  var result = text.split(regex).filter(Boolean);\n  return result.map(function (str) {\n    return {\n      text: str,\n      match: regex.test(str)\n    };\n  });\n}\nfunction useHighlight(props) {\n  var text = props.text,\n    query = props.query;\n  return useMemo(function () {\n    return highlightWords({\n      text: text,\n      query: query\n    });\n  }, [text, query]);\n}\nvar Mark = forwardRef(function Mark2(props, ref) {\n  var styles = useStyleConfig(\"Mark\", props);\n  var ownProps = omitThemingProps(props);\n  return /* @__PURE__ */jsx(Box, _objectSpread(_objectSpread({\n    ref: ref\n  }, ownProps), {}, {\n    as: \"mark\",\n    __css: _objectSpread({\n      bg: \"transparent\",\n      whiteSpace: \"nowrap\"\n    }, styles)\n  }));\n});\nfunction Highlight(props) {\n  var children = props.children,\n    query = props.query,\n    styles = props.styles;\n  if (typeof children !== \"string\") {\n    throw new Error(\"The children prop of Highlight must be a string\");\n  }\n  var chunks = useHighlight({\n    query: query,\n    text: children\n  });\n  return /* @__PURE__ */jsx(Fragment2, {\n    children: chunks.map(function (chunk, index) {\n      return chunk.match ? /* @__PURE__ */jsx(Mark, {\n        sx: styles,\n        children: chunk.text\n      }, index) : /* @__PURE__ */jsx(Fragment, {\n        children: chunk.text\n      }, index);\n    })\n  });\n}\nexport { useHighlight, Mark, Highlight };","map":{"version":3,"mappings":";;;;;;AAAA,SACEA,YAEAC,kBAGAC,sBACK;AACP,SAASC,UAAUC,eAAe;AAuD9B,SAwBAD,uBAxBAE;AA1CJ,IAAMC,eAAe,SAAfA,aAAgBC;EAAA,OACpBA,KAAKC,QAAQ,wBAAwB,UAACC;IAAA,mBAAsBA,IAAI;EAAA,CAAE;AAAA;AAEpE,SAASC,WAAWC,OAAiB;EACnC,IAAMC,SAASD,MACZE,OAAO,UAACC;IAAA,OAASA,KAAKC,WAAW,CAAC;EAAA,GAClCC,IAAI,UAACF;IAAA,OAASR,aAAaQ,KAAKG,KAAK,CAAC,CAAC;EAAA;EAC1C,IAAI,CAACL,OAAOG,QAAQ;IAClB,OAAO;EACT;EAEA,OAAO,IAAIG,kBAAWN,OAAOO,KAAK,GAAG,CAAC,QAAK,IAAI;AACjD;AAEA,SAASC,qBAA2D;EAAA,IAA1CN;IAAMH;EAC9B,IAAMU,QAAQX,WAAWY,MAAMC,QAAQZ,KAAK,IAAIA,QAAQ,CAACA,KAAK,CAAC;EAC/D,IAAI,CAACU,OAAO;IACV,OAAO,CAAC;MAAEP;MAAMU,OAAO;IAAM,CAAC;EAChC;EACA,IAAMC,SAASX,KAAKY,MAAML,KAAK,EAAER,OAAOc,OAAO;EAC/C,OAAOF,OAAOT,IAAI,UAACY;IAAA,OAAS;MAAEd,MAAMc;MAAKJ,OAAOH,MAAMQ,KAAKD,GAAG;IAAE;EAAA,CAAE;AACpE;AAIO,SAASE,aAAaC,OAA0B;EACrD,IAAQjB,OAAgBiB,MAAhBjB;IAAMH,QAAUoB,MAAVpB;EACd,OAAOP,QAAQ;IAAA,OAAMgB,eAAe;MAAEN;MAAMH;IAAM,CAAC;EAAA,GAAG,CAACG,MAAMH,KAAK,CAAC;AACrE;AAUO,IAAMqB,OAAOhC,WAA8B,SAASgC,MAAKD,OAAOE,KAAK;EAC1E,IAAMC,SAAShC,eAAe,QAAQ6B,KAAK;EAC3C,IAAMI,WAAWlC,iBAAiB8B,KAAK;EACvC,OACE,mBAACK;IACCH;EAAA,GACIE;IACJE,IAAG;IACHC;MAASC,IAAI;MAAeC,YAAY;IAAA,GAAaN;EAAO,EAC9D;AAEJ,CAAC;AAOM,SAASO,UAAUV,OAAoC;EAC5D,IAAQW,WAA4BX,MAA5BW;IAAU/B,QAAkBoB,MAAlBpB;IAAOuB,SAAWH,MAAXG;EAEzB,IAAI,OAAOQ,aAAa,UAAU;IAChC,MAAM,IAAIC,MAAM,iDAAiD;EACnE;EAEA,IAAMC,SAASd,aAAa;IAAEnB;IAAOG,MAAM4B;EAAS,CAAC;EAErD,OACE;IACGA,iBAAO1B,IAAI,UAAC6B,OAAOC,OAAU;MAC5B,OAAOD,MAAMrB,QACX,mBAACQ;QAAiBe,IAAIb;QACnBQ,gBAAM5B;MAAA,GADEgC,KAEX,IAEA,mBAAC3C;QAAsBuC,gBAAM5B;MAAA,GAAdgC,KAAmB;IAEtC,CAAC;EAAA,CACH;AAEJ","names":["forwardRef","omitThemingProps","useStyleConfig","Fragment","useMemo","jsx","escapeRegexp","term","replace","char","buildRegex","query","_query","filter","text","length","map","trim","RegExp","join","highlightWords","regex","Array","isArray","match","result","split","Boolean","str","test","useHighlight","props","Mark","ref","styles","ownProps","Box","as","__css","bg","whiteSpace","Highlight","children","Error","chunks","chunk","index","sx"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\layout\\src\\highlight.tsx"],"sourcesContent":["import {\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { Fragment, useMemo } from \"react\"\nimport { Box } from \"./box\"\n\ntype Chunk = {\n  text: string\n  match: boolean\n}\n\ntype HighlightOptions = {\n  text: string\n  query: string | string[]\n}\n\nconst escapeRegexp = (term: string): string =>\n  term.replace(/[|\\\\{}()[\\]^$+*?.-]/g, (char: string) => `\\\\${char}`)\n\nfunction buildRegex(query: string[]) {\n  const _query = query\n    .filter((text) => text.length !== 0)\n    .map((text) => escapeRegexp(text.trim()))\n  if (!_query.length) {\n    return null\n  }\n\n  return new RegExp(`(${_query.join(\"|\")})`, \"ig\")\n}\n\nfunction highlightWords({ text, query }: HighlightOptions): Chunk[] {\n  const regex = buildRegex(Array.isArray(query) ? query : [query])\n  if (!regex) {\n    return [{ text, match: false }]\n  }\n  const result = text.split(regex).filter(Boolean)\n  return result.map((str) => ({ text: str, match: regex.test(str) }))\n}\n\nexport type UseHighlightProps = HighlightOptions\n\nexport function useHighlight(props: UseHighlightProps) {\n  const { text, query } = props\n  return useMemo(() => highlightWords({ text, query }), [text, query])\n}\n\nexport type HighlightProps = {\n  query: string | string[]\n  children: string | ((props: Chunk[]) => React.ReactNode)\n  styles?: SystemStyleObject\n}\n\nexport type MarkProps = ThemingProps<\"Mark\"> & HTMLChakraProps<\"mark\">\n\nexport const Mark = forwardRef<MarkProps, \"mark\">(function Mark(props, ref) {\n  const styles = useStyleConfig(\"Mark\", props)\n  const ownProps = omitThemingProps(props)\n  return (\n    <Box\n      ref={ref}\n      {...ownProps}\n      as=\"mark\"\n      __css={{ bg: \"transparent\", whiteSpace: \"nowrap\", ...styles }}\n    />\n  )\n})\n\n/**\n * `Highlight` allows you to highlight substrings of a text.\n *\n * @see Docs https://chakra-ui.com/docs/components/highlight\n */\nexport function Highlight(props: HighlightProps): JSX.Element {\n  const { children, query, styles } = props\n\n  if (typeof children !== \"string\") {\n    throw new Error(\"The children prop of Highlight must be a string\")\n  }\n\n  const chunks = useHighlight({ query, text: children })\n\n  return (\n    <>\n      {chunks.map((chunk, index) => {\n        return chunk.match ? (\n          <Mark key={index} sx={styles}>\n            {chunk.text}\n          </Mark>\n        ) : (\n          <Fragment key={index}>{chunk.text}</Fragment>\n        )\n      })}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}