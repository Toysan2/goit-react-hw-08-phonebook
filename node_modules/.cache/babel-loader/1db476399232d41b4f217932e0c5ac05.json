{"ast":null,"code":"'use client';\n\nimport { usePopoverContext } from \"./chunk-Z3POGKNI.mjs\";\n\n// src/popover-trigger.tsx\nimport { Children, cloneElement } from \"react\";\nfunction PopoverTrigger(props) {\n  var child = Children.only(props.children);\n  var _usePopoverContext = usePopoverContext(),\n    getTriggerProps = _usePopoverContext.getTriggerProps;\n  return cloneElement(child, getTriggerProps(child.props, child.ref));\n}\nPopoverTrigger.displayName = \"PopoverTrigger\";\nexport { PopoverTrigger };","map":{"version":3,"mappings":";;;;;AAAA,SAASA,UAAUC,oBAAoB;AAQhC,SAASC,eAAeC,OAAsC;EAEnE,IAAMC,QAAaJ,SAASK,KAAKF,MAAMG,QAAQ;EAC/C,yBAA4BC,kBAAkB;IAAtCC;EACR,OAAOP,aAAaG,OAAOI,gBAAgBJ,MAAMD,OAAOC,MAAMK,GAAG,CAAC;AACpE;AAEAP,eAAeQ,cAAc","names":["Children","cloneElement","PopoverTrigger","props","child","only","children","usePopoverContext","getTriggerProps","ref","displayName"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\popover\\src\\popover-trigger.tsx"],"sourcesContent":["import { Children, cloneElement } from \"react\"\nimport { usePopoverContext } from \"./popover-context\"\n\n/**\n * PopoverTrigger opens the popover's content. It must be an interactive element\n * such as `button` or `a`.\n */\n\nexport function PopoverTrigger(props: { children: React.ReactNode }) {\n  // enforce a single child\n  const child: any = Children.only(props.children)\n  const { getTriggerProps } = usePopoverContext()\n  return cloneElement(child, getTriggerProps(child.props, child.ref))\n}\n\nPopoverTrigger.displayName = \"PopoverTrigger\"\n"]},"metadata":{},"sourceType":"module"}