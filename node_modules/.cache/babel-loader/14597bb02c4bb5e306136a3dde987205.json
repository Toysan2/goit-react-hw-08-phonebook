{"ast":null,"code":"'use client';\n\n// src/use-why-update.ts\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { useEffect, useRef } from \"react\";\nfunction useWhyDidYouUpdate(name, props) {\n  var previousProps = useRef();\n  useEffect(function () {\n    if (previousProps.current) {\n      var allKeys = Object.keys(_objectSpread(_objectSpread({}, previousProps.current), props));\n      var changesObj = {};\n      allKeys.forEach(function (key) {\n        if (previousProps.current[key] !== props[key]) {\n          changesObj[key] = {\n            from: previousProps.current[key],\n            to: props[key]\n          };\n        }\n      });\n      if (Object.keys(changesObj).length) {\n        console.log(\"[why-did-you-update]\", name, changesObj);\n      }\n    }\n    previousProps.current = props;\n  });\n}\nexport { useWhyDidYouUpdate };","map":{"version":3,"mappings":";;;;AAAA,SAASA,WAAWC,cAAc;AAE3B,SAASC,mBAAmBC,MAAcC,OAAY;EAC3D,IAAMC,gBAAgBJ,OAAY;EAElCD,UAAU,YAAM;IACd,IAAIK,cAAcC,SAAS;MACzB,IAAMC,UAAUC,OAAOC,qCAAUJ,cAAcC,UAAYF,MAAO;MAClE,IAAMM,aAAkC,CAAC;MACzCH,QAAQI,QAAQ,UAACC,KAAQ;QACvB,IAAIP,cAAcC,QAAQM,GAAG,MAAMR,MAAMQ,GAAG,GAAG;UAC7CF,WAAWE,GAAG,IAAI;YAChBC,MAAMR,cAAcC,QAAQM,GAAG;YAC/BE,IAAIV,MAAMQ,GAAG;UACf;QACF;MACF,CAAC;MAED,IAAIJ,OAAOC,KAAKC,UAAU,EAAEK,QAAQ;QAClCC,QAAQC,IAAI,wBAAwBd,MAAMO,UAAU;MACtD;IACF;IAEAL,cAAcC,UAAUF;EAC1B,CAAC;AACH","names":["useEffect","useRef","useWhyDidYouUpdate","name","props","previousProps","current","allKeys","Object","keys","changesObj","forEach","key","from","to","length","console","log"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\hooks\\src\\use-why-update.ts"],"sourcesContent":["import { useEffect, useRef } from \"react\"\n\nexport function useWhyDidYouUpdate(name: string, props: any) {\n  const previousProps = useRef<any>()\n\n  useEffect(() => {\n    if (previousProps.current) {\n      const allKeys = Object.keys({ ...previousProps.current, ...props })\n      const changesObj: Record<string, any> = {}\n      allKeys.forEach((key) => {\n        if (previousProps.current[key] !== props[key]) {\n          changesObj[key] = {\n            from: previousProps.current[key],\n            to: props[key],\n          }\n        }\n      })\n\n      if (Object.keys(changesObj).length) {\n        console.log(\"[why-did-you-update]\", name, changesObj)\n      }\n    }\n\n    previousProps.current = props\n  })\n}\n"]},"metadata":{},"sourceType":"module"}