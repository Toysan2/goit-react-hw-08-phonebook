{"ast":null,"code":"'use client';\n\n// src/use-popover.ts\nimport _defineProperty from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"closeOnBlur\", \"closeOnEsc\", \"initialFocusRef\", \"id\", \"returnFocusOnClose\", \"autoFocus\", \"arrowSize\", \"arrowShadowColor\", \"trigger\", \"openDelay\", \"closeDelay\", \"isLazy\", \"lazyBehavior\", \"computePositionOnMount\"];\nimport { useAnimationState } from \"@chakra-ui/react-use-animation-state\";\nimport { useFocusOnPointerDown } from \"@chakra-ui/react-use-focus-on-pointer-down\";\nimport { useFocusOnHide, useFocusOnShow } from \"@chakra-ui/react-use-focus-effect\";\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\";\nimport { popperCSSVars, usePopper } from \"@chakra-ui/popper\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { lazyDisclosure } from \"@chakra-ui/lazy-utils\";\nimport { useCallback, useEffect, useId, useRef, useState } from \"react\";\nvar TRIGGER = {\n  click: \"click\",\n  hover: \"hover\"\n};\nfunction usePopover() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _props$closeOnBlur = props.closeOnBlur,\n    closeOnBlur = _props$closeOnBlur === void 0 ? true : _props$closeOnBlur,\n    _props$closeOnEsc = props.closeOnEsc,\n    closeOnEsc = _props$closeOnEsc === void 0 ? true : _props$closeOnEsc,\n    initialFocusRef = props.initialFocusRef,\n    id = props.id,\n    _props$returnFocusOnC = props.returnFocusOnClose,\n    returnFocusOnClose = _props$returnFocusOnC === void 0 ? true : _props$returnFocusOnC,\n    _props$autoFocus = props.autoFocus,\n    autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus,\n    arrowSize = props.arrowSize,\n    arrowShadowColor = props.arrowShadowColor,\n    _props$trigger = props.trigger,\n    trigger = _props$trigger === void 0 ? TRIGGER.click : _props$trigger,\n    _props$openDelay = props.openDelay,\n    openDelay = _props$openDelay === void 0 ? 200 : _props$openDelay,\n    _props$closeDelay = props.closeDelay,\n    closeDelay = _props$closeDelay === void 0 ? 200 : _props$closeDelay,\n    isLazy = props.isLazy,\n    _props$lazyBehavior = props.lazyBehavior,\n    lazyBehavior = _props$lazyBehavior === void 0 ? \"unmount\" : _props$lazyBehavior,\n    computePositionOnMount = props.computePositionOnMount,\n    popperProps = _objectWithoutProperties(props, _excluded);\n  var _useDisclosure = useDisclosure(props),\n    isOpen = _useDisclosure.isOpen,\n    onClose = _useDisclosure.onClose,\n    onOpen = _useDisclosure.onOpen,\n    onToggle = _useDisclosure.onToggle;\n  var anchorRef = useRef(null);\n  var triggerRef = useRef(null);\n  var popoverRef = useRef(null);\n  var isHoveringRef = useRef(false);\n  var hasBeenOpened = useRef(false);\n  if (isOpen) {\n    hasBeenOpened.current = true;\n  }\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    hasHeader = _useState2[0],\n    setHasHeader = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    hasBody = _useState4[0],\n    setHasBody = _useState4[1];\n  var uuid = useId();\n  var uid = id != null ? id : uuid;\n  var _map = [\"popover-trigger\", \"popover-content\", \"popover-header\", \"popover-body\"].map(function (id2) {\n      return \"\".concat(id2, \"-\").concat(uid);\n    }),\n    _map2 = _slicedToArray(_map, 4),\n    triggerId = _map2[0],\n    popoverId = _map2[1],\n    headerId = _map2[2],\n    bodyId = _map2[3];\n  var _usePopper = usePopper(_objectSpread(_objectSpread({}, popperProps), {}, {\n      enabled: isOpen || !!computePositionOnMount\n    })),\n    referenceRef = _usePopper.referenceRef,\n    getArrowProps = _usePopper.getArrowProps,\n    getPopperProps = _usePopper.getPopperProps,\n    getArrowInnerProps = _usePopper.getArrowInnerProps,\n    forceUpdate = _usePopper.forceUpdate;\n  var animated = useAnimationState({\n    isOpen: isOpen,\n    ref: popoverRef\n  });\n  useFocusOnPointerDown({\n    enabled: isOpen,\n    ref: triggerRef\n  });\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click\n  });\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click\n  });\n  var shouldRenderChildren = lazyDisclosure({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present\n  });\n  var getPopoverProps = useCallback(function () {\n    var _objectSpread2;\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var popoverProps = _objectSpread(_objectSpread({}, props2), {}, {\n      style: _objectSpread(_objectSpread({}, props2.style), {}, (_objectSpread2 = {\n        transformOrigin: popperCSSVars.transformOrigin.varRef\n      }, _defineProperty(_objectSpread2, popperCSSVars.arrowSize.var, arrowSize ? \"\".concat(arrowSize, \"px\") : void 0), _defineProperty(_objectSpread2, popperCSSVars.arrowShadowColor.var, arrowShadowColor), _objectSpread2)),\n      ref: mergeRefs(popoverRef, _ref),\n      children: shouldRenderChildren ? props2.children : null,\n      id: popoverId,\n      tabIndex: -1,\n      role: \"dialog\",\n      onKeyDown: callAllHandlers(props2.onKeyDown, function (event) {\n        if (closeOnEsc && event.key === \"Escape\") {\n          onClose();\n        }\n      }),\n      onBlur: callAllHandlers(props2.onBlur, function (event) {\n        var relatedTarget = getRelatedTarget(event);\n        var targetIsPopover = contains(popoverRef.current, relatedTarget);\n        var targetIsTrigger = contains(triggerRef.current, relatedTarget);\n        var isValidBlur = !targetIsPopover && !targetIsTrigger;\n        if (isOpen && closeOnBlur && isValidBlur) {\n          onClose();\n        }\n      }),\n      \"aria-labelledby\": hasHeader ? headerId : void 0,\n      \"aria-describedby\": hasBody ? bodyId : void 0\n    });\n    if (trigger === TRIGGER.hover) {\n      popoverProps.role = \"tooltip\";\n      popoverProps.onMouseEnter = callAllHandlers(props2.onMouseEnter, function () {\n        isHoveringRef.current = true;\n      });\n      popoverProps.onMouseLeave = callAllHandlers(props2.onMouseLeave, function (event) {\n        if (event.nativeEvent.relatedTarget === null) {\n          return;\n        }\n        isHoveringRef.current = false;\n        setTimeout(function () {\n          return onClose();\n        }, closeDelay);\n      });\n    }\n    return popoverProps;\n  }, [shouldRenderChildren, popoverId, hasHeader, headerId, hasBody, bodyId, trigger, closeOnEsc, onClose, isOpen, closeOnBlur, closeDelay, arrowShadowColor, arrowSize]);\n  var getPopoverPositionerProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return getPopperProps(_objectSpread(_objectSpread({}, props2), {}, {\n      style: _objectSpread({\n        visibility: isOpen ? \"visible\" : \"hidden\"\n      }, props2.style)\n    }), forwardedRef);\n  }, [isOpen, getPopperProps]);\n  var getAnchorProps = useCallback(function (props2) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      // If anchor is rendered, it is used as reference.\n      ref: mergeRefs(_ref, anchorRef, referenceRef)\n    });\n  }, [anchorRef, referenceRef]);\n  var openTimeout = useRef();\n  var closeTimeout = useRef();\n  var maybeReferenceRef = useCallback(function (node) {\n    if (anchorRef.current == null) {\n      referenceRef(node);\n    }\n  }, [referenceRef]);\n  var getTriggerProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var triggerProps = _objectSpread(_objectSpread({}, props2), {}, {\n      ref: mergeRefs(triggerRef, _ref, maybeReferenceRef),\n      id: triggerId,\n      \"aria-haspopup\": \"dialog\",\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": popoverId\n    });\n    if (trigger === TRIGGER.click) {\n      triggerProps.onClick = callAllHandlers(props2.onClick, onToggle);\n    }\n    if (trigger === TRIGGER.hover) {\n      triggerProps.onFocus = callAllHandlers(props2.onFocus, function () {\n        if (openTimeout.current === void 0) {\n          onOpen();\n        }\n      });\n      triggerProps.onBlur = callAllHandlers(props2.onBlur, function (event) {\n        var relatedTarget = getRelatedTarget(event);\n        var isValidBlur = !contains(popoverRef.current, relatedTarget);\n        if (isOpen && closeOnBlur && isValidBlur) {\n          onClose();\n        }\n      });\n      triggerProps.onKeyDown = callAllHandlers(props2.onKeyDown, function (event) {\n        if (event.key === \"Escape\") {\n          onClose();\n        }\n      });\n      triggerProps.onMouseEnter = callAllHandlers(props2.onMouseEnter, function () {\n        isHoveringRef.current = true;\n        openTimeout.current = window.setTimeout(function () {\n          return onOpen();\n        }, openDelay);\n      });\n      triggerProps.onMouseLeave = callAllHandlers(props2.onMouseLeave, function () {\n        isHoveringRef.current = false;\n        if (openTimeout.current) {\n          clearTimeout(openTimeout.current);\n          openTimeout.current = void 0;\n        }\n        closeTimeout.current = window.setTimeout(function () {\n          if (isHoveringRef.current === false) {\n            onClose();\n          }\n        }, closeDelay);\n      });\n    }\n    return triggerProps;\n  }, [triggerId, isOpen, popoverId, trigger, maybeReferenceRef, onToggle, onOpen, closeOnBlur, onClose, openDelay, closeDelay]);\n  useEffect(function () {\n    return function () {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current);\n      }\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current);\n      }\n    };\n  }, []);\n  var getHeaderProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      id: headerId,\n      ref: mergeRefs(ref, function (node) {\n        setHasHeader(!!node);\n      })\n    });\n  }, [headerId]);\n  var getBodyProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      id: bodyId,\n      ref: mergeRefs(ref, function (node) {\n        setHasBody(!!node);\n      })\n    });\n  }, [bodyId]);\n  return {\n    forceUpdate: forceUpdate,\n    isOpen: isOpen,\n    onAnimationComplete: animated.onComplete,\n    onClose: onClose,\n    getAnchorProps: getAnchorProps,\n    getArrowProps: getArrowProps,\n    getArrowInnerProps: getArrowInnerProps,\n    getPopoverPositionerProps: getPopoverPositionerProps,\n    getPopoverProps: getPopoverProps,\n    getTriggerProps: getTriggerProps,\n    getHeaderProps: getHeaderProps,\n    getBodyProps: getBodyProps\n  };\n}\nfunction contains(parent, child) {\n  return parent === child || (parent == null ? void 0 : parent.contains(child));\n}\nfunction getRelatedTarget(event) {\n  var _a;\n  var activeEl = event.currentTarget.ownerDocument.activeElement;\n  return (_a = event.relatedTarget) != null ? _a : activeEl;\n}\nexport { usePopover };","map":{"version":3,"mappings":"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","names":["useAnimationState","useFocusOnPointerDown","useFocusOnHide","useFocusOnShow","useDisclosure","popperCSSVars","usePopper","mergeRefs","callAllHandlers","lazyDisclosure","useCallback","useEffect","useId","useRef","useState","TRIGGER","click","hover","usePopover","props","closeOnBlur","_props$closeOnEsc","closeOnEsc","initialFocusRef","id","_props$returnFocusOnC","returnFocusOnClose","_props$autoFocus","autoFocus","arrowSize","arrowShadowColor","_props$trigger","trigger","_props$openDelay","openDelay","_props$closeDelay","closeDelay","isLazy","_props$lazyBehavior","lazyBehavior","computePositionOnMount","popperProps","isOpen","onClose","onOpen","onToggle","anchorRef","triggerRef","popoverRef","isHoveringRef","hasBeenOpened","current","_useState2","hasHeader","setHasHeader","_useState4","hasBody","setHasBody","uuid","uid","map","_map2","triggerId","popoverId","headerId","bodyId","enabled","referenceRef","getArrowProps","getPopperProps","getArrowInnerProps","forceUpdate","animated","ref","focusRef","visible","shouldFocus","shouldRenderChildren","wasSelected","mode","isSelected","present","getPopoverProps","_ref","popoverProps","style","transformOrigin","varRef","var","children","tabIndex","role","onKeyDown","event","key","onBlur","relatedTarget","getRelatedTarget","targetIsPopover","contains","targetIsTrigger","isValidBlur","onMouseEnter","onMouseLeave","nativeEvent","setTimeout","getPopoverPositionerProps","forwardedRef","visibility","getAnchorProps","openTimeout","closeTimeout","maybeReferenceRef","node","getTriggerProps","triggerProps","onClick","onFocus","window","clearTimeout","getHeaderProps","getBodyProps","onAnimationComplete","onComplete","parent","child","activeEl","currentTarget","ownerDocument","activeElement","_a"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\popover\\src\\use-popover.ts"],"sourcesContent":["import { useAnimationState } from \"@chakra-ui/react-use-animation-state\"\nimport { useFocusOnPointerDown } from \"@chakra-ui/react-use-focus-on-pointer-down\"\nimport {\n  useFocusOnHide,\n  useFocusOnShow,\n} from \"@chakra-ui/react-use-focus-effect\"\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\"\nimport { popperCSSVars, usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport { DOMAttributes, PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { lazyDisclosure, LazyMode } from \"@chakra-ui/lazy-utils\"\nimport { useCallback, useEffect, useId, useRef, useState } from \"react\"\n\nconst TRIGGER = {\n  click: \"click\",\n  hover: \"hover\",\n} as const\n\nexport interface UsePopoverProps extends Omit<UsePopperProps, \"enabled\"> {\n  /**\n   * The html `id` attribute of the popover.\n   * If not provided, we generate a unique id.\n   *\n   * This `id` is also used to auto-generate the `aria-labelledby`\n   * and `aria-describedby` attributes that points to the `PopoverHeader` and `PopoverBody`\n   */\n  id?: string\n  /**\n   * If `true`, the popover will be opened in controlled mode.\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the popover will be initially opened.\n   */\n  defaultIsOpen?: boolean\n  /**\n   * The `ref` of the element that should receive focus when the popover opens.\n   */\n  initialFocusRef?: React.RefObject<{ focus(): void }>\n  /**\n   * If `true`, focus will be returned to the element that triggers the popover\n   * when it closes\n   * @default true\n   */\n  returnFocusOnClose?: boolean\n  /**\n   * If `true`, focus will be transferred to the first interactive element\n   * when the popover opens\n   * @default true\n   */\n  autoFocus?: boolean\n  /**\n   * If `true`, the popover will close when you blur out it by\n   * clicking outside or tabbing out\n   * @default true\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the popover will close when you hit the `Esc` key\n   * @default true\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the popover opens\n   */\n  onOpen?: () => void\n  /**\n   * Callback fired when the popover closes\n   */\n  onClose?: () => void\n  /**\n   * The size of the popover arrow\n   */\n  arrowSize?: number\n  /**\n   * The `box-shadow` of the popover arrow\n   */\n  arrowShadowColor?: string\n  /**\n   * The interaction that triggers the popover.\n   *\n   * `hover` - means the popover will open when you hover with mouse or\n   * focus with keyboard on the popover trigger\n   *\n   * `click` - means the popover will open on click or\n   * press `Enter` to `Space` on keyboard\n   *\n   * @default \"click\"\n   */\n  trigger?: keyof typeof TRIGGER\n  /**\n   * Delay in milliseconds before the popover opens after a trigger event.\n   * Only works when `trigger=\"hover\"`\n   *\n   * @default 200\n   */\n  openDelay?: number\n  /**\n   * Delay in milliseconds before the popover closes after a trigger event.\n   * Only works when `trigger=\"hover\"`\n   *\n   * @default 200\n   */\n  closeDelay?: number\n  /**\n   * Performance 🚀:\n   * If `true`, the PopoverContent rendering will be deferred\n   * until the popover is open.\n   */\n  isLazy?: boolean\n  /**\n   * Performance 🚀:\n   * The lazy behavior of popover's content when not visible.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The popover's content is always unmounted when not open.\n   * - \"keepMounted\": The popover's content initially unmounted,\n   * but stays mounted when popover is open.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyMode\n  /**\n   * If `true`, the popover will be positioned when it mounts\n   * (even if it's not open)\n   *\n   * Note 🚨: We don't recommend using this in a popover/menu intensive UI or page\n   * as it might affect scrolling performance.\n   */\n  computePositionOnMount?: boolean\n}\n\n/**\n * @internal\n */\nexport function usePopover(props: UsePopoverProps = {}) {\n  const {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    id,\n    returnFocusOnClose = true,\n    autoFocus = true,\n    arrowSize,\n    arrowShadowColor,\n    trigger = TRIGGER.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    computePositionOnMount,\n    ...popperProps\n  } = props\n\n  const { isOpen, onClose, onOpen, onToggle } = useDisclosure(props)\n\n  const anchorRef = useRef<HTMLElement>(null)\n  const triggerRef = useRef<HTMLElement>(null)\n  const popoverRef = useRef<HTMLElement>(null)\n\n  const isHoveringRef = useRef(false)\n\n  const hasBeenOpened = useRef(false)\n  if (isOpen) {\n    hasBeenOpened.current = true\n  }\n\n  const [hasHeader, setHasHeader] = useState(false)\n  const [hasBody, setHasBody] = useState(false)\n\n  const uuid = useId()\n  const uid = id ?? uuid\n  const [triggerId, popoverId, headerId, bodyId] = [\n    \"popover-trigger\",\n    \"popover-content\",\n    \"popover-header\",\n    \"popover-body\",\n  ].map((id) => `${id}-${uid}`)\n\n  const {\n    referenceRef,\n    getArrowProps,\n    getPopperProps,\n    getArrowInnerProps,\n    forceUpdate,\n  } = usePopper({\n    ...popperProps,\n    enabled: isOpen || !!computePositionOnMount,\n  })\n\n  const animated = useAnimationState({ isOpen, ref: popoverRef })\n\n  useFocusOnPointerDown({\n    enabled: isOpen,\n    ref: triggerRef,\n  })\n\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click,\n  })\n\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click,\n  })\n\n  const shouldRenderChildren = lazyDisclosure({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present,\n  })\n\n  const getPopoverProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const popoverProps: DOMAttributes = {\n        ...props,\n        style: {\n          ...props.style,\n          transformOrigin: popperCSSVars.transformOrigin.varRef,\n          [popperCSSVars.arrowSize.var]: arrowSize\n            ? `${arrowSize}px`\n            : undefined,\n          [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n        },\n        ref: mergeRefs(popoverRef, _ref),\n        children: shouldRenderChildren ? props.children : null,\n        id: popoverId,\n        tabIndex: -1,\n        role: \"dialog\",\n        onKeyDown: callAllHandlers(props.onKeyDown, (event) => {\n          if (closeOnEsc && event.key === \"Escape\") {\n            onClose()\n          }\n        }),\n        onBlur: callAllHandlers(props.onBlur, (event) => {\n          const relatedTarget = getRelatedTarget(event)\n          const targetIsPopover = contains(popoverRef.current, relatedTarget)\n          const targetIsTrigger = contains(triggerRef.current, relatedTarget)\n\n          const isValidBlur = !targetIsPopover && !targetIsTrigger\n\n          if (isOpen && closeOnBlur && isValidBlur) {\n            onClose()\n          }\n        }),\n        \"aria-labelledby\": hasHeader ? headerId : undefined,\n        \"aria-describedby\": hasBody ? bodyId : undefined,\n      }\n\n      if (trigger === TRIGGER.hover) {\n        popoverProps.role = \"tooltip\"\n        popoverProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n        })\n        popoverProps.onMouseLeave = callAllHandlers(\n          props.onMouseLeave,\n          (event) => {\n            // https://stackoverflow.com/questions/46831247/select-triggers-mouseleave-event-on-parent-element-in-mozilla-firefox\n            if (event.nativeEvent.relatedTarget === null) {\n              return\n            }\n            isHoveringRef.current = false\n            setTimeout(() => onClose(), closeDelay)\n          },\n        )\n      }\n\n      return popoverProps\n    },\n    [\n      shouldRenderChildren,\n      popoverId,\n      hasHeader,\n      headerId,\n      hasBody,\n      bodyId,\n      trigger,\n      closeOnEsc,\n      onClose,\n      isOpen,\n      closeOnBlur,\n      closeDelay,\n      arrowShadowColor,\n      arrowSize,\n    ],\n  )\n\n  const getPopoverPositionerProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) =>\n      getPopperProps(\n        {\n          ...props,\n          style: {\n            visibility: isOpen ? \"visible\" : \"hidden\",\n            ...props.style,\n          },\n        },\n        forwardedRef,\n      ),\n    [isOpen, getPopperProps],\n  )\n\n  const getAnchorProps: PropGetter = useCallback(\n    (props, _ref = null) => {\n      return {\n        ...props,\n        // If anchor is rendered, it is used as reference.\n        ref: mergeRefs(_ref, anchorRef, referenceRef),\n      }\n    },\n    [anchorRef, referenceRef],\n  )\n\n  const openTimeout = useRef<number>()\n  const closeTimeout = useRef<number>()\n\n  const maybeReferenceRef = useCallback(\n    (node: Element) => {\n      // Don't override referenceRef in case the PopoverAnchor is rendered.\n      if (anchorRef.current == null) {\n        referenceRef(node)\n      }\n    },\n    [referenceRef],\n  )\n\n  const getTriggerProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const triggerProps: DOMAttributes = {\n        ...props,\n        ref: mergeRefs(triggerRef, _ref, maybeReferenceRef),\n        id: triggerId,\n        \"aria-haspopup\": \"dialog\",\n        \"aria-expanded\": isOpen,\n        \"aria-controls\": popoverId,\n      }\n\n      if (trigger === TRIGGER.click) {\n        triggerProps.onClick = callAllHandlers(props.onClick, onToggle)\n      }\n\n      if (trigger === TRIGGER.hover) {\n        /**\n         * Any content that shows on pointer hover should also show on keyboard focus.\n         * Consider focus and blur to be the `hover` for keyboard users.\n         *\n         * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\n         */\n        triggerProps.onFocus = callAllHandlers(props.onFocus, () => {\n          // If openTimeout.current does not exist, the user is using keyboard focus (not mouse hover/click)\n          if (openTimeout.current === undefined) {\n            onOpen()\n          }\n        })\n        triggerProps.onBlur = callAllHandlers(props.onBlur, (event) => {\n          const relatedTarget = getRelatedTarget(event)\n          const isValidBlur = !contains(popoverRef.current, relatedTarget)\n\n          if (isOpen && closeOnBlur && isValidBlur) {\n            onClose()\n          }\n        })\n\n        /**\n         * Any content that shows on hover or focus must be dismissible.\n         * This case pressing `Escape` will dismiss the popover\n         */\n        triggerProps.onKeyDown = callAllHandlers(props.onKeyDown, (event) => {\n          if (event.key === \"Escape\") {\n            onClose()\n          }\n        })\n\n        triggerProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n          openTimeout.current = window.setTimeout(() => onOpen(), openDelay)\n        })\n\n        triggerProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n\n          if (openTimeout.current) {\n            clearTimeout(openTimeout.current)\n            openTimeout.current = undefined\n          }\n\n          closeTimeout.current = window.setTimeout(() => {\n            if (isHoveringRef.current === false) {\n              onClose()\n            }\n          }, closeDelay)\n        })\n      }\n\n      return triggerProps\n    },\n    [\n      triggerId,\n      isOpen,\n      popoverId,\n      trigger,\n      maybeReferenceRef,\n      onToggle,\n      onOpen,\n      closeOnBlur,\n      onClose,\n      openDelay,\n      closeDelay,\n    ],\n  )\n\n  useEffect(() => {\n    return () => {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current)\n      }\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current)\n      }\n    }\n  }, [])\n\n  const getHeaderProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id: headerId,\n      ref: mergeRefs(ref, (node: HTMLElement | null) => {\n        setHasHeader(!!node)\n      }),\n    }),\n    [headerId],\n  )\n\n  const getBodyProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id: bodyId,\n      ref: mergeRefs(ref, (node) => {\n        setHasBody(!!node)\n      }),\n    }),\n    [bodyId],\n  )\n\n  return {\n    forceUpdate,\n    isOpen,\n    onAnimationComplete: animated.onComplete,\n    onClose,\n    getAnchorProps,\n    getArrowProps,\n    getArrowInnerProps,\n    getPopoverPositionerProps,\n    getPopoverProps,\n    getTriggerProps,\n    getHeaderProps,\n    getBodyProps,\n  }\n}\n\nexport type UsePopoverReturn = ReturnType<typeof usePopover>\n\nfunction contains(parent: HTMLElement | null, child: HTMLElement | null) {\n  return parent === child || parent?.contains(child)\n}\n\nfunction getRelatedTarget(event: React.FocusEvent) {\n  const activeEl = event.currentTarget.ownerDocument.activeElement\n  return (event.relatedTarget ?? activeEl) as HTMLElement | null\n}\n"]},"metadata":{},"sourceType":"module"}