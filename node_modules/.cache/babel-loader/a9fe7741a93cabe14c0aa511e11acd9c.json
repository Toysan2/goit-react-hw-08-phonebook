{"ast":null,"code":"'use client';\n\nimport { useUpdateEffect } from \"./chunk-6WEF4DIO.mjs\";\n\n// src/use-focus-on-hide.ts\nimport { contains, focus, getActiveElement, isTabbable } from \"@chakra-ui/utils\";\nfunction preventReturnFocus(containerRef) {\n  var el = containerRef.current;\n  if (!el) return false;\n  var activeElement = getActiveElement(el);\n  if (!activeElement) return false;\n  if (contains(el, activeElement)) return false;\n  if (isTabbable(activeElement)) return true;\n  return false;\n}\nfunction useFocusOnHide(containerRef, options) {\n  var shouldFocusProp = options.shouldFocus,\n    visible = options.visible,\n    focusRef = options.focusRef;\n  var shouldFocus = shouldFocusProp && !visible;\n  useUpdateEffect(function () {\n    if (!shouldFocus) return;\n    if (preventReturnFocus(containerRef)) {\n      return;\n    }\n    var el = (focusRef == null ? void 0 : focusRef.current) || containerRef.current;\n    if (el) {\n      focus(el, {\n        nextTick: true\n      });\n    }\n  }, [shouldFocus, containerRef, focusRef]);\n}\nexport { useFocusOnHide };","map":{"version":3,"mappings":";;;;;AAAA,SACEA,UACAC,OAEAC,kBACAC,kBACK;AAUP,SAASC,mBAAmBC,cAA4C;EACtE,IAAMC,KAAKD,aAAaE;EACxB,IAAI,CAACD,IAAI,OAAO;EAEhB,IAAME,gBAAgBN,iBAAiBI,EAAE;EAEzC,IAAI,CAACE,eAAe,OAAO;EAC3B,IAAIR,SAASM,IAAIE,aAAa,GAAG,OAAO;EACxC,IAAIL,WAAWK,aAAa,GAAG,OAAO;EAEtC,OAAO;AACT;AASO,SAASC,eACdJ,cACAK,SACA;EACA,IAAqBC,kBAAuCD,QAApDE;IAA8BC,UAAsBH,QAAtBG;IAASC,WAAaJ,QAAbI;EAE/C,IAAMF,cAAcD,mBAAmB,CAACE;EAExCE,gBAAgB,YAAM;IACpB,IAAI,CAACH,aAAa;IAElB,IAAIR,mBAAmBC,YAAY,GAAG;MACpC;IACF;IAEA,IAAMC,MAAKQ,qCAAUP,YAAWF,aAAaE;IAE7C,IAAID,IAAI;MACNL,MAAMK,IAAI;QAAEU,UAAU;MAAK,CAAC;IAC9B;EACF,GAAG,CAACJ,aAAaP,cAAcS,QAAQ,CAAC;AAC1C","names":["contains","focus","getActiveElement","isTabbable","preventReturnFocus","containerRef","el","current","activeElement","useFocusOnHide","options","shouldFocusProp","shouldFocus","visible","focusRef","useUpdateEffect","nextTick"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\hooks\\src\\use-focus-on-hide.ts"],"sourcesContent":["import {\n  contains,\n  focus,\n  FocusableElement,\n  getActiveElement,\n  isTabbable,\n} from \"@chakra-ui/utils\"\nimport { RefObject } from \"react\"\nimport { useUpdateEffect } from \"./use-update-effect\"\n\nexport interface UseFocusOnHideOptions {\n  focusRef: RefObject<FocusableElement>\n  shouldFocus?: boolean\n  visible?: boolean\n}\n\nfunction preventReturnFocus(containerRef: React.RefObject<HTMLElement>) {\n  const el = containerRef.current\n  if (!el) return false\n\n  const activeElement = getActiveElement(el)\n\n  if (!activeElement) return false\n  if (contains(el, activeElement)) return false\n  if (isTabbable(activeElement)) return true\n\n  return false\n}\n\n/**\n * Popover hook to manage the focus when the popover closes or hides.\n *\n * We either want to return focus back to the popover trigger or\n * let focus proceed normally if user moved to another interactive\n * element in the viewport.\n */\nexport function useFocusOnHide(\n  containerRef: RefObject<HTMLElement>,\n  options: UseFocusOnHideOptions,\n) {\n  const { shouldFocus: shouldFocusProp, visible, focusRef } = options\n\n  const shouldFocus = shouldFocusProp && !visible\n\n  useUpdateEffect(() => {\n    if (!shouldFocus) return\n\n    if (preventReturnFocus(containerRef)) {\n      return\n    }\n\n    const el = focusRef?.current || containerRef.current\n\n    if (el) {\n      focus(el, { nextTick: true })\n    }\n  }, [shouldFocus, containerRef, focusRef])\n}\n"]},"metadata":{},"sourceType":"module"}