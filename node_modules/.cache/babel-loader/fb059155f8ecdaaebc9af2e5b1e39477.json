{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { getStatusIcon, useAlertContext, useAlertStyles } from \"./chunk-XCES3W5V.mjs\";\n\n// src/alert-icon.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction AlertIcon(props) {\n  var _useAlertContext = useAlertContext(),\n    status = _useAlertContext.status;\n  var BaseIcon = getStatusIcon(status);\n  var styles = useAlertStyles();\n  var css = status === \"loading\" ? styles.spinner : styles.icon;\n  return /* @__PURE__ */jsx(chakra.span, _objectSpread(_objectSpread({\n    display: \"inherit\",\n    \"data-status\": status\n  }, props), {}, {\n    className: cx(\"chakra-alert__icon\", props.className),\n    __css: css,\n    children: props.children || /* @__PURE__ */jsx(BaseIcon, {\n      h: \"100%\",\n      w: \"100%\"\n    })\n  }));\n}\nAlertIcon.displayName = \"AlertIcon\";\nexport { AlertIcon };","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,UAAU;AACnB,SAASC,cAA+B;AAmBf;AAdlB,SAASC,UAAUC,OAAuB;EAC/C,uBAAmBC,gBAAgB;IAA3BC;EACR,IAAMC,WAAWC,cAAcF,MAAM;EACrC,IAAMG,SAASC,eAAe;EAC9B,IAAMC,MAAML,WAAW,YAAYG,OAAOG,UAAUH,OAAOI;EAE3D,OACE,mBAACX,OAAOY;IACNC,SAAQ;IACR,eAAaT;EAAA,GACTF;IACJY,WAAWf,GAAG,sBAAsBG,MAAMY,SAAS;IACnDC,OAAON;IAENO,gBAAMA,YAAY,mBAACX;MAASY,GAAE;MAAOC,GAAE;IAAA,CAAO;EAAA,EACjD;AAEJ;AAEAjB,UAAUkB,cAAc","names":["cx","chakra","AlertIcon","props","useAlertContext","status","BaseIcon","getStatusIcon","styles","useAlertStyles","css","spinner","icon","span","display","className","__css","children","h","w","displayName"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\alert\\src\\alert-icon.tsx"],"sourcesContent":["import { cx } from \"@chakra-ui/shared-utils\"\nimport { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { getStatusIcon, useAlertContext, useAlertStyles } from \"./alert-context\"\n\nexport interface AlertIconProps extends HTMLChakraProps<\"span\"> {}\n\nexport function AlertIcon(props: AlertIconProps) {\n  const { status } = useAlertContext()\n  const BaseIcon = getStatusIcon(status)\n  const styles = useAlertStyles()\n  const css = status === \"loading\" ? styles.spinner : styles.icon\n\n  return (\n    <chakra.span\n      display=\"inherit\"\n      data-status={status}\n      {...props}\n      className={cx(\"chakra-alert__icon\", props.className)}\n      __css={css}\n    >\n      {props.children || <BaseIcon h=\"100%\" w=\"100%\" />}\n    </chakra.span>\n  )\n}\n\nAlertIcon.displayName = \"AlertIcon\"\n"]},"metadata":{},"sourceType":"module"}