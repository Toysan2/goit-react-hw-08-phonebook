{"ast":null,"code":"'use client';\n\nimport _defineProperty from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"startColor\", \"endColor\", \"isLoaded\", \"fadeDuration\", \"speed\", \"className\", \"fitContent\"];\nimport { useIsFirstRender } from \"./chunk-AASO4CLC.mjs\";\n\n// src/skeleton.tsx\nimport { usePrevious } from \"@chakra-ui/react-use-previous\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, cssVar, forwardRef, keyframes, omitThemingProps, useStyleConfig, useToken } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\"\n    }\n  }\n});\nvar $startColor = cssVar(\"skeleton-start-color\");\nvar $endColor = cssVar(\"skeleton-end-color\");\nvar fade = keyframes({\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n});\nvar bgFade = keyframes({\n  from: {\n    borderColor: $startColor.reference,\n    background: $startColor.reference\n  },\n  to: {\n    borderColor: $endColor.reference,\n    background: $endColor.reference\n  }\n});\nvar Skeleton = forwardRef(function (props, ref) {\n  var skeletonProps = _objectSpread(_objectSpread({}, props), {}, {\n    fadeDuration: typeof props.fadeDuration === \"number\" ? props.fadeDuration : 0.4,\n    speed: typeof props.speed === \"number\" ? props.speed : 0.8\n  });\n  var styles = useStyleConfig(\"Skeleton\", skeletonProps);\n  var isFirstRender = useIsFirstRender();\n  var _omitThemingProps = omitThemingProps(skeletonProps),\n    _omitThemingProps$sta = _omitThemingProps.startColor,\n    startColor = _omitThemingProps$sta === void 0 ? \"\" : _omitThemingProps$sta,\n    _omitThemingProps$end = _omitThemingProps.endColor,\n    endColor = _omitThemingProps$end === void 0 ? \"\" : _omitThemingProps$end,\n    isLoaded = _omitThemingProps.isLoaded,\n    fadeDuration = _omitThemingProps.fadeDuration,\n    speed = _omitThemingProps.speed,\n    className = _omitThemingProps.className,\n    fitContent = _omitThemingProps.fitContent,\n    rest = _objectWithoutProperties(_omitThemingProps, _excluded);\n  var _useToken = useToken(\"colors\", [startColor, endColor]),\n    _useToken2 = _slicedToArray(_useToken, 2),\n    startColorVar = _useToken2[0],\n    endColorVar = _useToken2[1];\n  var wasPreviouslyLoaded = usePrevious(isLoaded);\n  var _className = cx(\"chakra-skeleton\", className);\n  var cssVarStyles = _objectSpread(_objectSpread({}, startColorVar && _defineProperty({}, $startColor.variable, startColorVar)), endColorVar && _defineProperty({}, $endColor.variable, endColorVar));\n  if (isLoaded) {\n    var animation = isFirstRender || wasPreviouslyLoaded ? \"none\" : \"\".concat(fade, \" \").concat(fadeDuration, \"s\");\n    return /* @__PURE__ */jsx(chakra.div, _objectSpread({\n      ref: ref,\n      className: _className,\n      __css: {\n        animation: animation\n      }\n    }, rest));\n  }\n  return /* @__PURE__ */jsx(StyledSkeleton, _objectSpread(_objectSpread({\n    ref: ref,\n    className: _className\n  }, rest), {}, {\n    __css: _objectSpread(_objectSpread(_objectSpread({\n      width: fitContent ? \"fit-content\" : void 0\n    }, styles), cssVarStyles), {}, {\n      _dark: _objectSpread(_objectSpread({}, styles[\"_dark\"]), cssVarStyles),\n      animation: \"\".concat(speed, \"s linear infinite alternate \").concat(bgFade)\n    })\n  }));\n});\nSkeleton.displayName = \"Skeleton\";\nexport { Skeleton };","map":{"version":3,"mappings":";;;;;;;;;;AAAA,SAASA,mBAAmB;AAC5B,SAASC,UAAU;AACnB,SACEC,QACAC,QACAC,YAEAC,WACAC,kBAEAC,gBACAC,gBACK;AA0HD;AArFN,IAAMC,iBAAiBP,OAAO,OAAO;EACnCQ,WAAW;IACTC,WAAW;IACXC,gBAAgB;IAChBC,QAAQ;IACRC,OAAO;IACPC,eAAe;IACfC,YAAY;IACZ,0BAA0B;MACxBC,YAAY;IACd;EACF;AACF,CAAC;AAED,IAAMC,cAAcf,OAAO,sBAAsB;AACjD,IAAMgB,YAAYhB,OAAO,oBAAoB;AAS7C,IAAMiB,OAAOf,UAAU;EACrBgB,MAAM;IAAEC,SAAS;EAAE;EACnBC,IAAI;IAAED,SAAS;EAAE;AACnB,CAAC;AAED,IAAME,SAASnB,UAAU;EACvBgB,MAAM;IACJI,aAAaP,YAAYQ;IACzBC,YAAYT,YAAYQ;EAC1B;EACAH,IAAI;IACFE,aAAaN,UAAUO;IACvBC,YAAYR,UAAUO;EACxB;AACF,CAAC;AAOM,IAAME,WAAWxB,WAAiC,UAACyB,OAAOC,KAAQ;EACvE,IAAMC,gDACDF;IACHG,cACE,OAAOH,MAAMG,iBAAiB,WAAWH,MAAMG,eAAe;IAChEC,OAAO,OAAOJ,MAAMI,UAAU,WAAWJ,MAAMI,QAAQ;EAAA,EACzD;EACA,IAAMC,SAAS3B,eAAe,YAAYwB,aAAa;EACvD,IAAMI,gBAAgBC,iBAAiB;EAEvC,wBASI9B,iBAAiByB,aAAa;IAAAM,0CARhCC;IAAAA,gDAAa;IAAAC,0CACbC;IAAAA,8CAAW;IACXC;IACAT;IACAC;IACAS;IACAC;IACGC;EAGL,gBAAqCpC,SAAS,UAAU,CACtD8B,YACAE,SACD;IAAAK;IAHMC;IAAeC,WAAW;EAKjC,IAAMC,sBAAsBhD,YAAYyC,QAAQ;EAEhD,IAAMQ,aAAahD,GAAG,mBAAmByC,SAAS;EAElD,IAAMQ,+CACAJ,qCAAoB5B,YAAYiC,QAAQ,EAAGL,cAAc,GACzDC,mCAAkB5B,UAAUgC,QAAQ,EAAGJ,YAAY,CACzD;EAEA,IAAIN,UAAU;IACZ,IAAMW,YACJjB,iBAAiBa,sBAAsB,mBAAY5B,kBAAQY;IAE7D,OACE,mBAAC9B,OAAOmD;MACNvB;MACAY,WAAWO;MACXK,OAAO;QAAEF;MAAU;IAAA,GACfR,KACN;EAEJ;EAEA,OACE,mBAACnC;IACCqB;IACAY,WAAWO;EAAA,GACPL;IACJU;MACEC,OAAOZ,aAAa,gBAAgB;IAAA,GACjCT,SACAgB;MACHM,uCAAatB,OAAe,OAAO,IAAMgB,aAAa;MACtDE,qBAAcnB,8CAAoCT;IAAA;EACpD,EACF;AAEJ,CAAC;AAEDI,SAAS6B,cAAc","names":["usePrevious","cx","chakra","cssVar","forwardRef","keyframes","omitThemingProps","useStyleConfig","useToken","StyledSkeleton","baseStyle","boxShadow","backgroundClip","cursor","color","pointerEvents","userSelect","visibility","$startColor","$endColor","fade","from","opacity","to","bgFade","borderColor","reference","background","Skeleton","props","ref","skeletonProps","fadeDuration","speed","styles","isFirstRender","useIsFirstRender","_omitThemingProps$sta","startColor","_omitThemingProps$end","endColor","isLoaded","className","fitContent","rest","_useToken2","startColorVar","endColorVar","wasPreviouslyLoaded","_className","cssVarStyles","variable","animation","div","__css","width","_dark","displayName"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\skeleton\\src\\skeleton.tsx"],"sourcesContent":["import { usePrevious } from \"@chakra-ui/react-use-previous\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  cssVar,\n  forwardRef,\n  HTMLChakraProps,\n  keyframes,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  useToken,\n} from \"@chakra-ui/system\"\nimport { useIsFirstRender } from \"./use-is-first-render\"\n\nexport interface SkeletonOptions {\n  /**\n   * The color at the animation start\n   */\n  startColor?: string\n  /**\n   * The color at the animation end\n   */\n  endColor?: string\n  /**\n   * If `true`, it'll render its children with a nice fade transition\n   *\n   * @default false\n   */\n  isLoaded?: boolean\n  /**\n   * The animation speed in seconds\n   *\n   * @default 0.8\n   */\n  speed?: number\n  /**\n   * The fadeIn duration in seconds. Requires `isLoaded` toggled to `true` in order to see the transition.\n   *\n   * @default 0.4\n   */\n  fadeDuration?: number\n  /**\n   * If `true`, the skeleton will take the width of it's children\n   * @default false\n   */\n  fitContent?: boolean\n}\n\nconst StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\",\n    },\n  },\n})\n\nconst $startColor = cssVar(\"skeleton-start-color\")\nconst $endColor = cssVar(\"skeleton-end-color\")\n\nexport type ISkeleton = SkeletonOptions\n\nexport interface SkeletonProps\n  extends HTMLChakraProps<\"div\">,\n    SkeletonOptions,\n    ThemingProps<\"Skeleton\"> {}\n\nconst fade = keyframes({\n  from: { opacity: 0 },\n  to: { opacity: 1 },\n})\n\nconst bgFade = keyframes({\n  from: {\n    borderColor: $startColor.reference,\n    background: $startColor.reference,\n  },\n  to: {\n    borderColor: $endColor.reference,\n    background: $endColor.reference,\n  },\n})\n\n/**\n * `Skeleton` is used to display the loading state of some component.\n *\n * @see Docs https://chakra-ui.com/docs/components/skeleton\n */\nexport const Skeleton = forwardRef<SkeletonProps, \"div\">((props, ref) => {\n  const skeletonProps: SkeletonProps = {\n    ...props,\n    fadeDuration:\n      typeof props.fadeDuration === \"number\" ? props.fadeDuration : 0.4,\n    speed: typeof props.speed === \"number\" ? props.speed : 0.8,\n  }\n  const styles = useStyleConfig(\"Skeleton\", skeletonProps)\n  const isFirstRender = useIsFirstRender()\n\n  const {\n    startColor = \"\",\n    endColor = \"\",\n    isLoaded,\n    fadeDuration,\n    speed,\n    className,\n    fitContent,\n    ...rest\n  } = omitThemingProps(skeletonProps)\n\n  const [startColorVar, endColorVar] = useToken(\"colors\", [\n    startColor,\n    endColor,\n  ])\n\n  const wasPreviouslyLoaded = usePrevious(isLoaded)\n\n  const _className = cx(\"chakra-skeleton\", className)\n\n  const cssVarStyles = {\n    ...(startColorVar && { [$startColor.variable]: startColorVar }),\n    ...(endColorVar && { [$endColor.variable]: endColorVar }),\n  }\n\n  if (isLoaded) {\n    const animation =\n      isFirstRender || wasPreviouslyLoaded ? \"none\" : `${fade} ${fadeDuration}s`\n\n    return (\n      <chakra.div\n        ref={ref}\n        className={_className}\n        __css={{ animation }}\n        {...rest}\n      />\n    )\n  }\n\n  return (\n    <StyledSkeleton\n      ref={ref}\n      className={_className}\n      {...rest}\n      __css={{\n        width: fitContent ? \"fit-content\" : undefined,\n        ...styles,\n        ...cssVarStyles,\n        _dark: { ...(styles as any)[\"_dark\"], ...cssVarStyles },\n        animation: `${speed}s linear infinite alternate ${bgFade}`,\n      }}\n    />\n  )\n})\n\nSkeleton.displayName = \"Skeleton\"\n"]},"metadata":{},"sourceType":"module"}