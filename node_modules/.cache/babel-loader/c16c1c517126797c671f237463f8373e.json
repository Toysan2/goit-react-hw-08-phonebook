{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { modalManager, useModalManager } from \"./chunk-CYRBRIA2.mjs\";\n\n// src/use-modal.ts\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { hideOthers } from \"aria-hidden\";\nimport { useCallback, useEffect, useId, useMemo, useRef, useState } from \"react\";\nfunction useModal(props) {\n  var isOpen = props.isOpen,\n    onClose = props.onClose,\n    id = props.id,\n    _props$closeOnOverlay = props.closeOnOverlayClick,\n    closeOnOverlayClick = _props$closeOnOverlay === void 0 ? true : _props$closeOnOverlay,\n    _props$closeOnEsc = props.closeOnEsc,\n    closeOnEsc = _props$closeOnEsc === void 0 ? true : _props$closeOnEsc,\n    _props$useInert = props.useInert,\n    useInert = _props$useInert === void 0 ? true : _props$useInert,\n    onOverlayClickProp = props.onOverlayClick,\n    onEsc = props.onEsc;\n  var dialogRef = useRef(null);\n  var overlayRef = useRef(null);\n  var _useIds = useIds(id, \"chakra-modal\", \"chakra-modal--header\", \"chakra-modal--body\"),\n    _useIds2 = _slicedToArray(_useIds, 3),\n    dialogId = _useIds2[0],\n    headerId = _useIds2[1],\n    bodyId = _useIds2[2];\n  useAriaHidden(dialogRef, isOpen && useInert);\n  var index = useModalManager(dialogRef, isOpen);\n  var mouseDownTarget = useRef(null);\n  var onMouseDown = useCallback(function (event) {\n    mouseDownTarget.current = event.target;\n  }, []);\n  var onKeyDown = useCallback(function (event) {\n    if (event.key === \"Escape\") {\n      event.stopPropagation();\n      if (closeOnEsc) {\n        onClose == null ? void 0 : onClose();\n      }\n      onEsc == null ? void 0 : onEsc();\n    }\n  }, [closeOnEsc, onClose, onEsc]);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    headerMounted = _useState2[0],\n    setHeaderMounted = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    bodyMounted = _useState4[0],\n    setBodyMounted = _useState4[1];\n  var getDialogProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({\n      role: \"dialog\"\n    }, props2), {}, {\n      ref: mergeRefs(ref, dialogRef),\n      id: dialogId,\n      tabIndex: -1,\n      \"aria-modal\": true,\n      \"aria-labelledby\": headerMounted ? headerId : void 0,\n      \"aria-describedby\": bodyMounted ? bodyId : void 0,\n      onClick: callAllHandlers(props2.onClick, function (event) {\n        return event.stopPropagation();\n      })\n    });\n  }, [bodyId, bodyMounted, dialogId, headerId, headerMounted]);\n  var onOverlayClick = useCallback(function (event) {\n    event.stopPropagation();\n    if (mouseDownTarget.current !== event.target) return;\n    if (!modalManager.isTopModal(dialogRef.current)) return;\n    if (closeOnOverlayClick) {\n      onClose == null ? void 0 : onClose();\n    }\n    onOverlayClickProp == null ? void 0 : onOverlayClickProp();\n  }, [onClose, closeOnOverlayClick, onOverlayClickProp]);\n  var getDialogContainerProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      ref: mergeRefs(ref, overlayRef),\n      onClick: callAllHandlers(props2.onClick, onOverlayClick),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onMouseDown: callAllHandlers(props2.onMouseDown, onMouseDown)\n    });\n  }, [onKeyDown, onMouseDown, onOverlayClick]);\n  return {\n    isOpen: isOpen,\n    onClose: onClose,\n    headerId: headerId,\n    bodyId: bodyId,\n    setBodyMounted: setBodyMounted,\n    setHeaderMounted: setHeaderMounted,\n    dialogRef: dialogRef,\n    overlayRef: overlayRef,\n    getDialogProps: getDialogProps,\n    getDialogContainerProps: getDialogContainerProps,\n    index: index\n  };\n}\nfunction useAriaHidden(ref, shouldHide) {\n  var currentElement = ref.current;\n  useEffect(function () {\n    if (!ref.current || !shouldHide) return void 0;\n    return hideOthers(ref.current);\n  }, [shouldHide, ref, currentElement]);\n}\nfunction useIds(idProp) {\n  for (var _len = arguments.length, prefixes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    prefixes[_key - 1] = arguments[_key];\n  }\n  var reactId = useId();\n  var id = idProp || reactId;\n  return useMemo(function () {\n    return prefixes.map(function (prefix) {\n      return \"\".concat(prefix, \"-\").concat(id);\n    });\n  }, [id, prefixes]);\n}\nexport { useModal, useAriaHidden };","map":{"version":3,"mappings":"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","names":["callAllHandlers","mergeRefs","hideOthers","useCallback","useEffect","useId","useMemo","useRef","useState","useModal","props","isOpen","onClose","id","_props$closeOnOverlay","closeOnOverlayClick","_props$closeOnEsc","closeOnEsc","_props$useInert","useInert","onOverlayClickProp","onOverlayClick","onEsc","dialogRef","overlayRef","useIds","_useIds2","dialogId","headerId","bodyId","useAriaHidden","index","useModalManager","mouseDownTarget","onMouseDown","event","current","target","onKeyDown","key","stopPropagation","_useState2","headerMounted","setHeaderMounted","_useState4","bodyMounted","setBodyMounted","getDialogProps","ref","role","tabIndex","onClick","modalManager","isTopModal","getDialogContainerProps","shouldHide","currentElement","idProp","prefixes","reactId","map","prefix"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\modal\\src\\use-modal.ts"],"sourcesContent":["import { callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { hideOthers } from \"aria-hidden\"\n\nimport { useCallback, useEffect, useId, useMemo, useRef, useState } from \"react\"\nimport { modalManager, useModalManager } from \"./modal-manager\"\n\nexport interface UseModalProps {\n  /**\n   * If `true`, the modal will be open.\n   */\n  isOpen: boolean\n  /**\n   * The `id` of the modal\n   */\n  id?: string\n  /**\n   * Callback invoked to close the modal.\n   */\n  onClose(): void\n  /**\n   * If `true`, the modal will close when the overlay is clicked\n   * @default true\n   */\n  closeOnOverlayClick?: boolean\n  /**\n   * If `true`, the modal will close when the `Esc` key is pressed\n   * @default true\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the overlay is clicked.\n   */\n  onOverlayClick?(): void\n  /**\n   * Callback fired when the escape key is pressed and focus is within modal\n   */\n  onEsc?(): void\n  /**\n   * A11y: If `true`, the siblings of the `modal` will have `aria-hidden`\n   * set to `true` so that screen readers can only see the `modal`.\n   *\n   * This is commonly known as making the other elements **inert**\n   *\n   * @default true\n   */\n  useInert?: boolean\n}\n\n/**\n * Modal hook that manages all the logic for the modal dialog widget\n * and returns prop getters, state and actions.\n *\n * @param props\n */\nexport function useModal(props: UseModalProps) {\n  const {\n    isOpen,\n    onClose,\n    id,\n    closeOnOverlayClick = true,\n    closeOnEsc = true,\n    useInert = true,\n    onOverlayClick: onOverlayClickProp,\n    onEsc,\n  } = props\n\n  const dialogRef = useRef<HTMLElement>(null)\n  const overlayRef = useRef<HTMLElement>(null)\n\n  const [dialogId, headerId, bodyId] = useIds(\n    id,\n    `chakra-modal`,\n    `chakra-modal--header`,\n    `chakra-modal--body`,\n  )\n\n  /**\n   * Hook used to polyfill `aria-modal` for older browsers.\n   * It uses `aria-hidden` to all other nodes.\n   *\n   * @see https://developer.paciellogroup.com/blog/2018/06/the-current-state-of-modal-dialog-accessibility/\n   */\n  useAriaHidden(dialogRef, isOpen && useInert)\n  /**\n   * Hook used to manage multiple or nested modals\n   */\n  const index = useModalManager(dialogRef, isOpen)\n\n  const mouseDownTarget = useRef<EventTarget | null>(null)\n\n  const onMouseDown = useCallback((event: React.MouseEvent) => {\n    mouseDownTarget.current = event.target\n  }, [])\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        event.stopPropagation()\n\n        if (closeOnEsc) {\n          onClose?.()\n        }\n\n        onEsc?.()\n      }\n    },\n    [closeOnEsc, onClose, onEsc],\n  )\n\n  const [headerMounted, setHeaderMounted] = useState(false)\n  const [bodyMounted, setBodyMounted] = useState(false)\n\n  const getDialogProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      role: \"dialog\",\n      ...props,\n      ref: mergeRefs(ref, dialogRef),\n      id: dialogId,\n      tabIndex: -1,\n      \"aria-modal\": true,\n      \"aria-labelledby\": headerMounted ? headerId : undefined,\n      \"aria-describedby\": bodyMounted ? bodyId : undefined,\n      onClick: callAllHandlers(props.onClick, (event: React.MouseEvent) =>\n        event.stopPropagation(),\n      ),\n    }),\n    [bodyId, bodyMounted, dialogId, headerId, headerMounted],\n  )\n\n  const onOverlayClick = useCallback(\n    (event: React.MouseEvent) => {\n      event.stopPropagation()\n      /**\n       * Make sure the event starts and ends on the same DOM element.\n       *\n       * This is used to prevent the modal from closing when you\n       * start dragging from the content, and release drag outside the content.\n       *\n       * We prevent this because it is technically not a considered \"click outside\"\n       */\n      if (mouseDownTarget.current !== event.target) return\n\n      /**\n       * When you click on the overlay, we want to remove only the topmost modal\n       */\n      if (!modalManager.isTopModal(dialogRef.current)) return\n\n      if (closeOnOverlayClick) {\n        onClose?.()\n      }\n\n      onOverlayClickProp?.()\n    },\n    [onClose, closeOnOverlayClick, onOverlayClickProp],\n  )\n\n  const getDialogContainerProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(ref, overlayRef),\n      onClick: callAllHandlers(props.onClick, onOverlayClick),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n    }),\n    [onKeyDown, onMouseDown, onOverlayClick],\n  )\n\n  return {\n    isOpen,\n    onClose,\n    headerId,\n    bodyId,\n    setBodyMounted,\n    setHeaderMounted,\n    dialogRef,\n    overlayRef,\n    getDialogProps,\n    getDialogContainerProps,\n    index,\n  }\n}\n\nexport type UseModalReturn = ReturnType<typeof useModal>\n\n/**\n * Modal hook to polyfill `aria-modal`.\n *\n * It applies `aria-hidden` to elements behind the modal\n * to indicate that they're `inert`.\n *\n * @param ref React ref of the node\n * @param shouldHide whether `aria-hidden` should be applied\n */\nexport function useAriaHidden(\n  ref: React.RefObject<HTMLElement>,\n  shouldHide: boolean,\n) {\n  // save current ref in a local var to trigger the effect on identity change\n  const currentElement = ref.current\n\n  useEffect(() => {\n    // keep using `ref.current` inside the effect\n    // it may have changed during render and the execution of the effect\n    if (!ref.current || !shouldHide) return undefined\n\n    return hideOthers(ref.current)\n  }, [shouldHide, ref, currentElement])\n}\n\nfunction useIds(idProp?: string, ...prefixes: string[]) {\n  const reactId = useId()\n  const id = idProp || reactId\n  return useMemo(() => {\n    return prefixes.map((prefix) => `${prefix}-${id}`)\n  }, [id, prefixes])\n}\n"]},"metadata":{},"sourceType":"module"}