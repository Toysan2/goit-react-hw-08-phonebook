{"ast":null,"code":"'use client';\n\n// src/use-tooltip.ts\nimport _defineProperty from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"openDelay\", \"closeDelay\", \"closeOnClick\", \"closeOnMouseDown\", \"closeOnScroll\", \"closeOnPointerDown\", \"closeOnEsc\", \"onOpen\", \"onClose\", \"placement\", \"id\", \"isOpen\", \"defaultIsOpen\", \"arrowSize\", \"arrowShadowColor\", \"arrowPadding\", \"modifiers\", \"isDisabled\", \"gutter\", \"offset\", \"direction\"];\nimport { getScrollParent } from \"@chakra-ui/dom-utils\";\nimport { popperCSSVars, usePopper } from \"@chakra-ui/popper\";\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\";\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { useCallback, useEffect, useId, useRef } from \"react\";\nvar getDoc = function getDoc(ref) {\n  var _a;\n  return ((_a = ref.current) == null ? void 0 : _a.ownerDocument) || document;\n};\nvar getWin = function getWin(ref) {\n  var _a, _b;\n  return ((_b = (_a = ref.current) == null ? void 0 : _a.ownerDocument) == null ? void 0 : _b.defaultView) || window;\n};\nfunction useTooltip() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _props$openDelay = props.openDelay,\n    openDelay = _props$openDelay === void 0 ? 0 : _props$openDelay,\n    _props$closeDelay = props.closeDelay,\n    closeDelay = _props$closeDelay === void 0 ? 0 : _props$closeDelay,\n    _props$closeOnClick = props.closeOnClick,\n    closeOnClick = _props$closeOnClick === void 0 ? true : _props$closeOnClick,\n    closeOnMouseDown = props.closeOnMouseDown,\n    closeOnScroll = props.closeOnScroll,\n    _props$closeOnPointer = props.closeOnPointerDown,\n    closeOnPointerDown = _props$closeOnPointer === void 0 ? closeOnMouseDown : _props$closeOnPointer,\n    _props$closeOnEsc = props.closeOnEsc,\n    closeOnEsc = _props$closeOnEsc === void 0 ? true : _props$closeOnEsc,\n    onOpenProp = props.onOpen,\n    onCloseProp = props.onClose,\n    placement = props.placement,\n    id = props.id,\n    isOpenProp = props.isOpen,\n    defaultIsOpen = props.defaultIsOpen,\n    _props$arrowSize = props.arrowSize,\n    arrowSize = _props$arrowSize === void 0 ? 10 : _props$arrowSize,\n    arrowShadowColor = props.arrowShadowColor,\n    arrowPadding = props.arrowPadding,\n    modifiers = props.modifiers,\n    isDisabled = props.isDisabled,\n    gutter = props.gutter,\n    offset = props.offset,\n    direction = props.direction,\n    htmlProps = _objectWithoutProperties(props, _excluded);\n  var _useDisclosure = useDisclosure({\n      isOpen: isOpenProp,\n      defaultIsOpen: defaultIsOpen,\n      onOpen: onOpenProp,\n      onClose: onCloseProp\n    }),\n    isOpen = _useDisclosure.isOpen,\n    onOpen = _useDisclosure.onOpen,\n    onClose = _useDisclosure.onClose;\n  var _usePopper = usePopper({\n      enabled: isOpen,\n      placement: placement,\n      arrowPadding: arrowPadding,\n      modifiers: modifiers,\n      gutter: gutter,\n      offset: offset,\n      direction: direction\n    }),\n    referenceRef = _usePopper.referenceRef,\n    getPopperProps = _usePopper.getPopperProps,\n    getArrowInnerProps = _usePopper.getArrowInnerProps,\n    getArrowProps = _usePopper.getArrowProps;\n  var uuid = useId();\n  var uid = id != null ? id : uuid;\n  var tooltipId = \"tooltip-\".concat(uid);\n  var ref = useRef(null);\n  var enterTimeout = useRef();\n  var clearEnterTimeout = useCallback(function () {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current);\n      enterTimeout.current = void 0;\n    }\n  }, []);\n  var exitTimeout = useRef();\n  var clearExitTimeout = useCallback(function () {\n    if (exitTimeout.current) {\n      clearTimeout(exitTimeout.current);\n      exitTimeout.current = void 0;\n    }\n  }, []);\n  var closeNow = useCallback(function () {\n    clearExitTimeout();\n    onClose();\n  }, [onClose, clearExitTimeout]);\n  var dispatchCloseEvent = useCloseEvent(ref, closeNow);\n  var openWithDelay = useCallback(function () {\n    if (!isDisabled && !enterTimeout.current) {\n      if (isOpen) dispatchCloseEvent();\n      var win = getWin(ref);\n      enterTimeout.current = win.setTimeout(onOpen, openDelay);\n    }\n  }, [dispatchCloseEvent, isDisabled, isOpen, onOpen, openDelay]);\n  var closeWithDelay = useCallback(function () {\n    clearEnterTimeout();\n    var win = getWin(ref);\n    exitTimeout.current = win.setTimeout(closeNow, closeDelay);\n  }, [closeDelay, closeNow, clearEnterTimeout]);\n  var onClick = useCallback(function () {\n    if (isOpen && closeOnClick) {\n      closeWithDelay();\n    }\n  }, [closeOnClick, closeWithDelay, isOpen]);\n  var onPointerDown = useCallback(function () {\n    if (isOpen && closeOnPointerDown) {\n      closeWithDelay();\n    }\n  }, [closeOnPointerDown, closeWithDelay, isOpen]);\n  var onKeyDown = useCallback(function (event) {\n    if (isOpen && event.key === \"Escape\") {\n      closeWithDelay();\n    }\n  }, [isOpen, closeWithDelay]);\n  useEventListener(function () {\n    return getDoc(ref);\n  }, \"keydown\", closeOnEsc ? onKeyDown : void 0);\n  useEventListener(function () {\n    if (!closeOnScroll) return null;\n    var node = ref.current;\n    if (!node) return null;\n    var scrollParent = getScrollParent(node);\n    return scrollParent.localName === \"body\" ? getWin(ref) : scrollParent;\n  }, \"scroll\", function () {\n    if (isOpen && closeOnScroll) {\n      closeNow();\n    }\n  }, {\n    passive: true,\n    capture: true\n  });\n  useEffect(function () {\n    if (!isDisabled) return;\n    clearEnterTimeout();\n    if (isOpen) onClose();\n  }, [isDisabled, isOpen, onClose, clearEnterTimeout]);\n  useEffect(function () {\n    return function () {\n      clearEnterTimeout();\n      clearExitTimeout();\n    };\n  }, [clearEnterTimeout, clearExitTimeout]);\n  useEventListener(function () {\n    return ref.current;\n  }, \"pointerleave\", closeWithDelay);\n  var getTriggerProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var triggerProps = _objectSpread(_objectSpread({}, props2), {}, {\n      ref: mergeRefs(ref, _ref, referenceRef),\n      onPointerEnter: callAllHandlers(props2.onPointerEnter, function (e) {\n        if (e.pointerType === \"touch\") return;\n        openWithDelay();\n      }),\n      onClick: callAllHandlers(props2.onClick, onClick),\n      onPointerDown: callAllHandlers(props2.onPointerDown, onPointerDown),\n      onFocus: callAllHandlers(props2.onFocus, openWithDelay),\n      onBlur: callAllHandlers(props2.onBlur, closeWithDelay),\n      \"aria-describedby\": isOpen ? tooltipId : void 0\n    });\n    return triggerProps;\n  }, [openWithDelay, closeWithDelay, onPointerDown, isOpen, tooltipId, onClick, referenceRef]);\n  var getTooltipPositionerProps = useCallback(function () {\n    var _objectSpread2;\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return getPopperProps(_objectSpread(_objectSpread({}, props2), {}, {\n      style: _objectSpread(_objectSpread({}, props2.style), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, popperCSSVars.arrowSize.var, arrowSize ? \"\".concat(arrowSize, \"px\") : void 0), _defineProperty(_objectSpread2, popperCSSVars.arrowShadowColor.var, arrowShadowColor), _objectSpread2))\n    }), forwardedRef);\n  }, [getPopperProps, arrowSize, arrowShadowColor]);\n  var getTooltipProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var styles = _objectSpread(_objectSpread({}, props2.style), {}, {\n      position: \"relative\",\n      transformOrigin: popperCSSVars.transformOrigin.varRef\n    });\n    return _objectSpread(_objectSpread(_objectSpread({\n      ref: ref2\n    }, htmlProps), props2), {}, {\n      id: tooltipId,\n      role: \"tooltip\",\n      style: styles\n    });\n  }, [htmlProps, tooltipId]);\n  return {\n    isOpen: isOpen,\n    show: openWithDelay,\n    hide: closeWithDelay,\n    getTriggerProps: getTriggerProps,\n    getTooltipProps: getTooltipProps,\n    getTooltipPositionerProps: getTooltipPositionerProps,\n    getArrowProps: getArrowProps,\n    getArrowInnerProps: getArrowInnerProps\n  };\n}\nvar closeEventName = \"chakra-ui:close-tooltip\";\nfunction useCloseEvent(ref, close) {\n  useEffect(function () {\n    var doc = getDoc(ref);\n    doc.addEventListener(closeEventName, close);\n    return function () {\n      return doc.removeEventListener(closeEventName, close);\n    };\n  }, [close, ref]);\n  return function () {\n    var doc = getDoc(ref);\n    var win = getWin(ref);\n    doc.dispatchEvent(new win.CustomEvent(closeEventName));\n  };\n}\nexport { useTooltip };","map":{"version":3,"mappings":"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","names":["getScrollParent","popperCSSVars","usePopper","useDisclosure","useEventListener","mergeRefs","callAllHandlers","useCallback","useEffect","useId","useRef","getDoc","ref","current","ownerDocument","document","getWin","defaultView","window","useTooltip","props","openDelay","_props$closeDelay","closeDelay","_props$closeOnClick","closeOnClick","closeOnMouseDown","closeOnScroll","_props$closeOnPointer","closeOnPointerDown","_props$closeOnEsc","closeOnEsc","onOpenProp","onOpen","onCloseProp","onClose","placement","id","isOpenProp","isOpen","defaultIsOpen","_props$arrowSize","arrowSize","arrowShadowColor","arrowPadding","modifiers","isDisabled","gutter","offset","direction","htmlProps","enabled","referenceRef","getPopperProps","getArrowInnerProps","getArrowProps","uuid","uid","tooltipId","enterTimeout","clearEnterTimeout","clearTimeout","exitTimeout","clearExitTimeout","closeNow","dispatchCloseEvent","useCloseEvent","openWithDelay","win","setTimeout","closeWithDelay","onClick","onPointerDown","onKeyDown","event","key","node","scrollParent","localName","passive","capture","getTriggerProps","_ref","triggerProps","onPointerEnter","e","pointerType","onFocus","onBlur","getTooltipPositionerProps","forwardedRef","style","var","getTooltipProps","styles","position","transformOrigin","varRef","role","show","hide","closeEventName","close","doc","addEventListener","removeEventListener","dispatchEvent","CustomEvent"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\tooltip\\src\\use-tooltip.ts"],"sourcesContent":["import { getScrollParent } from \"@chakra-ui/dom-utils\"\nimport { popperCSSVars, usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\"\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport React, {\n  useCallback,\n  useEffect,\n  useId,\n  useRef,\n  type RefObject,\n} from \"react\"\n\nexport interface UseTooltipProps\n  extends Pick<\n    UsePopperProps,\n    | \"modifiers\"\n    | \"gutter\"\n    | \"offset\"\n    | \"arrowPadding\"\n    | \"direction\"\n    | \"placement\"\n  > {\n  /**\n   * Delay (in ms) before showing the tooltip\n   * @default 0ms\n   */\n  openDelay?: number\n  /**\n   * Delay (in ms) before hiding the tooltip\n   * @default 0ms\n   */\n  closeDelay?: number\n  /**\n   * If `true`, the tooltip will hide on click\n   * @default true\n   */\n  closeOnClick?: boolean\n  /**\n   * If `true`, the tooltip will hide while the mouse is down\n   * @deprecated - use `closeOnPointerDown` instead\n   */\n  closeOnMouseDown?: boolean\n  /**\n   * If `true`, the tooltip will hide while the pointer is down\n   * @default true\n   */\n  closeOnPointerDown?: boolean\n  /**\n   * If `true`, the tooltip will hide on pressing Esc key\n   * @default true\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback to run when the tooltip shows\n   */\n  onOpen?(): void\n  /**\n   * Callback to run when the tooltip hides\n   */\n  onClose?(): void\n  /**\n   * Custom `id` to use in place of `uuid`\n   */\n  id?: string\n  /**\n   * If `true`, the tooltip will be shown (in controlled mode)\n   * @default false\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the tooltip will be initially shown\n   * @default false\n   */\n  defaultIsOpen?: boolean\n  /**\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * @default false\n   */\n  closeOnScroll?: boolean\n  /**\n   * @default 10\n   */\n  arrowSize?: number\n  arrowShadowColor?: string\n}\n\nconst getDoc = (ref: React.RefObject<Element | null>) =>\n  ref.current?.ownerDocument || document\n\nconst getWin = (ref: React.RefObject<Element | null>) =>\n  ref.current?.ownerDocument?.defaultView || window\n\nexport function useTooltip(props: UseTooltipProps = {}) {\n  const {\n    openDelay = 0,\n    closeDelay = 0,\n    closeOnClick = true,\n    closeOnMouseDown,\n    closeOnScroll,\n    closeOnPointerDown = closeOnMouseDown,\n    closeOnEsc = true,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n    placement,\n    id,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    arrowSize = 10,\n    arrowShadowColor,\n    arrowPadding,\n    modifiers,\n    isDisabled,\n    gutter,\n    offset,\n    direction,\n    ...htmlProps\n  } = props\n\n  const { isOpen, onOpen, onClose } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n  })\n\n  const { referenceRef, getPopperProps, getArrowInnerProps, getArrowProps } =\n    usePopper({\n      enabled: isOpen,\n      placement,\n      arrowPadding,\n      modifiers,\n      gutter,\n      offset,\n      direction,\n    })\n\n  const uuid = useId()\n  const uid = id ?? uuid\n  const tooltipId = `tooltip-${uid}`\n\n  const ref = useRef<HTMLElement>(null)\n\n  const enterTimeout = useRef<number>()\n  const clearEnterTimeout = useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current)\n      enterTimeout.current = undefined\n    }\n  }, [])\n\n  const exitTimeout = useRef<number>()\n  const clearExitTimeout = useCallback(() => {\n    if (exitTimeout.current) {\n      clearTimeout(exitTimeout.current)\n      exitTimeout.current = undefined\n    }\n  }, [])\n\n  const closeNow = useCallback(() => {\n    clearExitTimeout()\n    onClose()\n  }, [onClose, clearExitTimeout])\n\n  const dispatchCloseEvent = useCloseEvent(ref, closeNow)\n\n  const openWithDelay = useCallback(() => {\n    if (!isDisabled && !enterTimeout.current) {\n      if (isOpen) dispatchCloseEvent()\n      const win = getWin(ref)\n      enterTimeout.current = win.setTimeout(onOpen, openDelay)\n    }\n  }, [dispatchCloseEvent, isDisabled, isOpen, onOpen, openDelay])\n\n  const closeWithDelay = useCallback(() => {\n    clearEnterTimeout()\n    const win = getWin(ref)\n    exitTimeout.current = win.setTimeout(closeNow, closeDelay)\n  }, [closeDelay, closeNow, clearEnterTimeout])\n\n  const onClick = useCallback(() => {\n    if (isOpen && closeOnClick) {\n      closeWithDelay()\n    }\n  }, [closeOnClick, closeWithDelay, isOpen])\n\n  const onPointerDown = useCallback(() => {\n    if (isOpen && closeOnPointerDown) {\n      closeWithDelay()\n    }\n  }, [closeOnPointerDown, closeWithDelay, isOpen])\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (isOpen && event.key === \"Escape\") {\n        closeWithDelay()\n      }\n    },\n    [isOpen, closeWithDelay],\n  )\n\n  useEventListener(\n    () => getDoc(ref),\n    \"keydown\",\n    closeOnEsc ? onKeyDown : undefined,\n  )\n\n  useEventListener(\n    () => {\n      if (!closeOnScroll) return null\n      const node = ref.current\n      if (!node) return null\n      const scrollParent = getScrollParent(node)\n      return scrollParent.localName === \"body\" ? getWin(ref) : scrollParent\n    },\n    \"scroll\",\n    () => {\n      if (isOpen && closeOnScroll) {\n        closeNow()\n      }\n    },\n    { passive: true, capture: true },\n  )\n\n  useEffect(() => {\n    if (!isDisabled) return\n    clearEnterTimeout()\n    if (isOpen) onClose()\n  }, [isDisabled, isOpen, onClose, clearEnterTimeout])\n\n  useEffect(() => {\n    return () => {\n      clearEnterTimeout()\n      clearExitTimeout()\n    }\n  }, [clearEnterTimeout, clearExitTimeout])\n\n  /**\n   * This allows for catching pointerleave events when the tooltip\n   * trigger is disabled. There's currently a known issue in\n   * React regarding the onPointerLeave polyfill.\n   * @see https://github.com/facebook/react/issues/11972\n   */\n  useEventListener(() => ref.current, \"pointerleave\", closeWithDelay)\n\n  const getTriggerProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const triggerProps = {\n        ...props,\n        ref: mergeRefs(ref, _ref, referenceRef),\n        onPointerEnter: callAllHandlers(props.onPointerEnter, (e) => {\n          if (e.pointerType === \"touch\") return\n          openWithDelay()\n        }),\n        onClick: callAllHandlers(props.onClick, onClick),\n        onPointerDown: callAllHandlers(props.onPointerDown, onPointerDown),\n        onFocus: callAllHandlers(props.onFocus, openWithDelay),\n        onBlur: callAllHandlers(props.onBlur, closeWithDelay),\n        \"aria-describedby\": isOpen ? tooltipId : undefined,\n      }\n\n      return triggerProps\n    },\n    [\n      openWithDelay,\n      closeWithDelay,\n      onPointerDown,\n      isOpen,\n      tooltipId,\n      onClick,\n      referenceRef,\n    ],\n  )\n\n  const getTooltipPositionerProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) =>\n      getPopperProps(\n        {\n          ...props,\n          style: {\n            ...props.style,\n            [popperCSSVars.arrowSize.var]: arrowSize\n              ? `${arrowSize}px`\n              : undefined,\n            [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n          },\n        },\n        forwardedRef,\n      ),\n    [getPopperProps, arrowSize, arrowShadowColor],\n  )\n\n  const getTooltipProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const styles: React.CSSProperties = {\n        ...props.style,\n        position: \"relative\",\n        transformOrigin: popperCSSVars.transformOrigin.varRef,\n      }\n\n      return {\n        ref,\n        ...htmlProps,\n        ...props,\n        id: tooltipId,\n        role: \"tooltip\",\n        style: styles,\n      }\n    },\n    [htmlProps, tooltipId],\n  )\n\n  return {\n    isOpen,\n    show: openWithDelay,\n    hide: closeWithDelay,\n    getTriggerProps,\n    getTooltipProps,\n    getTooltipPositionerProps,\n    getArrowProps,\n    getArrowInnerProps,\n  }\n}\n\nexport type UseTooltipReturn = ReturnType<typeof useTooltip>\n\nconst closeEventName = \"chakra-ui:close-tooltip\"\n\nfunction useCloseEvent(ref: RefObject<Element>, close: () => void) {\n  useEffect(() => {\n    const doc = getDoc(ref)\n    doc.addEventListener(closeEventName, close)\n    return () => doc.removeEventListener(closeEventName, close)\n  }, [close, ref])\n\n  return () => {\n    const doc = getDoc(ref)\n    const win = getWin(ref)\n    doc.dispatchEvent(new win.CustomEvent(closeEventName))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}