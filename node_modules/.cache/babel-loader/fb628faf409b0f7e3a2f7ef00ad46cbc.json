{"ast":null,"code":"'use client';\n\n// src/wrap.tsx\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"spacing\", \"spacingX\", \"spacingY\", \"children\", \"justify\", \"direction\", \"align\", \"className\", \"shouldWrapChildren\"],\n  _excluded2 = [\"className\"];\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { Children, useMemo } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Wrap = forwardRef(function Wrap2(props, ref) {\n  var _props$spacing = props.spacing,\n    spacing = _props$spacing === void 0 ? \"0.5rem\" : _props$spacing,\n    spacingX = props.spacingX,\n    spacingY = props.spacingY,\n    children = props.children,\n    justify = props.justify,\n    direction = props.direction,\n    align = props.align,\n    className = props.className,\n    shouldWrapChildren = props.shouldWrapChildren,\n    rest = _objectWithoutProperties(props, _excluded);\n  var _children = useMemo(function () {\n    return shouldWrapChildren ? Children.map(children, function (child, index) {\n      return /* @__PURE__ */jsx(WrapItem, {\n        children: child\n      }, index);\n    }) : children;\n  }, [children, shouldWrapChildren]);\n  return /* @__PURE__ */jsx(chakra.div, _objectSpread(_objectSpread({\n    ref: ref,\n    className: cx(\"chakra-wrap\", className)\n  }, rest), {}, {\n    children: /* @__PURE__ */jsx(chakra.ul, {\n      className: \"chakra-wrap__list\",\n      __css: {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: justify,\n        alignItems: align,\n        flexDirection: direction,\n        listStyleType: \"none\",\n        gap: spacing,\n        columnGap: spacingX,\n        rowGap: spacingY,\n        padding: \"0\"\n      },\n      children: _children\n    })\n  }));\n});\nWrap.displayName = \"Wrap\";\nvar WrapItem = forwardRef(function WrapItem2(props, ref) {\n  var className = props.className,\n    rest = _objectWithoutProperties(props, _excluded2);\n  return /* @__PURE__ */jsx(chakra.li, _objectSpread({\n    ref: ref,\n    __css: {\n      display: \"flex\",\n      alignItems: \"flex-start\"\n    },\n    className: cx(\"chakra-wrap__listitem\", className)\n  }, rest));\n});\nWrapItem.displayName = \"WrapItem\";\nexport { Wrap, WrapItem };","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,UAAU;AACnB,SACEC,QACAC,kBAGK;AACP,SAASC,UAAUC,eAAe;AAoEtB;AAlBL,IAAMC,OAAOH,WAA6B,SAASG,MAAKC,OAAOC,KAAK;EACzE,qBAWID,MAVFE;IAAAA,sCAAU;IACVC,WASEH,MATFG;IACAC,WAQEJ,MARFI;IACAC,WAOEL,MAPFK;IACAC,UAMEN,MANFM;IACAC,YAKEP,MALFO;IACAC,QAIER,MAJFQ;IACAC,YAGET,MAHFS;IACAC,qBAEEV,MAFFU;IACGC,gCACDX;EAEJ,IAAMY,YAAYd,QAChB;IAAA,OACEY,qBACIb,SAASgB,IAAIR,UAAU,UAACS,OAAOC;MAAA,OAC7B,mBAACC;QAAsBX;MAAA,GAARU,KAAc,CAC9B;IAAA,KACDV;EAAA,GACN,CAACA,UAAUK,kBAAkB,CAC/B;EAEA,OACE,mBAACf,OAAOsB;IAAIhB;IAAUQ,WAAWf,GAAG,eAAee,SAAS;EAAA,GAAOE;IACjEN,6BAACV,OAAOuB,IAAP;MACCT,WAAU;MACVU,OAAO;QACLC,SAAS;QACTC,UAAU;QACVC,gBAAgBhB;QAChBiB,YAAYf;QACZgB,eAAejB;QACfkB,eAAe;QACfC,KAAKxB;QACLyB,WAAWxB;QACXyB,QAAQxB;QACRyB,SAAS;MACX;MAECxB;IAAA,CACH;EAAA,EACF;AAEJ,CAAC;AAEDN,KAAK+B,cAAc;AAIZ,IAAMd,WAAWpB,WAAgC,SAASoB,UAC/DhB,OACAC,KACA;EACA,IAAQQ,YAAuBT,MAAvBS;IAAcE,gCAASX;EAC/B,OACE,mBAACL,OAAOoC;IACN9B;IACAkB,OAAO;MAAEC,SAAS;MAAQG,YAAY;IAAa;IACnDd,WAAWf,GAAG,yBAAyBe,SAAS;EAAA,GAC5CE,KACN;AAEJ,CAAC;AAEDK,SAASc,cAAc","names":["cx","chakra","forwardRef","Children","useMemo","Wrap","props","ref","spacing","spacingX","spacingY","children","justify","direction","align","className","shouldWrapChildren","rest","_children","map","child","index","WrapItem","div","ul","__css","display","flexWrap","justifyContent","alignItems","flexDirection","listStyleType","gap","columnGap","rowGap","padding","displayName","li"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\layout\\src\\wrap.tsx"],"sourcesContent":["import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { Children, useMemo } from \"react\"\n\nexport interface WrapProps extends HTMLChakraProps<\"div\"> {\n  /**\n   * The space between each child (even if it wraps)\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The horizontal space between the each child (even if it wraps). Defaults to `spacing` if not defined.\n   * @type SystemProps[\"margin\"]\n   */\n  spacingX?: SystemProps[\"margin\"]\n  /**\n   * The vertical space between the each child (even if it wraps). Defaults to `spacing` if not defined.\n   * @type SystemProps[\"margin\"]\n   */\n  spacingY?: SystemProps[\"margin\"]\n  /**\n   * The `justify-content` value (for cross-axis alignment)\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * The `align-items` value (for main axis alignment)\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The `flex-direction` value\n   * @type SystemProps[\"flexDirection\"]\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * If `true`, the children will be wrapped in a `WrapItem`\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n}\n\n/**\n * Layout component used to stack elements that differ in length\n * and are liable to wrap.\n *\n * Common use cases:\n * - Buttons that appear together at the end of forms\n * - Lists of tags and chips\n *\n * @see Docs https://chakra-ui.com/wrap\n */\nexport const Wrap = forwardRef<WrapProps, \"div\">(function Wrap(props, ref) {\n  const {\n    spacing = \"0.5rem\",\n    spacingX,\n    spacingY,\n    children,\n    justify,\n    direction,\n    align,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const _children = useMemo(\n    () =>\n      shouldWrapChildren\n        ? Children.map(children, (child, index) => (\n            <WrapItem key={index}>{child}</WrapItem>\n          ))\n        : children,\n    [children, shouldWrapChildren],\n  )\n\n  return (\n    <chakra.div ref={ref} className={cx(\"chakra-wrap\", className)} {...rest}>\n      <chakra.ul\n        className=\"chakra-wrap__list\"\n        __css={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: justify,\n          alignItems: align,\n          flexDirection: direction,\n          listStyleType: \"none\",\n          gap: spacing,\n          columnGap: spacingX,\n          rowGap: spacingY,\n          padding: \"0\",\n        }}\n      >\n        {_children}\n      </chakra.ul>\n    </chakra.div>\n  )\n})\n\nWrap.displayName = \"Wrap\"\n\nexport interface WrapItemProps extends HTMLChakraProps<\"li\"> {}\n\nexport const WrapItem = forwardRef<WrapItemProps, \"li\">(function WrapItem(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  return (\n    <chakra.li\n      ref={ref}\n      __css={{ display: \"flex\", alignItems: \"flex-start\" }}\n      className={cx(\"chakra-wrap__listitem\", className)}\n      {...rest}\n    />\n  )\n})\n\nWrapItem.displayName = \"WrapItem\"\n"]},"metadata":{},"sourceType":"module"}