{"ast":null,"code":"'use client';\n\n// src/use-boolean.ts\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useMemo, useState } from \"react\";\nfunction useBoolean() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var _useState = useState(initialState),\n    _useState2 = _slicedToArray(_useState, 2),\n    value = _useState2[0],\n    setValue = _useState2[1];\n  var callbacks = useMemo(function () {\n    return {\n      on: function on() {\n        return setValue(true);\n      },\n      off: function off() {\n        return setValue(false);\n      },\n      toggle: function toggle() {\n        return setValue(function (prev) {\n          return !prev;\n        });\n      }\n    };\n  }, []);\n  return [value, callbacks];\n}\nexport { useBoolean };","map":{"version":3,"mappings":";;;;AAAA,SAASA,SAASC,gBAAgB;AAW3B,SAASC,aAA+C;EAAA,IAApCC,mFAA6B;EACtD,gBAA0BF,SAASE,YAAY;IAAAC;IAAxCC;IAAOC,QAAQ;EACtB,IAAMC,YAAYP,QAChB;IAAA,OAAO;MACLQ,IAAI;QAAA,OAAMF,SAAS,IAAI;MAAA;MACvBG,KAAK;QAAA,OAAMH,SAAS,KAAK;MAAA;MACzBI,QAAQ;QAAA,OAAMJ,SAAS,UAACK;UAAA,OAAS,CAACA,IAAI;QAAA;MAAA;IACxC;EAAA,GACA,EACF;EACA,OAAO,CAACN,OAAOE,SAAS;AAC1B","names":["useMemo","useState","useBoolean","initialState","_useState2","value","setValue","callbacks","on","off","toggle","prev"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\hooks\\src\\use-boolean.ts"],"sourcesContent":["import { useMemo, useState } from \"react\"\n\ntype InitialState = boolean | (() => boolean)\n\n/**\n * React hook to manage boolean (on - off) states\n *\n * @param initialState the initial boolean state value\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-boolean\n */\nexport function useBoolean(initialState: InitialState = false) {\n  const [value, setValue] = useState(initialState)\n  const callbacks = useMemo(\n    () => ({\n      on: () => setValue(true),\n      off: () => setValue(false),\n      toggle: () => setValue((prev) => !prev),\n    }),\n    [],\n  )\n  return [value, callbacks] as const\n}\n"]},"metadata":{},"sourceType":"module"}