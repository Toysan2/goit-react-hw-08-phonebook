{"ast":null,"code":"'use client';\n\nimport _objectWithoutProperties from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"spacing\", \"className\", \"children\", \"iconColor\", \"iconSize\", \"icon\", \"isChecked\", \"isDisabled\", \"onChange\", \"inputProps\"];\nimport { useInitialAnimationState } from \"./chunk-2TOCDA5N.mjs\";\nimport { useCheckboxGroupContext } from \"./chunk-LYGBQ47X.mjs\";\nimport { CheckboxIcon } from \"./chunk-ULEC7HZU.mjs\";\nimport { useCheckbox } from \"./chunk-7D6N5TE5.mjs\";\n\n// src/checkbox.tsx\nimport { callAll, cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef, keyframes, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cloneElement, useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar controlStyles = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  verticalAlign: \"top\",\n  userSelect: \"none\",\n  flexShrink: 0\n};\nvar rootStyles = {\n  cursor: \"pointer\",\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  verticalAlign: \"top\",\n  position: \"relative\"\n};\nvar checkAnim = keyframes({\n  from: {\n    opacity: 0,\n    strokeDashoffset: 16,\n    transform: \"scale(0.95)\"\n  },\n  to: {\n    opacity: 1,\n    strokeDashoffset: 0,\n    transform: \"scale(1)\"\n  }\n});\nvar indeterminateOpacityAnim = keyframes({\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n});\nvar indeterminateScaleAnim = keyframes({\n  from: {\n    transform: \"scaleX(0.65)\"\n  },\n  to: {\n    transform: \"scaleX(1)\"\n  }\n});\nvar Checkbox = forwardRef(function Checkbox2(props, ref) {\n  var group = useCheckboxGroupContext();\n  var mergedProps = _objectSpread(_objectSpread({}, group), props);\n  var styles = useMultiStyleConfig(\"Checkbox\", mergedProps);\n  var ownProps = omitThemingProps(props);\n  var _ownProps$spacing = ownProps.spacing,\n    spacing = _ownProps$spacing === void 0 ? \"0.5rem\" : _ownProps$spacing,\n    className = ownProps.className,\n    children = ownProps.children,\n    iconColor = ownProps.iconColor,\n    iconSize = ownProps.iconSize,\n    _ownProps$icon = ownProps.icon,\n    icon = _ownProps$icon === void 0 ? /* @__PURE__ */jsx(CheckboxIcon, {}) : _ownProps$icon,\n    isCheckedProp = ownProps.isChecked,\n    _ownProps$isDisabled = ownProps.isDisabled,\n    isDisabled = _ownProps$isDisabled === void 0 ? group == null ? void 0 : group.isDisabled : _ownProps$isDisabled,\n    onChangeProp = ownProps.onChange,\n    inputProps = ownProps.inputProps,\n    rest = _objectWithoutProperties(ownProps, _excluded);\n  var isChecked = isCheckedProp;\n  if ((group == null ? void 0 : group.value) && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value);\n  }\n  var onChange = onChangeProp;\n  if ((group == null ? void 0 : group.onChange) && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp);\n  }\n  var _useCheckbox = useCheckbox(_objectSpread(_objectSpread({}, rest), {}, {\n      isDisabled: isDisabled,\n      isChecked: isChecked,\n      onChange: onChange\n    })),\n    state = _useCheckbox.state,\n    getInputProps = _useCheckbox.getInputProps,\n    getCheckboxProps = _useCheckbox.getCheckboxProps,\n    getLabelProps = _useCheckbox.getLabelProps,\n    getRootProps = _useCheckbox.getRootProps;\n  var shouldAnimate = useInitialAnimationState(state.isChecked);\n  var iconStyles = useMemo(function () {\n    return _objectSpread({\n      animation: !shouldAnimate ? void 0 : state.isIndeterminate ? \"\".concat(indeterminateOpacityAnim, \" 20ms linear, \").concat(indeterminateScaleAnim, \" 200ms linear\") : \"\".concat(checkAnim, \" 200ms linear\"),\n      fontSize: iconSize,\n      color: iconColor\n    }, styles.icon);\n  }, [iconColor, iconSize, shouldAnimate, state.isIndeterminate, styles.icon]);\n  var clonedIcon = cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked\n  });\n  return /* @__PURE__ */jsxs(chakra.label, _objectSpread(_objectSpread({\n    __css: _objectSpread(_objectSpread({}, rootStyles), styles.container),\n    className: cx(\"chakra-checkbox\", className)\n  }, getRootProps()), {}, {\n    children: [/* @__PURE__ */jsx(\"input\", _objectSpread({\n      className: \"chakra-checkbox__input\"\n    }, getInputProps(inputProps, ref))), /* @__PURE__ */jsx(chakra.span, _objectSpread(_objectSpread({\n      __css: _objectSpread(_objectSpread({}, controlStyles), styles.control),\n      className: \"chakra-checkbox__control\"\n    }, getCheckboxProps()), {}, {\n      children: clonedIcon\n    })), children && /* @__PURE__ */jsx(chakra.span, _objectSpread(_objectSpread({\n      className: \"chakra-checkbox__label\"\n    }, getLabelProps()), {}, {\n      __css: _objectSpread({\n        marginStart: spacing\n      }, styles.label),\n      children: children\n    }))]\n  }));\n});\nCheckbox.displayName = \"Checkbox\";\nexport { Checkbox };","map":{"version":3,"mappings":"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","names":["callAll","cx","chakra","forwardRef","keyframes","omitThemingProps","useMultiStyleConfig","cloneElement","useMemo","jsxs","controlStyles","display","alignItems","justifyContent","verticalAlign","userSelect","flexShrink","rootStyles","cursor","position","checkAnim","from","opacity","strokeDashoffset","transform","to","indeterminateOpacityAnim","indeterminateScaleAnim","Checkbox","props","ref","group","useCheckboxGroupContext","mergedProps","styles","ownProps","spacing","className","children","iconColor","iconSize","_ownProps$icon","icon","CheckboxIcon","isCheckedProp","isChecked","_ownProps$isDisabled","isDisabled","onChangeProp","onChange","inputProps","rest","value","includes","useCheckbox","state","getInputProps","getCheckboxProps","getLabelProps","getRootProps","shouldAnimate","useInitialAnimationState","iconStyles","animation","isIndeterminate","fontSize","color","clonedIcon","__css","label","container","span","control","marginStart","displayName"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\checkbox\\src\\checkbox.tsx"],"sourcesContent":["import { callAll, cx } from \"@chakra-ui/shared-utils\"\nimport {\n  HTMLChakraProps,\n  PropsOf,\n  SystemStyleObject,\n  ThemingProps,\n  chakra,\n  forwardRef,\n  keyframes,\n  omitThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cloneElement, useMemo } from \"react\"\nimport { useCheckboxGroupContext } from \"./checkbox-context\"\nimport { CheckboxIcon } from \"./checkbox-icon\"\nimport { CheckboxOptions, UseCheckboxProps } from \"./checkbox-types\"\nimport { useCheckbox } from \"./use-checkbox\"\nimport { useInitialAnimationState } from \"./use-initial-animation-state\"\n\nconst controlStyles: SystemStyleObject = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  verticalAlign: \"top\",\n  userSelect: \"none\",\n  flexShrink: 0,\n}\n\nconst rootStyles: SystemStyleObject = {\n  cursor: \"pointer\",\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  verticalAlign: \"top\",\n  position: \"relative\",\n}\n\nconst checkAnim = keyframes({\n  from: {\n    opacity: 0,\n    strokeDashoffset: 16,\n    transform: \"scale(0.95)\",\n  },\n  to: {\n    opacity: 1,\n    strokeDashoffset: 0,\n    transform: \"scale(1)\",\n  },\n})\n\nconst indeterminateOpacityAnim = keyframes({\n  from: {\n    opacity: 0,\n  },\n  to: {\n    opacity: 1,\n  },\n})\nconst indeterminateScaleAnim = keyframes({\n  from: {\n    transform: \"scaleX(0.65)\",\n  },\n  to: {\n    transform: \"scaleX(1)\",\n  },\n})\n\ntype CheckboxControlProps = Omit<HTMLChakraProps<\"div\">, keyof UseCheckboxProps>\n\ntype BaseInputProps = Pick<\n  PropsOf<\"input\">,\n  \"onBlur\" | \"checked\" | \"defaultChecked\"\n>\n\nexport interface CheckboxProps\n  extends CheckboxControlProps,\n    BaseInputProps,\n    ThemingProps<\"Checkbox\">,\n    UseCheckboxProps,\n    CheckboxOptions {}\n\n/**\n * Checkbox\n *\n * React component used in forms when a user needs to select\n * multiple values from several options.\n *\n * @see Docs https://chakra-ui.com/checkbox\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/\n */\nexport const Checkbox = forwardRef<CheckboxProps, \"input\">(function Checkbox(\n  props,\n  ref,\n) {\n  const group = useCheckboxGroupContext()\n\n  const mergedProps = { ...group, ...props } as CheckboxProps\n  const styles = useMultiStyleConfig(\"Checkbox\", mergedProps)\n\n  const ownProps = omitThemingProps(props)\n\n  const {\n    spacing = \"0.5rem\",\n    className,\n    children,\n    iconColor,\n    iconSize,\n    icon = <CheckboxIcon />,\n    isChecked: isCheckedProp,\n    isDisabled = group?.isDisabled,\n    onChange: onChangeProp,\n    inputProps,\n    ...rest\n  } = ownProps\n\n  let isChecked = isCheckedProp\n  if (group?.value && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value)\n  }\n\n  let onChange = onChangeProp\n  if (group?.onChange && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp)\n  }\n\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    getRootProps,\n  } = useCheckbox({\n    ...rest,\n    isDisabled,\n    isChecked,\n    onChange,\n  })\n\n  const shouldAnimate = useInitialAnimationState(state.isChecked)\n\n  const iconStyles: SystemStyleObject = useMemo(\n    () => ({\n      animation: !shouldAnimate\n        ? undefined\n        : state.isIndeterminate\n        ? `${indeterminateOpacityAnim} 20ms linear, ${indeterminateScaleAnim} 200ms linear`\n        : `${checkAnim} 200ms linear`,\n      fontSize: iconSize,\n      color: iconColor,\n      ...styles.icon,\n    }),\n    [iconColor, iconSize, shouldAnimate, state.isIndeterminate, styles.icon],\n  )\n\n  const clonedIcon = cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked,\n  })\n\n  return (\n    <chakra.label\n      __css={{ ...rootStyles, ...styles.container }}\n      className={cx(\"chakra-checkbox\", className)}\n      {...getRootProps()}\n    >\n      <input\n        className=\"chakra-checkbox__input\"\n        {...getInputProps(inputProps, ref)}\n      />\n      <chakra.span\n        __css={{ ...controlStyles, ...styles.control }}\n        className=\"chakra-checkbox__control\"\n        {...getCheckboxProps()}\n      >\n        {clonedIcon}\n      </chakra.span>\n      {children && (\n        <chakra.span\n          className=\"chakra-checkbox__label\"\n          {...getLabelProps()}\n          __css={{\n            marginStart: spacing,\n            ...styles.label,\n          }}\n        >\n          {children}\n        </chakra.span>\n      )}\n    </chakra.label>\n  )\n})\n\nCheckbox.displayName = \"Checkbox\"\n"]},"metadata":{},"sourceType":"module"}