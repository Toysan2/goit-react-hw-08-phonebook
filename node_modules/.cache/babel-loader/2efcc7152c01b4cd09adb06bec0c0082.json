{"ast":null,"code":"'use client';\n\nimport { ToastProvider } from \"./chunk-3Y4YXCR2.mjs\";\nimport { createToastFn } from \"./chunk-HYCJNCPE.mjs\";\n\n// src/create-standalone-toast.tsx\nimport { ColorModeContext, ThemeProvider } from \"@chakra-ui/system\";\nimport { theme as defaultTheme } from \"@chakra-ui/theme\";\nimport { jsx } from \"react/jsx-runtime\";\nvar defaults = {\n  duration: 5e3,\n  variant: \"solid\"\n};\nvar defaultStandaloneParam = {\n  theme: defaultTheme,\n  colorMode: \"light\",\n  toggleColorMode: function toggleColorMode() {},\n  setColorMode: function setColorMode() {},\n  defaultOptions: defaults,\n  forced: false\n};\nfunction createStandaloneToast() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultStandaloneParam,\n    _ref$theme = _ref.theme,\n    theme = _ref$theme === void 0 ? defaultStandaloneParam.theme : _ref$theme,\n    _ref$colorMode = _ref.colorMode,\n    colorMode = _ref$colorMode === void 0 ? defaultStandaloneParam.colorMode : _ref$colorMode,\n    _ref$toggleColorMode = _ref.toggleColorMode,\n    toggleColorMode = _ref$toggleColorMode === void 0 ? defaultStandaloneParam.toggleColorMode : _ref$toggleColorMode,\n    _ref$setColorMode = _ref.setColorMode,\n    setColorMode = _ref$setColorMode === void 0 ? defaultStandaloneParam.setColorMode : _ref$setColorMode,\n    _ref$defaultOptions = _ref.defaultOptions,\n    defaultOptions = _ref$defaultOptions === void 0 ? defaultStandaloneParam.defaultOptions : _ref$defaultOptions,\n    motionVariants = _ref.motionVariants,\n    toastSpacing = _ref.toastSpacing,\n    component = _ref.component,\n    forced = _ref.forced;\n  var colorModeContextValue = {\n    colorMode: colorMode,\n    setColorMode: setColorMode,\n    toggleColorMode: toggleColorMode,\n    forced: forced\n  };\n  var ToastContainer = function ToastContainer() {\n    return /* @__PURE__ */jsx(ThemeProvider, {\n      theme: theme,\n      children: /* @__PURE__ */jsx(ColorModeContext.Provider, {\n        value: colorModeContextValue,\n        children: /* @__PURE__ */jsx(ToastProvider, {\n          defaultOptions: defaultOptions,\n          motionVariants: motionVariants,\n          toastSpacing: toastSpacing,\n          component: component\n        })\n      })\n    });\n  };\n  return {\n    ToastContainer: ToastContainer,\n    toast: createToastFn(theme.direction, defaultOptions)\n  };\n}\nexport { defaultStandaloneParam, createStandaloneToast };","map":{"version":3,"mappings":";;;;;;AAAA,SAEEA,kBACAC,qBAEK;AACP,SAASC,SAASC,oBAAoB;AAyD9B;AApDR,IAAMC,WAA4B;EAChCC,UAAU;EACVC,SAAS;AACX;AAWO,IAAMC,yBAC4D;EACvEL,OAAOC;EACPK,WAAW;EACXC,iBAAiB,2BAAM,CAAC;EACxBC,cAAc,wBAAM,CAAC;EACrBC,gBAAgBP;EAChBQ,QAAQ;AACV;AAUO,SAASC,wBAUqE;EAAA,+EAArDN;IAAAO,kBAT9BZ;IAAAA,gCAAQK,uBAAuBL;IAAAa,sBAC/BP;IAAAA,wCAAYD,uBAAuBC;IAAAQ,4BACnCP;IAAAA,oDAAkBF,uBAAuBE;IAAAQ,yBACzCP;IAAAA,8CAAeH,uBAAuBG;IAAAQ,2BACtCP;IAAAA,kDAAiBJ,uBAAuBI;IACxCQ;IACAC;IACAC;IACAT;EAEA,IAAMU,wBAAwB;IAC5Bd;IACAE;IACAD;IACAG;EACF;EACA,IAAMW,iBAAiB,SAAjBA;IAAA,OACJ,mBAACtB;MAAcC;MACbsB,6BAACxB,iBAAiByB,UAAjB;QAA0BC,OAAOJ;QAChCE,6BAACG;UACChB;UACAQ;UACAC;UACAC;QAAA,CACF;MAAA,CACF;IAAA,CACF;EAAA;EAGF,OAAO;IACLE;IACAK,OAAOC,cAAc3B,MAAM4B,WAAWnB,cAAc;EACtD;AACF","names":["ColorModeContext","ThemeProvider","theme","defaultTheme","defaults","duration","variant","defaultStandaloneParam","colorMode","toggleColorMode","setColorMode","defaultOptions","forced","createStandaloneToast","_ref$theme","_ref$colorMode","_ref$toggleColorMode","_ref$setColorMode","_ref$defaultOptions","motionVariants","toastSpacing","component","colorModeContextValue","ToastContainer","children","Provider","value","ToastProvider","toast","createToastFn","direction"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\toast\\src\\create-standalone-toast.tsx"],"sourcesContent":["import {\n  ColorMode,\n  ColorModeContext,\n  ThemeProvider,\n  useChakra,\n} from \"@chakra-ui/system\"\nimport { theme as defaultTheme } from \"@chakra-ui/theme\"\nimport { ToastProvider, ToastProviderProps } from \"./toast.provider\"\nimport { UseToastOptions } from \"./use-toast\"\nimport { createToastFn, CreateToastFnReturn } from \"./toast\"\n\nconst defaults: UseToastOptions = {\n  duration: 5000,\n  variant: \"solid\",\n}\n\nexport interface CreateStandAloneToastParam\n  extends Partial<\n      ReturnType<typeof useChakra> & {\n        setColorMode: (value: ColorMode) => void\n        defaultOptions: UseToastOptions\n      }\n    >,\n    Omit<ToastProviderProps, \"children\"> {}\n\nexport const defaultStandaloneParam: CreateStandAloneToastParam &\n  Required<Omit<CreateStandAloneToastParam, keyof ToastProviderProps>> = {\n  theme: defaultTheme,\n  colorMode: \"light\",\n  toggleColorMode: () => {},\n  setColorMode: () => {},\n  defaultOptions: defaults,\n  forced: false,\n}\n\nexport type CreateStandaloneToastReturn = {\n  ToastContainer: () => JSX.Element\n  toast: CreateToastFnReturn\n}\n\n/**\n * Create a toast\n */\nexport function createStandaloneToast({\n  theme = defaultStandaloneParam.theme,\n  colorMode = defaultStandaloneParam.colorMode,\n  toggleColorMode = defaultStandaloneParam.toggleColorMode,\n  setColorMode = defaultStandaloneParam.setColorMode,\n  defaultOptions = defaultStandaloneParam.defaultOptions,\n  motionVariants,\n  toastSpacing,\n  component,\n  forced,\n}: CreateStandAloneToastParam = defaultStandaloneParam): CreateStandaloneToastReturn {\n  const colorModeContextValue = {\n    colorMode,\n    setColorMode,\n    toggleColorMode,\n    forced,\n  }\n  const ToastContainer = () => (\n    <ThemeProvider theme={theme}>\n      <ColorModeContext.Provider value={colorModeContextValue}>\n        <ToastProvider\n          defaultOptions={defaultOptions}\n          motionVariants={motionVariants}\n          toastSpacing={toastSpacing}\n          component={component}\n        />\n      </ColorModeContext.Provider>\n    </ThemeProvider>\n  )\n\n  return {\n    ToastContainer,\n    toast: createToastFn(theme.direction, defaultOptions),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}