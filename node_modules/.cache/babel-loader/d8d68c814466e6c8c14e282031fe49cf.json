{"ast":null,"code":"'use client';\n\n// src/env.tsx\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { createContext, useContext, useMemo, useReducer, useRef } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar EnvironmentContext = createContext({\n  getDocument: function getDocument() {\n    return document;\n  },\n  getWindow: function getWindow() {\n    return window;\n  }\n});\nEnvironmentContext.displayName = \"EnvironmentContext\";\nfunction useEnvironment() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    defer = _ref.defer;\n  var _useReducer = useReducer(function (c) {\n      return c + 1;\n    }, 0),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    forceUpdate = _useReducer2[1];\n  useSafeLayoutEffect(function () {\n    if (!defer) return;\n    forceUpdate();\n  }, [defer]);\n  return useContext(EnvironmentContext);\n}\nfunction EnvironmentProvider(props) {\n  var children = props.children,\n    environmentProp = props.environment,\n    disabled = props.disabled;\n  var ref = useRef(null);\n  var context = useMemo(function () {\n    if (environmentProp) return environmentProp;\n    return {\n      getDocument: function getDocument() {\n        var _a, _b;\n        return (_b = (_a = ref.current) == null ? void 0 : _a.ownerDocument) != null ? _b : document;\n      },\n      getWindow: function getWindow() {\n        var _a, _b;\n        return (_b = (_a = ref.current) == null ? void 0 : _a.ownerDocument.defaultView) != null ? _b : window;\n      }\n    };\n  }, [environmentProp]);\n  var showSpan = !disabled || !environmentProp;\n  return /* @__PURE__ */jsxs(EnvironmentContext.Provider, {\n    value: context,\n    children: [children, showSpan && /* @__PURE__ */jsx(\"span\", {\n      id: \"__chakra_env\",\n      hidden: true,\n      ref: ref\n    })]\n  });\n}\nEnvironmentProvider.displayName = \"EnvironmentProvider\";\nexport { useEnvironment, EnvironmentProvider };","map":{"version":3,"mappings":";;;;AAAA,SAASA,2BAA2B;AACpC,SAASC,eAAeC,YAAYC,SAASC,YAAYC,cAAc;AAkDnE,SAEeC,KAFfC;AA3CJ,IAAMC,qBAAqBP,cAA2B;EACpDQ,oCAAc;IACZ,OAAOC;EACT;EACAC,gCAAY;IACV,OAAOC;EACT;AACF,CAAC;AAEDJ,mBAAmBK,cAAc;AAE1B,SAASC,iBAAoD;EAAA,+EAAJ,CAAC;IAAhCC;EAC/B,kBAAwBX,WAAW,UAACY;MAAA,OAAMA,IAAI;IAAA,GAAG,CAAC;IAAAC;IAAzCC,WAAW;EAEpBlB,oBAAoB,YAAM;IACxB,IAAI,CAACe,OAAO;IACZG,YAAY;EACd,GAAG,CAACH,KAAK,CAAC;EAEV,OAAOb,WAAWM,kBAAkB;AACtC;AAQO,SAASW,oBAAoBC,OAAiC;EACnE,IAAQC,WAAqDD,MAArDC;IAAuBC,kBAA8BF,MAA3CG;IAA8BC,WAAaJ,MAAbI;EAChD,IAAMC,MAAMpB,OAAwB,IAAI;EAExC,IAAMqB,UAAUvB,QAAqB,YAAM;IACzC,IAAImB,iBAAiB,OAAOA;IAC5B,OAAO;MACLb,aAAa,uBAAG;QA3CtB;QA2CyB,uBAAIkB,YAAJ,mBAAaC,kBAAb,YAA8BlB;MAAA;MACjDC,WAAW,qBAAG;QA5CpB;QA4CuB,uBAAIgB,YAAJ,mBAAaC,cAAcC,gBAA3B,YAA0CjB;MAAA;IAC7D;EACF,GAAG,CAACU,eAAe,CAAC;EAEpB,IAAMQ,WAAW,CAACN,YAAY,CAACF;EAE/B,OACE,oBAACd,mBAAmBuB,UAAnB;IAA4BC,OAAON;IACjCL,qBACAS,YAAY,mBAAC;MAAKG,IAAG;MAAeC,QAAM;MAACT;IAAA,CAAU;EAAA,CACxD;AAEJ;AAEAN,oBAAoBN,cAAc","names":["useSafeLayoutEffect","createContext","useContext","useMemo","useReducer","useRef","jsx","jsxs","EnvironmentContext","getDocument","document","getWindow","window","displayName","useEnvironment","defer","c","_useReducer2","forceUpdate","EnvironmentProvider","props","children","environmentProp","environment","disabled","ref","context","current","ownerDocument","defaultView","showSpan","Provider","value","id","hidden"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\react-env\\src\\env.tsx"],"sourcesContent":["import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { createContext, useContext, useMemo, useReducer, useRef } from \"react\"\n\ninterface Environment {\n  getWindow: () => Window\n  getDocument: () => Document\n}\n\nconst EnvironmentContext = createContext<Environment>({\n  getDocument() {\n    return document\n  },\n  getWindow() {\n    return window\n  },\n})\n\nEnvironmentContext.displayName = \"EnvironmentContext\"\n\nexport function useEnvironment({ defer }: { defer?: boolean } = {}) {\n  const [, forceUpdate] = useReducer((c) => c + 1, 0)\n\n  useSafeLayoutEffect(() => {\n    if (!defer) return\n    forceUpdate()\n  }, [defer])\n\n  return useContext(EnvironmentContext)\n}\n\nexport interface EnvironmentProviderProps {\n  children: React.ReactNode\n  disabled?: boolean\n  environment?: Environment\n}\n\nexport function EnvironmentProvider(props: EnvironmentProviderProps) {\n  const { children, environment: environmentProp, disabled } = props\n  const ref = useRef<HTMLSpanElement>(null)\n\n  const context = useMemo<Environment>(() => {\n    if (environmentProp) return environmentProp\n    return {\n      getDocument: () => ref.current?.ownerDocument ?? document,\n      getWindow: () => ref.current?.ownerDocument.defaultView ?? window,\n    }\n  }, [environmentProp])\n\n  const showSpan = !disabled || !environmentProp\n\n  return (\n    <EnvironmentContext.Provider value={context}>\n      {children}\n      {showSpan && <span id=\"__chakra_env\" hidden ref={ref} />}\n    </EnvironmentContext.Provider>\n  )\n}\n\nEnvironmentProvider.displayName = \"EnvironmentProvider\"\n"]},"metadata":{},"sourceType":"module"}