{"ast":null,"code":"'use client';\n\n// src/use-steps.ts\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useState } from \"react\";\nfunction useSteps() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _props$index = props.index,\n    index = _props$index === void 0 ? 0 : _props$index,\n    count = props.count;\n  var _useState = useState(index),\n    _useState2 = _slicedToArray(_useState, 2),\n    activeStep = _useState2[0],\n    setActiveStep = _useState2[1];\n  var maxStep = typeof count === \"number\" ? count - 1 : 0;\n  var activeStepPercent = activeStep / maxStep;\n  return {\n    activeStep: activeStep,\n    setActiveStep: setActiveStep,\n    activeStepPercent: activeStepPercent,\n    isActiveStep: function isActiveStep(step) {\n      return step === activeStep;\n    },\n    isCompleteStep: function isCompleteStep(step) {\n      return step < activeStep;\n    },\n    isIncompleteStep: function isIncompleteStep(step) {\n      return step > activeStep;\n    },\n    getStatus: function getStatus(step) {\n      if (step < activeStep) return \"complete\";\n      if (step > activeStep) return \"incomplete\";\n      return \"active\";\n    },\n    goToNext: function goToNext() {\n      setActiveStep(function (step) {\n        return typeof count === \"number\" ? Math.min(count, step + 1) : step + 1;\n      });\n    },\n    goToPrevious: function goToPrevious() {\n      setActiveStep(function (step) {\n        return Math.max(0, step - 1);\n      });\n    }\n  };\n}\nexport { useSteps };","map":{"version":3,"mappings":";;;;AAAA,SAASA,gBAAgB;AASlB,SAASC,WAAoC;EAAA,IAA3BC,4EAAuB,CAAC;EAC/C,mBAA6BA,MAArBC;IAAAA,kCAAQ;IAAGC,QAAUF,MAAVE;EAEnB,gBAAoCJ,SAASG,KAAK;IAAAE;IAA3CC;IAAYC,aAAa;EAEhC,IAAMC,UAAU,OAAOJ,UAAU,WAAWA,QAAQ,IAAI;EACxD,IAAMK,oBAAoBH,aAAaE;EAEvC,OAAO;IACLF;IACAC;IACAE;IACAC,oCAAaC,MAAc;MACzB,OAAOA,SAASL;IAClB;IACAM,wCAAeD,MAAc;MAC3B,OAAOA,OAAOL;IAChB;IACAO,4CAAiBF,MAAc;MAC7B,OAAOA,OAAOL;IAChB;IACAQ,8BAAUH,MAA0B;MAClC,IAAIA,OAAOL,YAAY,OAAO;MAC9B,IAAIK,OAAOL,YAAY,OAAO;MAC9B,OAAO;IACT;IACAS,8BAAW;MACTR,cAAc,UAACI,MAAS;QACtB,OAAO,OAAOP,UAAU,WAAWY,KAAKC,IAAIb,OAAOO,OAAO,CAAC,IAAIA,OAAO;MACxE,CAAC;IACH;IACAO,sCAAe;MACbX,cAAc,UAACI;QAAA,OAASK,KAAKG,IAAI,GAAGR,OAAO,CAAC,CAAC;MAAA;IAC/C;EACF;AACF","names":["useState","useSteps","props","index","count","_useState2","activeStep","setActiveStep","maxStep","activeStepPercent","isActiveStep","step","isCompleteStep","isIncompleteStep","getStatus","goToNext","Math","min","goToPrevious","max"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\stepper\\src\\use-steps.ts"],"sourcesContent":["import { useState } from \"react\"\n\nexport type UseStepsProps = {\n  index?: number\n  count?: number\n}\n\nexport type StepStatus = \"complete\" | \"active\" | \"incomplete\"\n\nexport function useSteps(props: UseStepsProps = {}) {\n  const { index = 0, count } = props\n\n  const [activeStep, setActiveStep] = useState(index)\n\n  const maxStep = typeof count === \"number\" ? count - 1 : 0\n  const activeStepPercent = activeStep / maxStep\n\n  return {\n    activeStep,\n    setActiveStep,\n    activeStepPercent,\n    isActiveStep(step: number) {\n      return step === activeStep\n    },\n    isCompleteStep(step: number) {\n      return step < activeStep\n    },\n    isIncompleteStep(step: number) {\n      return step > activeStep\n    },\n    getStatus(step: number): StepStatus {\n      if (step < activeStep) return \"complete\"\n      if (step > activeStep) return \"incomplete\"\n      return \"active\"\n    },\n    goToNext() {\n      setActiveStep((step) => {\n        return typeof count === \"number\" ? Math.min(count, step + 1) : step + 1\n      })\n    },\n    goToPrevious() {\n      setActiveStep((step) => Math.max(0, step - 1))\n    },\n  }\n}\n\nexport type UseStepsReturn = ReturnType<typeof useSteps>\n"]},"metadata":{},"sourceType":"module"}