{"ast":null,"code":"const API_BASE_URL = 'https://connections-api.herokuapp.com';\nconst myAPI = {\n  // User Registration\n  register: async userData => {\n    const response = await fetch(`${API_BASE_URL}/users/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    return await response.json();\n  },\n  // User Login\n  login: async credentials => {\n    const response = await fetch(`${API_BASE_URL}/users/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    return await response.json();\n  },\n  // Fetch Contacts\n  fetchContacts: async token => {\n    const response = await fetch(`${API_BASE_URL}/contacts`, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return await response.json();\n  },\n  // Add Contact\n  addContact: async (contactData, token) => {\n    const response = await fetch(`${API_BASE_URL}/contacts`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(contactData)\n    });\n    return await response.json();\n  },\n  // Delete Contact\n  deleteContact: async (contactId, token) => {\n    await fetch(`${API_BASE_URL}/contacts/${contactId}`, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  },\n  // Logout\n  logout: async token => {\n    await fetch(`${API_BASE_URL}/users/logout`, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    // You can handle the response or error as needed\n  }\n};\n\nexport default myAPI;","map":{"version":3,"names":["API_BASE_URL","myAPI","register","userData","response","fetch","method","headers","body","JSON","stringify","json","login","credentials","fetchContacts","token","Authorization","addContact","contactData","deleteContact","contactId","logout"],"sources":["E:/GoIT/Zad dom/goit-react-hw-08-phonebook/src/components/myAPI/myAPI.jsx"],"sourcesContent":["const API_BASE_URL = 'https://connections-api.herokuapp.com';\r\n\r\nconst myAPI = {\r\n  // User Registration\r\n  register: async userData => {\r\n    const response = await fetch(`${API_BASE_URL}/users/signup`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(userData),\r\n    });\r\n    return await response.json();\r\n  },\r\n\r\n  // User Login\r\n  login: async credentials => {\r\n    const response = await fetch(`${API_BASE_URL}/users/login`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(credentials),\r\n    });\r\n    return await response.json();\r\n  },\r\n\r\n  // Fetch Contacts\r\n  fetchContacts: async token => {\r\n    const response = await fetch(`${API_BASE_URL}/contacts`, {\r\n      method: 'GET',\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n    return await response.json();\r\n  },\r\n\r\n  // Add Contact\r\n  addContact: async (contactData, token) => {\r\n    const response = await fetch(`${API_BASE_URL}/contacts`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(contactData),\r\n    });\r\n    return await response.json();\r\n  },\r\n\r\n  // Delete Contact\r\n  deleteContact: async (contactId, token) => {\r\n    await fetch(`${API_BASE_URL}/contacts/${contactId}`, {\r\n      method: 'DELETE',\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n  },\r\n\r\n  // Logout\r\n  logout: async token => {\r\n    await fetch(`${API_BASE_URL}/users/logout`, {\r\n      method: 'POST',\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    // You can handle the response or error as needed\r\n  },\r\n};\r\n\r\nexport default myAPI;\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,uCAAuC;AAE5D,MAAMC,KAAK,GAAG;EACZ;EACAC,QAAQ,EAAE,MAAMC,QAAQ,IAAI;IAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEL,YAAa,eAAc,EAAE;MAC3DM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ;IAC/B,CAAC,CAAC;IACF,OAAO,MAAMC,QAAQ,CAACO,IAAI,CAAC,CAAC;EAC9B,CAAC;EAED;EACAC,KAAK,EAAE,MAAMC,WAAW,IAAI;IAC1B,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEL,YAAa,cAAa,EAAE;MAC1DM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACG,WAAW;IAClC,CAAC,CAAC;IACF,OAAO,MAAMT,QAAQ,CAACO,IAAI,CAAC,CAAC;EAC9B,CAAC;EAED;EACAG,aAAa,EAAE,MAAMC,KAAK,IAAI;IAC5B,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEL,YAAa,WAAU,EAAE;MACvDM,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QAAES,aAAa,EAAG,UAASD,KAAM;MAAE;IAC9C,CAAC,CAAC;IACF,OAAO,MAAMX,QAAQ,CAACO,IAAI,CAAC,CAAC;EAC9B,CAAC;EAED;EACAM,UAAU,EAAE,MAAAA,CAAOC,WAAW,EAAEH,KAAK,KAAK;IACxC,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEL,YAAa,WAAU,EAAE;MACvDM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCS,aAAa,EAAG,UAASD,KAAM;MACjC,CAAC;MACDP,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACQ,WAAW;IAClC,CAAC,CAAC;IACF,OAAO,MAAMd,QAAQ,CAACO,IAAI,CAAC,CAAC;EAC9B,CAAC;EAED;EACAQ,aAAa,EAAE,MAAAA,CAAOC,SAAS,EAAEL,KAAK,KAAK;IACzC,MAAMV,KAAK,CAAE,GAAEL,YAAa,aAAYoB,SAAU,EAAC,EAAE;MACnDd,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;QAAES,aAAa,EAAG,UAASD,KAAM;MAAE;IAC9C,CAAC,CAAC;EACJ,CAAC;EAED;EACAM,MAAM,EAAE,MAAMN,KAAK,IAAI;IACrB,MAAMV,KAAK,CAAE,GAAEL,YAAa,eAAc,EAAE;MAC1CM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACPS,aAAa,EAAG,UAASD,KAAM;MACjC;IACF,CAAC,CAAC;IACF;EACF;AACF,CAAC;;AAED,eAAed,KAAK"},"metadata":{},"sourceType":"module"}