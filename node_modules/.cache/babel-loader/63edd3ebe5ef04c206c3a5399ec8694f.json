{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"E:/GoIT/Zad dom/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useId } from \"./chunk-6B2YUEGK.mjs\";\nimport { useControllableProp } from \"./chunk-7JSBRQFI.mjs\";\nimport { useCallbackRef } from \"./chunk-KA2477BY.mjs\";\n\n// src/use-disclosure.ts\nimport { callAllHandlers } from \"@chakra-ui/utils\";\nimport { useCallback, useState } from \"react\";\nfunction useDisclosure() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var onCloseProp = props.onClose,\n    onOpenProp = props.onOpen,\n    isOpenProp = props.isOpen,\n    idProp = props.id;\n  var onOpenPropCallbackRef = useCallbackRef(onOpenProp);\n  var onClosePropCallbackRef = useCallbackRef(onCloseProp);\n  var _useState = useState(props.defaultIsOpen || false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isOpenState = _useState2[0],\n    setIsOpen = _useState2[1];\n  var _useControllableProp = useControllableProp(isOpenProp, isOpenState),\n    _useControllableProp2 = _slicedToArray(_useControllableProp, 2),\n    isControlled = _useControllableProp2[0],\n    isOpen = _useControllableProp2[1];\n  var id = useId(idProp, \"disclosure\");\n  var onClose = useCallback(function () {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n    onClosePropCallbackRef == null ? void 0 : onClosePropCallbackRef();\n  }, [isControlled, onClosePropCallbackRef]);\n  var onOpen = useCallback(function () {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n    onOpenPropCallbackRef == null ? void 0 : onOpenPropCallbackRef();\n  }, [isControlled, onOpenPropCallbackRef]);\n  var onToggle = useCallback(function () {\n    var action = isOpen ? onClose : onOpen;\n    action();\n  }, [isOpen, onOpen, onClose]);\n  return {\n    isOpen: !!isOpen,\n    onOpen: onOpen,\n    onClose: onClose,\n    onToggle: onToggle,\n    isControlled: isControlled,\n    getButtonProps: function getButtonProps() {\n      var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _objectSpread(_objectSpread({}, props2), {}, {\n        \"aria-expanded\": isOpen,\n        \"aria-controls\": id,\n        onClick: callAllHandlers(props2.onClick, onToggle)\n      });\n    },\n    getDisclosureProps: function getDisclosureProps() {\n      var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _objectSpread(_objectSpread({}, props2), {}, {\n        hidden: !isOpen,\n        id: id\n      });\n    }\n  };\n}\nexport { useDisclosure };","map":{"version":3,"mappings":";;;;;;;;;AAAA,SAASA,uBAAuB;AAIhC,SAASC,aAAaC,gBAAgB;AAU/B,SAASC,gBAA8C;EAAA,IAAhCC,4EAA4B,CAAC;EACzD,IACWC,cAIPD,MAJFE;IACQC,aAGNH,MAHFI;IACQC,aAENL,MAFFM;IACIC,SACFP,MADFQ;EAGF,IAAMC,wBAAwBC,eAAeP,UAAU;EACvD,IAAMQ,yBAAyBD,eAAeT,WAAW;EACzD,gBAAiCH,SAASE,MAAMY,iBAAiB,KAAK;IAAAC;IAA/DC;IAAaC,SAAS;EAC7B,2BAA+BC,oBAAoBX,YAAYS,WAAW;IAAAG;IAAnEC;IAAcZ,MAAM;EAE3B,IAAME,KAAKW,MAAMZ,QAAQ,YAAY;EAErC,IAAML,UAAUL,YAAY,YAAM;IAChC,IAAI,CAACqB,cAAc;MACjBH,UAAU,KAAK;IACjB;IACAJ;EACF,GAAG,CAACO,cAAcP,sBAAsB,CAAC;EAEzC,IAAMP,SAASP,YAAY,YAAM;IAC/B,IAAI,CAACqB,cAAc;MACjBH,UAAU,IAAI;IAChB;IACAN;EACF,GAAG,CAACS,cAAcT,qBAAqB,CAAC;EAExC,IAAMW,WAAWvB,YAAY,YAAM;IACjC,IAAMwB,SAASf,SAASJ,UAAUE;IAClCiB,OAAO;EACT,GAAG,CAACf,QAAQF,QAAQF,OAAO,CAAC;EAE5B,OAAO;IACLI,QAAQ,CAAC,CAACA;IACVF;IACAF;IACAkB;IACAF;IACAI,gBAAgB;MAAA,IAACtB,6EAAa,CAAC;MAAA,uCAC1BA;QACH,iBAAiBM;QACjB,iBAAiBE;QACjBe,SAAS3B,gBAAgBI,OAAMuB,SAASH,QAAQ;MAAA;IAAA,CAClD;IACAI,oBAAoB;MAAA,IAACxB,6EAAa,CAAC;MAAA,uCAC9BA;QACHyB,QAAQ,CAACnB;QACTE;MAAA;IAAA;EAEJ;AACF","names":["callAllHandlers","useCallback","useState","useDisclosure","props","onCloseProp","onClose","onOpenProp","onOpen","isOpenProp","isOpen","idProp","id","onOpenPropCallbackRef","useCallbackRef","onClosePropCallbackRef","defaultIsOpen","_useState2","isOpenState","setIsOpen","useControllableProp","_useControllableProp2","isControlled","useId","onToggle","action","getButtonProps","onClick","getDisclosureProps","hidden"],"sources":["E:\\GoIT\\Zad dom\\goit-react-hw-08-phonebook\\node_modules\\@chakra-ui\\hooks\\src\\use-disclosure.ts"],"sourcesContent":["import { callAllHandlers } from \"@chakra-ui/utils\"\nimport { useControllableProp } from \"./use-controllable\"\nimport { useId } from \"./use-id\"\nimport { useCallbackRef } from \"./use-callback-ref\"\nimport { useCallback, useState } from \"react\"\n\nexport interface UseDisclosureProps {\n  isOpen?: boolean\n  defaultIsOpen?: boolean\n  onClose?(): void\n  onOpen?(): void\n  id?: string\n}\n\nexport function useDisclosure(props: UseDisclosureProps = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp,\n  } = props\n\n  const onOpenPropCallbackRef = useCallbackRef(onOpenProp)\n  const onClosePropCallbackRef = useCallbackRef(onCloseProp)\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false)\n  const [isControlled, isOpen] = useControllableProp(isOpenProp, isOpenState)\n\n  const id = useId(idProp, \"disclosure\")\n\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false)\n    }\n    onClosePropCallbackRef?.()\n  }, [isControlled, onClosePropCallbackRef])\n\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true)\n    }\n    onOpenPropCallbackRef?.()\n  }, [isControlled, onOpenPropCallbackRef])\n\n  const onToggle = useCallback(() => {\n    const action = isOpen ? onClose : onOpen\n    action()\n  }, [isOpen, onOpen, onClose])\n\n  return {\n    isOpen: !!isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps: (props: any = {}) => ({\n      ...props,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick: callAllHandlers(props.onClick, onToggle),\n    }),\n    getDisclosureProps: (props: any = {}) => ({\n      ...props,\n      hidden: !isOpen,\n      id,\n    }),\n  }\n}\n\nexport type UseDisclosureReturn = ReturnType<typeof useDisclosure>\n"]},"metadata":{},"sourceType":"module"}